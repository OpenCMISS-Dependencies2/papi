2005-08-26  maynardj
	* ctests/test_utils.c
		Fix infinite loop possibility in add_two_events

2005-08-15  maynardj
        * configure.in
        * config.h.in
        * ctests/multiplex3_pthreads.c
        * ctests/byte_profile.c
        * ctests/native.c
        * ctests/overflow_force_software.c
        * ctests/profile.c
        * ctests/prof_utils.h
        * ctests/sprofile.c
        * ctests/tenth.c
        * event_data/power4/events (new)
        * event_data/power4/groups (new)
        * event_data/power5/events (new)
        * event_data/power5/groups (new)
        * event_data/ppc970/events (new)
        * event_data/ppc970/groups (new)
        * linux.c
        * linux-ppc64.h (new)
        * linux-ppc64-memory.c (new)
        * Makefile.linux-perfctr-POWER4 (new)
        * Makefile.linux-perfctr-POWER4-64bit (new)
        * Makefile.linux-perfctr-POWER5 (new)
        * Makefile.linux-perfctr-POWER5-64bit (new)
        * Makefile.linux-perfctr-PPC970 (new)
        * Makefile.linux-perfctr-PPC970-64bit (new)
        * papi.h
        * perfctr-ppc64.c (new)
        * perfctr-ppc64.h (new)
        * power4_events.h
        * power4_events_map.c (new)
        * power5_events.h (new)
        * power5_events_map.c (new)
        * ppc64_events.c (new)
        * ppc970_events.h (new)
        * ppc970_events_map.c (new)
        * Rules.perfctr
                Add support for PPC64 processors (POWER4, POWER5, and PPC970).
                The changed and new files listed above constitute a port of
                PAPI to the Linux/PPC64 platform.

2005-03-03  terpstra
	* Makefile.linux-perfctr-athlon 1.13:
	* Rules.perfctr 1.21:
		Added FARGS to Rules and __athlon__ to Makefile so that native.F can PASS instead of SKIP.
		This test really needs a rewrite, but this'll work for now.

	* p3_events.c 1.46:
		Modified the Athlon event table based on input from Anoop Iyer of AMD;
		Removed the need for the previously implemented DERIVED_SUB
		underflow fix -- at least for Athlon.

2005-03-03  mucci
	* run_tests.sh 1.19:
		Added AIXTHREAD_SCOPE=S

	* aix.c 1.54:
		Removed redundant delete_program_mythread

	* aix.c 1.53:
		Corrected wrong error message

2005-03-03  you
	* ctests/test_utils.h 1.31:
		change #define CACHE_FLUSH_BUFFER_SIZE_INTS 32*1024*1024 to
		#define CACHE_FLUSH_BUFFER_SIZE_INTS 16*1024*1024
		this will solve byte_profile limit memory problem on power.

2005-03-02  you
	* ctests/overflow.c 1.56:
		As Phil mentioned, On all Linux the timer is maxed at 1/100 of a second, to prevent owerflow threshold is too
		small, use mythreshold = hw_info->mhz*10000*2 on linux system.

	* ctests/overflow2.c 1.19:
	* ctests/overflow_single_event.c 1.38:
		use higher threshold defined by mhz for linux with software
		overflow.

2005-03-02  mucci
	* linux.c 1.32:
		When PAPI is run as SUID, often links in /proc are inaccessible. This was
		reported by the guys at CMU. Thanks guys!
		
		The fix is simply to tolerate inaccessible
		/proc information since this doesn't affect library operation at all. In
		this case, the exe_name and full_name are NULL strings, and the memory map
		is empty. Debug error messages are still raised.
		
		The executable name can be empty, as can the memory map.
		
		From: 	Brian Gold <bgold@cmu.edu>
		To: 	Philip Mucci <mucci@cs.utk.edu>
		Cc: 	Gall Gotfried <ggall@andrew.cmu.edu>
		Subject: 	Re: [Fwd: Re: FW: measuring background process with papiex]
		Date: 	Wed, 02 Mar 2005 00:25:10 -0500  (06:25 CET)
		
		Hi Phil,
		
		That worked, mostly.  I setuid/setgid all the relevant libraries, which
		then got me to a PAPI_library_init error reporting a system call error.
		I ran papiex with -d, and it reported a permission denied problem in
		readlink().  PAPI_library_init examines /proc/SOME_PID/exe to see the
		actual binary path, but procfs is very stingy about who can view that
		symlink.  I couldn't figure out an elegant way to get /proc to allow a
		library, even when setuid-root, to see the symlinks in /proc.  Maybe
		you've got a better work around, but...

2005-03-02  terpstra
	* p3_events.c 1.45:
		Added six new undocumented native events to Opteron event table per Phil's request.
		These measure NUMA HyperTransport memory and IO transfers.
		Run utils/native_avail on Opteron and look at the last six entries.

	* Makefile.linux-perfctr-athlon 1.12:
	* Makefile.linux-perfctr-p3 1.24:
	* papi_internal.c 1.98:
		Tweaked on Kevin's fix for DERIVED_SUB errors on Athlon and PIII.
		Lowered correction threshold to -3.
		Added compile switch to Athlon and PIII make files.

2005-03-01  london
	* ctests/do_loops.c 1.27:
	* ctests/memory.c 1.20:
	* ctests/test_utils.h 1.30:
		A few fixes to prevent buffer overruns.  This still doesn't fix
		the occasional error we are getting though.

	* papi_internal.c 1.97:
		In some cases a DERIVED_SUB is negative, this checks for this
		case.

2005-03-01  mucci
	* Makefile.inc 1.102:
		Used and && instead of cd man. This would cause an infinite loop in the build
		if you didn't have the man directory.

	* Makefile 1.14:
		Added message about using configure and added 32 bit makefiles
		to list.

	* perfctr-2.6.x/usr.lib/Makefile 1.12:
		Added LD_FLAGS necessary for compiling a 32bit version on a 64
		bit system

	* configure 1.30:
	* configure.in 1.29:
		Restructured TLS test for Debian/SuSE 9/IA64 compiler bug
		
		From Stefane Eranian:
		
		Last week, I spent some time tracking this down
		and it depends on how the code is laid out. I narrowed it down to
		the piece of code in the attached C program. The thing that gets
		the compiler to panic, is the fact that the _papi_hwi_my_thread
		is declared extern __thread, then used, then followed by the
		actual definition. If I move the definition before the first
		use point, it works.
		
		
		
					C source code attachment (t2.c)
		
		typedef struct _ThreadInfo {
		  unsigned long int tid;
		} ThreadInfo_t;
		
		extern __thread ThreadInfo_t *_papi_hwi_my_thread;
		
		inline static ThreadInfo_t *_papi_hwi_lookup_thread(void)
		{
		
		  { ; };
		  return(_papi_hwi_my_thread);
		}
		
		
		__thread ThreadInfo_t *_papi_hwi_my_thread;

	* Makefile.linux-perfctr-em64t-32bit 1.1:
	* Makefile.linux-perfctr-opteron-32bit 1.1:
	* Rules.perfctr 1.20:
	* configure 1.31:
	* configure.in 1.30:
		Added 32 bit library support for 64 bit platforms. This has been tested on
		an Opteron. All tests pass. Configure script works also.

2005-03-01  terpstra
	* p3_events.c 1.44:
		Added PAPI_L2_TCH to Opteron per Brian Wylie's suggestion.

2005-02-28  london
	* x1.c 1.20:
		Fix for segfaults on software overflow.  Also, may have found an OS bug
		that you can't count events after setting hardware overflow, as the
		counters get reset once the threshold is set, even if overflow has
		been turned off.  Creating a sample that demonstrates this and sending
		to Cray.

2005-02-28  terpstra
	* utils/event_chooser.c 1.2:
		Mods to eliminate warning messages.

	* x1.c 1.21:
		Added a SUBDBG message on the si structure for overflows.

	* p3_events.c 1.43:
		Cleaned up Opteron events per Brian Wylie's suggestions:
		
		I've been using PAPI on Opteron and have encountered a few oddities with
		the preset definitions: in particular, I'm looking at p3_events.c v1.42
		in the CVS repository:
		
		PAPI_L1_ICH = IC_MISS - IC_SYS_REFILL - IC_L2_REFILL
		This definition seems to always yield zero and is presumably incorrect.
		A comment in the CVS log (from AMD) suggests replacing IC_MISS (81h)
		with IC_FETCH (80h), which seems much more reasonable.
		
		Similar comments in the CVS log, which sound like recommendations from
		AMD, are not to include INValid refills from L2 and system, and indeed
		v1.39 modified the definitions of DC_L2_REFILL_TOT and DC_SYS_REFILL_TOT
		accordingly. Subsequently, however, these definitions were replaced
		with DC_L2_REFILL_MOESI and DC_SYS_REFILL_MOESI which reinstated the
		INValid refills. (This effects a number of the presets.)
		
		I also see other definitions which include INValid refills:
		PAPI_L2_DCW = DC_L2_REFILL_MI
		PAPI_L1_LDM = DC_L2_REFILL_OESI and
		PAPI_L2_LDM = DC_SYS_REFILL_OESI
		and I'm wondering whether the INValid refills should be removed from
		these too.
		
		Can you, or some of the folks at AMD, check these?

2005-02-28  mucci
	* irix-mips.c 1.100:
	* x1.c 1.22:
		Removed definition of using signal

	* Makefile.inc 1.101:
		Added clobber phase to utils

	* utils/Makefile 1.2:
		Added clobber and proper TARGET specification

	* aix.c 1.52:
		Added pm_error calls if not quiet. Fix until hwd_error is
		implemented fully.

	* extras.c 1.126:
	* papi_internal.h 1.156:
		Made using signal volatile

	* papi_internal.c 1.96:
		Removed error string that was wrong when we had an unknown
		error code

2005-02-24  terpstra
	* papi_fwrappers.c 1.70:
		Modified fwrappers to support Cray X1 string length at end
		convention.

2005-02-24  london
	* ctests/overflow_force_software.c 1.11:
		Changes to check for derived events, and to get rid of the need for strcmp
		on os names.

	* ctests/overflow_force_software.c 1.12:
		Fix to check for compound derived events which CAN be used to overflow
		on in hardware (Currently only p4 has them).  This allows P4 to use
		FP_INS instead of TOT_INS

2005-02-23  mucci
	* papi_internal.c 1.95:
		Removed some papi_return macros. papi_return only belongs in
		papi.c

2005-02-22  terpstra
	* ftests/native.F 1.44:
		Added native events for Cray X1.
		Test no longer FAILS on X1.
		Now it SKIPs.
		Something's still not right...

	* ctests/Makefile 1.124:
	* ctests/clockres.c 1.20:
	* ctests/cost.c 1.26:
	* ctests/mem_info.c 1.10:
	* utils/clockres.c 1.20:
	* utils/cost.c 1.26:
	* utils/mem_info.c 1.10:
		Moved cost.c, clockres.c, and mem_info.c from ctests to the newly created utils directory.
		Makefile contains appropriate mods to remove these files.

	* Makefile.inc 1.100:
		Changes to support utils directory

2005-02-22  mucci
	* utils/Makefile 1.1:
	* utils/event_chooser.c 1.1:
		Recommit of Makefile and event_chooser written by Haihang and Dan. This
		is 1.1

	* libpfm-3.x/COPYRIGHT 1.2:
	* libpfm-3.x/ChangeLog 1.3:
	* libpfm-3.x/Makefile 1.2:
	* libpfm-3.x/README 1.2:
	* libpfm-3.x/TODO 1.2:
	* libpfm-3.x/config.mk 1.2:
	* libpfm-3.x/examples/Makefile 1.4:
	* libpfm-3.x/examples/ita2_btb.c 1.2:
	* libpfm-3.x/examples/ita2_dear.c 1.2:
	* libpfm-3.x/examples/ita_btb.c 1.2:
	* libpfm-3.x/examples/ita_dear.c 1.2:
	* libpfm-3.x/examples/multiplex.c 1.3:
	* libpfm-3.x/examples/notify_self.c 1.3:
	* libpfm-3.x/examples/syst.c 1.2:
	* libpfm-3.x/examples/task_smpl.c 1.2:
	* libpfm-3.x/include/perfmon/perfmon.h 1.2:
	* libpfm-3.x/include/perfmon/pfmlib.h 1.3:
	* libpfm-3.x/include/perfmon/pfmlib_comp.h 1.2:
	* libpfm-3.x/include/perfmon/pfmlib_comp_ia64.h 1.2:
	* libpfm-3.x/include/perfmon/pfmlib_generic_ia64.h 1.2:
	* libpfm-3.x/include/perfmon/pfmlib_itanium.h 1.2:
	* libpfm-3.x/include/perfmon/pfmlib_itanium2.h 1.2:
	* libpfm-3.x/include/perfmon/pfmlib_os.h 1.2:
	* libpfm-3.x/include/perfmon/pfmlib_os_ia64.h 1.2:
	* libpfm-3.x/lib/Makefile 1.3:
	* libpfm-3.x/lib/itanium2_events.h 1.3:
	* libpfm-3.x/lib/pfmlib_common.c 1.3:
	* libpfm-3.x/lib/pfmlib_generic_ia64.c 1.3:
	* libpfm-3.x/lib/pfmlib_itanium.c 1.3:
	* libpfm-3.x/lib/pfmlib_itanium2.c 1.3:
	* libpfm-3.x/libpfm.spec 1.2:
		Updates from latest libpfm 3.1. We should adopt a 3.x and 2.x
		naming scheme.

	* libpfm-2.x/examples/Makefile 1.3:
	* libpfm-2.x/examples/ita_btb.c 1.2:
	* libpfm-2.x/include/perfmon/pfmlib_compiler.h 1.3:
		Updates from latest libpfm-2.0

	* Rules.pfm 1.15:
		New rules for libpfm-2.x and 3.x directories.

	* Rules.pfm 1.16:
		Last fix for new dir

2005-02-22  london
	* linux-ia64.c 1.122:
		Fix for software overflowing using PFM 3.0

	* irix-mips.c 1.99:
		Fix for software overflow on irix

2005-02-21  terpstra
	* ctests/avail.c 1.32:
	* ctests/command_line.c 1.4:
	* ctests/native_avail.c 1.20:
	* utils/avail.c 1.32:
	* utils/command_line.c 1.4:
	* utils/native_avail.c 1.20:
		Moved avail.c, command_line.c, and native_avail.c from ctests to the newly created utils directory.
		This is the first step in creating a useful set of utilities apart from our usual tests.
		Makefiles will also need to be modified.

	* ftests/ftests_util.F 1.38:
		Modified ftest_fail to match test_fail.
		Now skips on PAPI_EPERM so that second.F will skip the same as second.c
		BTW, second.F now bears little resemblance to second.c...
		Someday these should be reconciled.

2005-02-21  london
	* linux-ia64.c 1.120:
		Fix for not compiling using libpfm 3.0

2005-02-21  mucci
	* linux-ia64.c 1.121:
	* linux-ia64.h 1.41:
		Added MMTIMER support on Altix for good global timing.

	* configure 1.29:
	* configure.in 1.28:
		More fixes for EM64T confgure.

	* ctests/clockcore.c 1.16:
		Removed leftover abort and moved to test fail

	* Makefile.in 1.4:
	* Makefile.linux-perfctr-athlon 1.11:
	* Makefile.linux-perfctr-em64t 1.5:
	* Makefile.linux-perfctr-opteron 1.18:
	* Makefile.linux-perfctr-p2 1.3:
	* Makefile.linux-perfctr-p3 1.23:
	* Makefile.linux-perfctr-p4 1.40:
	* Rules.perfctr 1.19:
	* Rules.pfm 1.14:
	* configure 1.28:
	* configure.in 1.27:
		Fixed build for ALTIX. This was building with PFM in our directory,
		but there should be always building with the pfm in /usr. Also
		allowed configure to detect the altix for when we add the MM timer in the
		future.
		
		Also, cleaned up the NOTLS build options....It should only have been added
		in the Rules files.
		
		aLSO, Added some new code for future --with-pfm --pfm-prefix and perfctr
		equivalents to configure. This code is commented out.

2005-02-19  you
	* solaris-ultra.c 1.101:
		fix the failures on enterprise. in function
		_papi_hwd_update_shlib_info(), flags are r w x instead of being
		read write and exec on enterprise.

2005-02-18  london
	* ctests/overflow_force_software.c 1.10:
		Changed the verification to check overflows and removed the printing of
		the event when hardware overflowing is enabled as reading an event that
		is on hardware overflow doesn't mean anything. We should probably change the
		event from PAPI_FP_INS/PAPI_FP_OPS to PAPI_TOT_INS as this test will skip
		if PAPI_FP_INS or PAPI_FP_OPS is derived as it is on some platforms.

	* perfctr-2.6.x/CHANGES 1.1.1.10:
	* perfctr-2.6.x/etc/costs/MPC7455-1.0 1.1.1.1:
	* perfctr-2.6.x/etc/costs/Opteron-2.4 1.1.1.1:
	* perfctr-2.6.x/linux/drivers/perfctr/RELEASE-NOTES 1.1.1.10:
	* perfctr-2.6.x/linux/drivers/perfctr/compat.h 1.1.1.4:
	* perfctr-2.6.x/linux/drivers/perfctr/compat24.h 1.1.1.5:
	* perfctr-2.6.x/linux/drivers/perfctr/global.c 1.1.1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/global.h 1.1.1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/init.c 1.1.1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/ppc.c 1.1.1.7:
	* perfctr-2.6.x/linux/drivers/perfctr/version.h 1.1.1.10:
	* perfctr-2.6.x/linux/drivers/perfctr/virtual.c 1.1.1.5:
	* perfctr-2.6.x/linux/drivers/perfctr/x86.c 1.1.1.8:
	* perfctr-2.6.x/patches/aliases 1.1.1.6:
	* perfctr-2.6.x/patches/patch-kernel-2.4.21-27.EL-redhat 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.4.22-1.2199.nptl-redhat 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.4.29 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.4.30-pre1 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.6.10 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.6.11-rc4 1.1.1.1:
	* perfctr-2.6.x/perfctr.spec 1.1.1.10:
	* perfctr-2.6.x/usr.lib/Makefile 1.1.1.10:
		Perfctr 2.6.13 import

	* perfctr-2.6.x/patches/patch-kernel-2.4.29-pre2 1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.6.10-rc3 1.2:
	* perfctr-2.6.x/usr.lib/Makefile 1.11:
		Perfctr 2.6.13

	* threads.h 1.3:
		Added linux check for TLS

	* extras.c 1.124:
	* linux-ia64.c 1.119:
	* papi.c 1.286:
		Fixes for forced overflow, first we had no default for a sigaction so in some
		cases a sigaction wasn't getting setup, and ia64 didn't have dispatch_timer
		routine implemented at all. Added better debugging messages.

	* extras.c 1.125:
		Fix for _papi_hwi_using_signal, we bumped it in _papi_hwi_start_signal
		and then checked if _papi_hwi_using_signal > 0 and then if it was didn't
		install the timer, but since _papi_hwi_start_signal called before
		_papi_hwi_start_timer systems with ANY_THREAD_GETS_SIGNAL won't ever have
		a timer setup.  This basically stopped any overflowing on systems like
		Power.   Also, there are all kinds of race conditions as to if the timer
		gets installed, I know _papi_hwi_using_signal is to make us feel all warm
		and fuzzy, but I am not sure it fixes the problems it is meant to address.

2005-02-18  terpstra
	* papi.h 1.136:
		Bumpe version number to 3.0.8

2005-02-16  terpstra
	* x1-presets.h 1.4:
		Deprecated PAPI_TOT_IIS for X1. Previous definition was giving
		random results from 0 to very large.

	* ctests/overflow_force_software.c 1.9:
		Fixed event assignment.
		PAPI_FP_OPS was being assigned when it should have been PAPI_FP_INS, and vice versa.

	* ctests/sdsc.c 1.13:
		Fixed indexing problem in output. A 'j' should have been an 'i'.

2005-02-15  terpstra
	* power4.c 1.35:
		Add 20 cache and branch events contributed by Brian Wylie.
		This nearly doubles the number of events available on POWER4.
		Thanks, Brian!

2005-02-14  you
	* Makefile.in 1.3:
	* Makefile.linux-perfctr-athlon 1.10:
	* Makefile.linux-perfctr-em64t 1.4:
	* Makefile.linux-perfctr-opteron 1.17:
	* Makefile.linux-perfctr-p2 1.2:
	* Makefile.linux-perfctr-p3 1.22:
	* Makefile.linux-perfctr-p4 1.39:
	* Rules.pfm 1.13:
	* configure 1.27:
	* configure.in 1.26:
		add configure switch --with-tls=<yes|no>. By default, it is '
		yes' and running the checking code. When it is 'no', -DNO_TLS
		passed to gcc.

2005-02-09  mucci
	* power4.c 1.34:
		Modifications to the Power 4 PAPI Presets...Surely these still aren't
		correct. Upon checkin on preset maps from IBM on the Linxu/PPC64, we
		will calibrate the two.

	* papi_internal.h 1.155:
		If you set PAPI_DEBUG to ALL or THREADS and compile with -DDEBUG,
		now the internal eventset lookup routine will return NULL if you
		lookup another threads eventset. This should help debug possible
		problems on architectures where signals may be delivered to any threads.
		Under normal operation, this is not turned on for performance reasons.

	* dadd-alpha.h 1.10:
	* linux-alpha.h 1.6:
	* tru64-alpha.h 1.19:
	* unicos-ev5.c 1.62:
	* unicos-ev5.h 1.16:
		Removed timer_ms definition from hwd_control_state. It doesn't
		need to be there.

	* power3.h 1.18:
	* power4.h 1.11:
		Added pm_data_t to hwd_control_state_t. This contains per thread
		space for the counters!

	* Makefile.any-null 1.14:
		Anynull build fixes

	* ctests/kufrin.c 1.5:
	* ctests/overflow_force_software.c 1.8:
		kufrin: changed type to long long, as they should be.
		overflow_force_software: removed C99 like declaration to the front.

	* any-null.c 1.39:
	* any-null.h 1.13:
		This seems to be working for me again.

	* aix.c 1.51:
		The last fix for Brian Wylie's problem. I done fixed it good dis time.
		
		Of course you can't return a pointer to something that's on your own stack.
		Duh.

2005-02-09  terpstra
	* genpapifdef.c 1.30:
		Clean up of Cray X1 exception processing.
		Thanks to Kevin for pointing out the __crayx1 compiler flag.

2005-02-07  terpstra
	* genpapifdef.c 1.29:
		Modifications to work around Cray Fortran bug with maximum negative integer values.
		This fix requires editing the file to #define a tag to direct preprocessing.
		Not an elegant solution. Does anyone know a predefined flag to ID the X1?

2005-02-06  you
	* Makefile.inc 1.99:
		modified with suggestions from Maynard.

2005-02-04  london
	* ftests/Makefile 1.51:
		Fix for install_tests

2005-01-28  mucci
	* linux.c 1.31:
		Fixed the bug that showed up on the Nocona. A string was being used
		as HUGE but declared as MAX. Craig T of HPTI reported coredumps on Nocona
		that caught this one.

2005-01-27  mucci
	* ctests/overflow_force_software.c 1.7:
		Quick fix from Maynard J of IBM.

2005-01-26  mucci
	* extras.c 1.123:
	* multiplex.c 1.59:
	* papi_internal.c 1.94:
		Bug fixes from Maynard Johnson of IBM
		maynardj@us.ibm.com
		
		1. The patch to extras.c ensures that _papi_hwi_using_signal is always
		incremented.
		2. The patch to multiplex.c prevents the PAPI_EINVAL error if
		MPX_cleanup is called multiple times for a given set of MPX events
		(which happens in ctests/multiplex1).
		3. The patch to papi_internal.c is to ensure that all native events that
		we fail to add during a given call to add_native_events() get cleaned
		out of the NativeInfoArray.  This bug was causing a particular testcase
		to fail for me. In the testcase, I successfully added a couple events,
		then failed while adding a PAPI present event that mapped to 4 native
		events.  This change makes sure we examine all NativeInfoArray event
		entries to see if they failed and need to be removed.

2005-01-20  mucci
	* Makefile.solaris-ultra 1.59:
	* Makefile.solaris-ultra-64bit 1.13:
		Removed -R argument to shared link, which was putting the wrong path
		in to the run-time loader.
		Removed the -h flag to the shared link, which was (in the 64 bit case)
		setting the wrong name of the library.
		Neither is required.

	* linux-ia64.c 1.118:
		Ooops. Missed a little bug on line 961. Thanks to Shirley for catching this.
		
		Phil

2005-01-13  terpstra
	* p4_events.c 1.49:
		Implemented PAPI_L1_ICA and PAPI_L1_ICM per suggestions from Brinkley Sprunt.
		Don't know how to validate whether the counts are reasonable.
		That's left as an exercise for the user.

	* papiStdEventDefs.h 1.31:
		Added some comment spacers to clarify event numbering.

2005-01-10  terpstra
	* p3_events.c 1.42:
	* perfctr-p3.c 1.58:
	* perfctr-p3.h 1.34:
		Modifications to native event tables for Pentium II, III, Athlon and Opteron to
		dynamically generate all combinations of events that support MESI (Intel) or
		MOESI (AMD) bits. Similar to the way that Pentium 4 supports groups and
		modifiers, but MUCH simpler.
		Tested on Pentium III and Opteron. Not tested on Pentium II and Athlon.
		This is in response to Luiz DeRose's request for more flexibility in
		specifying native events on Opteron.
		You're welcome, Luiz.

	* extras.c 1.122:
	* p4_events.c 1.48:
	* papi.c 1.285:
	* papi_protos.h 1.48:
		Changes to address the thread-unsafe behavior of
		_papi_hwd_code_to_{name,descr}().
		Rather than change the calling sequence of these routines in every substrate,
		I changed the way the routines are called from extras.c, wrapping them in PAPI_lock/unlock pairs.
		Pentium 4 was the only substrate that posed a thread risk. That hole has now been plugged.
		Also, other substrates can now engage in the same shenanigans if desired.
		NOTE: This required changes in the calling sequences of two _hwi_ routines.
		These changes are not exposed to the user.

2005-01-07  mucci
	* linux-ia64.c 1.117:
	* linux-ia64.h 1.40:
	* pfmwrap.h 1.22:
		Fixes for SGI Propack 3 on Altix...
		
		This happens because it's a Perfmon 2 platform + NPTL threads. Got
		rid of those pesky, pesky pids instead of nice little tids.
		
		Working? Who knows...haven't tested. Rick?
		
		Phil

2005-01-06  london
	* perfctr-2.6.x/CHANGES 1.1.1.9:
	* perfctr-2.6.x/Makefile 1.1.1.2:
	* perfctr-2.6.x/etc/costs/Athlon-1000 1.1.1.2:
	* perfctr-2.6.x/etc/costs/MPC7447A-1.25 1.1.1.1:
	* perfctr-2.6.x/etc/install.sh 1.1.1.2:
	* perfctr-2.6.x/examples/perfex/arch.h 1.1.1.2:
	* perfctr-2.6.x/examples/perfex/perfex.c 1.1.1.2:
	* perfctr-2.6.x/examples/perfex/ppc.c 1.1.1.2:
	* perfctr-2.6.x/examples/perfex/x86.c 1.1.1.3:
	* perfctr-2.6.x/examples/signal/arch.h 1.1.1.2:
	* perfctr-2.6.x/examples/signal/ppc.c 1.1.1.2:
	* perfctr-2.6.x/examples/signal/signal.c 1.1.1.3:
	* perfctr-2.6.x/examples/signal/x86.c 1.1.1.5:
	* perfctr-2.6.x/linux/drivers/perfctr/RELEASE-NOTES 1.1.1.9:
	* perfctr-2.6.x/linux/drivers/perfctr/ppc.c 1.1.1.6:
	* perfctr-2.6.x/linux/drivers/perfctr/ppc_tests.c 1.1.1.3:
	* perfctr-2.6.x/linux/drivers/perfctr/version.h 1.1.1.9:
	* perfctr-2.6.x/patches/patch-kernel-2.4.28 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.4.29-pre2 1.1.1.1:
	* perfctr-2.6.x/patches/patch-kernel-2.6.10-rc3 1.1.1.1:
	* perfctr-2.6.x/perfctr.spec 1.1.1.9:
	* perfctr-2.6.x/usr.lib/Makefile 1.1.1.9:
	* perfctr-2.6.x/usr.lib/gen-event-codes.c 1.1.1.2:
		Perfctr 2.6.12 import

	* perfctr-2.6.x/linux/drivers/perfctr/x86_64_compat.h 1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/x86_64_setup.c 1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/x86_64_tests.c 1.2:
	* perfctr-2.6.x/linux/drivers/perfctr/x86_64_tests.h 1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.20-13.8-redhat 1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.20-13.9-redhat 1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.21-1.1931.2.393.ent-redhat 1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.22-1.2129.nptl-redhat 1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.25-pre7 1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.4.28-pre3 1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.6.2-rc2 1.2:
	* perfctr-2.6.x/patches/patch-kernel-2.6.9-rc2 1.2:
	* perfctr-2.6.x/usr.lib/Makefile 1.10:
		Import fixes

2004-12-10  terpstra
	* ctests/memory.c 1.19:
		Windows doesn't support %lld formatting.
		Tweak on output format so Windows reports stuff correctly.

	* ftests/ftests_util.F 1.37:
		Minor change in scope of TESTS_QUIET variable so that tests would run quiet on Windows.
		Don't know how/why this ever worked before...

2004-12-08  terpstra
	* ctests/avail.c 1.31:
	* ctests/clockcore.c 1.15:
	* ctests/cost.c 1.25:
	* ctests/native_avail.c 1.19:
	* ctests/tenth.c 1.30:
	* utils/avail.c 1.31:
	* utils/cost.c 1.25:
	* utils/native_avail.c 1.19:
		Windows was complaining about implicit casts.
		long_long -> int and float -> double.
		These changes make them explicit.

	* ctests/overflow_twoevents.c 1.20:
		Fixed format string problems on output.
		There's still some output issues I need to look at...

	* extras.c 1.121:
		Rearranged for signal and timer handling on Windows

	* ctests/overflow_twoevents.c 1.21:
		Fixed the remaining Windows format string problems on output.

	* papi.c 1.284:
	* papi_internal.h 1.154:
	* perfctr-p3.c 1.57:
	* perfctr-p3.h 1.33:
		Minor syntax changes for Windows compatibility.
		Removed Windows version of _papi_hwd_set_overflow() from perfctr-p3.c,
		because it was essentially identical to linux version.
		Windows version is now up-to-date with PAPI 3.0.7.