#
# Every CPU automatically has PAPI_TOT_CYC and PAPI_TOT_INS added
#
# Processor identifier and additional flags.
# The processor identifier *can not* contain any comma characters as these
# characters serve to delimit fields.
#
CPU,AMD64 (K7)
CPU,amd64_k7
PRESET,PAPI_TOT_INS,NOT_DERIVED,RETIRED_INSTRUCTIONS
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CLK_UNHALTED
PRESET,PAPI_L1_ICM,NOT_DERIVED,INSTRUCTION_CACHE_MISSES
PRESET,PAPI_L1_ICA,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_ICR,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_DCM,NOT_DERIVED,DATA_CACHE_MISSES
PRESET,PAPI_L1_DCA,NOT_DERIVED,DATA_CACHE_ACCESSES
PRESET,PAPI_L1_DCH,DERIVED_SUB,DATA_CACHE_ACCESSES,DATA_CACHE_MISSES
PRESET,PAPI_L1_TCA,DERIVED_ADD,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_TCM,DERIVED_ADD,INSTRUCTION_CACHE_MISSES,DATA_CACHE_MISSES
PRESET,PAPI_L1_TCH,DERIVED_POSTFIX,N0|N1|+|N2|-|N3|-|,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES,DATA_CACHE_MISSES,INSTRUCTION_CACHE_MISSES
#
PRESET,PAPI_TLB_DM,NOT_DERIVED,L1_DTLB_AND_L2_DTLB_MISS
PRESET,PAPI_TLB_IM,NOT_DERIVED,L1_ITLB_MISS_AND_L2_ITLB_MISS
PRESET,PAPI_TLB_TL,DERIVED_ADD,L1_DTLB_AND_L2_DTLB_MISS,L1_ITLB_MISS_AND_L2_ITLB_MISS
#
PRESET,PAPI_BR_INS,NOT_DERIVED,RETIRED_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_TKN,NOT_DERIVED,RETIRED_TAKEN_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_MSP,NOT_DERIVED,RETIRED_MISPREDICTED_BRANCH_INSTRUCTIONS
#
PRESET,PAPI_HW_INT,NOT_DERIVED,INTERRUPTS_TAKEN
#
CPU,AMD64
CPU,AMD64 (unknown model)
CPU,AMD64 (K8 RevB)
CPU,AMD64 (K8 RevC)
CPU,AMD64 (K8 RevD)
CPU,AMD64 (K8 RevE)
CPU,AMD64 (K8 RevF)
CPU,AMD64 (K8 RevG)
CPU,amd64_k8_revb
CPU,amd64_k8_revc
CPU,amd64_k8_revd
CPU,amd64_k8_reve
CPU,amd64_k8_revf
CPU,amd64_k8_revg
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,RETIRED_INSTRUCTIONS
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CLK_UNHALTED
PRESET,PAPI_L1_ICH,DERIVED_SUB,INSTRUCTION_CACHE_FETCHES,INSTRUCTION_CACHE_REFILLS_FROM_SYSTEM,INSTRUCTION_CACHE_REFILLS_FROM_L2
PRESET,PAPI_L1_ICM,NOT_DERIVED,INSTRUCTION_CACHE_MISSES
PRESET,PAPI_L1_ICA,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_ICR,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_DCM,NOT_DERIVED,DATA_CACHE_MISSES
PRESET,PAPI_L1_DCA,NOT_DERIVED,DATA_CACHE_ACCESSES
PRESET,PAPI_L1_DCH,DERIVED_SUB,DATA_CACHE_ACCESSES,DATA_CACHE_MISSES
PRESET,PAPI_L1_TCA,DERIVED_ADD,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_TCM,DERIVED_ADD,INSTRUCTION_CACHE_MISSES,DATA_CACHE_MISSES
PRESET,PAPI_L1_TCH,DERIVED_POSTFIX,N0|N1|+|N2|-|N3|-|,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES,DATA_CACHE_MISSES,INSTRUCTION_CACHE_MISSES
#
PRESET,PAPI_L2_ICA,NOT_DERIVED,REQUESTS_TO_L2:INSTRUCTIONS
PRESET,PAPI_L2_ICM,NOT_DERIVED,L2_CACHE_MISS:INSTRUCTIONS
PRESET,PAPI_L2_ICH,NOT_DERIVED,INSTRUCTION_CACHE_REFILLS_FROM_L2
PRESET,PAPI_L2_DCA,NOT_DERIVED,REQUESTS_TO_L2:DATA
PRESET,PAPI_L2_DCM,NOT_DERIVED,L2_CACHE_MISS:DATA
PRESET,PAPI_L2_DCH,DERIVED_SUB,REQUESTS_TO_L2:DATA,L2_CACHE_MISS:DATA
PRESET,PAPI_L2_TCA,NOT_DERIVED,REQUESTS_TO_L2:ALL
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_CACHE_MISS:INSTRUCTIONS:DATA
PRESET,PAPI_L2_TCH,DERIVED_SUB,REQUESTS_TO_L2:INSTRUCTIONS:DATA,L2_CACHE_MISS:ALL
#
PRESET,PAPI_TLB_DM,NOT_DERIVED,L1_DTLB_AND_L2_DTLB_MISS
PRESET,PAPI_TLB_IM,NOT_DERIVED,L1_ITLB_MISS_AND_L2_ITLB_MISS
PRESET,PAPI_TLB_TL,DERIVED_ADD,L1_DTLB_AND_L2_DTLB_MISS,L1_ITLB_MISS_AND_L2_ITLB_MISS
#
PRESET,PAPI_BR_INS,NOT_DERIVED,RETIRED_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_TKN,NOT_DERIVED,RETIRED_TAKEN_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_MSP,NOT_DERIVED,RETIRED_MISPREDICTED_BRANCH_INSTRUCTIONS
#
PRESET,PAPI_STL_ICY,NOT_DERIVED,DECODER_EMPTY
PRESET,PAPI_RES_STL,NOT_DERIVED,DISPATCH_STALLS
PRESET,PAPI_HW_INT,NOT_DERIVED,INTERRUPTS_TAKEN
#
PRESET,PAPI_FPU_IDL,NOT_DERIVED,CYCLES_NO_FPU_OPS_RETIRED
PRESET,PAPI_FML_INS,NOT_DERIVED,DISPATCHED_FPU:OPS_MULTIPLY
PRESET,PAPI_FAD_INS,NOT_DERIVED,DISPATCHED_FPU:OPS_ADD
PRESET,PAPI_VEC_INS,NOT_DERIVED,RETIRED_MMX_AND_FP_INSTRUCTIONS:PACKED_SSE_AND_SSE2
#    This definition give an accurate count of the instructions retired through the FP unit
#    It counts just about everything except MMX and 3DNow instructions
#    Unfortunately, it also counts loads and stores. Therefore the count will be uniformly
#    high, but proportional to the work done.
PRESET,PAPI_FP_INS,NOT_DERIVED,RETIRED_MMX_AND_FP_INSTRUCTIONS:X87:SCALAR_SSE_AND_SSE2:PACKED_SSE_AND_SSE2
#/*  This definition is speculative but gives good answers on our simple test cases
#    It overcounts FP operations, sometimes by A LOT, but doesn't count loads and stores
PRESET,PAPI_FP_OPS,NOT_DERIVED,DISPATCHED_FPU:OPS_MULTIPLY:OPS_ADD,NOTE,'Counts speculative adds and multiplies. Variable and higher than theoretical.'
#
CPU,AMD64 FPU RETIRED
#
PRESET,PAPI_FP_OPS,NOT_DERIVED,RETIRED_MMX_AND_FP_INSTRUCTIONS:X87:SCALAR_SSE_AND_SSE2:PACKED_SSE_AND_SSE2,NOTE,"Counts all retired floating point operations, including data movement. Precise, and proportional to work done, but much higher than theoretical."
#
CPU,AMD64 FPU SPECULATIVE
#
PRESET,PAPI_FP_OPS,NOT_DERIVED,DISPATCHED_FPU:OPS_MULTIPLY:OPS_ADD,NOTE,"Counts speculative adds and multiplies. Variable and higher than theoretical."
#
CPU,AMD64 FPU SSE_SP
#
PRESET,PAPI_FP_OPS,DERIVED_SUB,RETIRED_MMX_AND_FP_INSTRUCTIONS:X87:SCALAR_SSE_AND_SSE2:PACKED_SSE_AND_SSE2,DISPATCHED_FPU:OPS_STORE,NOTE,"Counts retired ops corrected for data motion. Optimized for single precision; lower than theoretical."
#
CPU,AMD64 FPU SSE_DP
#
PRESET,PAPI_FP_OPS,DERIVED_SUB,RETIRED_MMX_AND_FP_INSTRUCTIONS:X87:SCALAR_SSE_AND_SSE2:PACKED_SSE_AND_SSE2,DISPATCHED_FPU:OPS_STORE_PIPE_LOAD_OPS,NOTE,"Counts retired ops corrected for data motion. Optimized for double precision; lower than theoretical."
#

########################
# AMD64                #
########################

CPU,AMD64 (Barcelona)
CPU,AMD64 (Barcelona RevB)
CPU,AMD64 (Barcelona RevC)
CPU,AMD64 (Family 10h RevB Barcelona)
CPU,AMD64 (Family 10h RevC Shanghai)
CPU,AMD64 (Family 10h RevD Istanbul)
CPU,AMD64 (Family 10h RevE)
CPU,amd64_fam10h_barcelona
CPU,amd64_fam10h_shanghai
CPU,amd64_fam10h_istanbul
CPU,amd64_fam11h_turion
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,RETIRED_INSTRUCTIONS
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CLK_UNHALTED
PRESET,PAPI_L1_ICH,DERIVED_SUB,INSTRUCTION_CACHE_FETCHES,INSTRUCTION_CACHE_REFILLS_FROM_SYSTEM,INSTRUCTION_CACHE_REFILLS_FROM_L2
PRESET,PAPI_L1_ICM,NOT_DERIVED,INSTRUCTION_CACHE_MISSES
PRESET,PAPI_L1_ICA,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_ICR,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_DCM,NOT_DERIVED,DATA_CACHE_MISSES
PRESET,PAPI_L1_DCA,NOT_DERIVED,DATA_CACHE_ACCESSES
PRESET,PAPI_L1_DCH,DERIVED_SUB,DATA_CACHE_ACCESSES,DATA_CACHE_MISSES
PRESET,PAPI_L1_TCA,DERIVED_ADD,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_TCM,DERIVED_ADD,INSTRUCTION_CACHE_MISSES,DATA_CACHE_MISSES
PRESET,PAPI_L1_TCH,DERIVED_POSTFIX,N0|N1|+|N2|-|N3|-|,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES,DATA_CACHE_MISSES,INSTRUCTION_CACHE_MISSES
#
PRESET,PAPI_L2_ICA,NOT_DERIVED,REQUESTS_TO_L2:INSTRUCTIONS
PRESET,PAPI_L2_ICM,NOT_DERIVED,L2_CACHE_MISS:INSTRUCTIONS
PRESET,PAPI_L2_ICH,NOT_DERIVED,INSTRUCTION_CACHE_REFILLS_FROM_L2
PRESET,PAPI_L2_DCA,NOT_DERIVED,REQUESTS_TO_L2:DATA
PRESET,PAPI_L2_DCM,NOT_DERIVED,L2_CACHE_MISS:DATA
PRESET,PAPI_L2_DCH,DERIVED_SUB,REQUESTS_TO_L2:DATA,L2_CACHE_MISS:DATA
PRESET,PAPI_L2_TCA,NOT_DERIVED,REQUESTS_TO_L2:ALL
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_CACHE_MISS:INSTRUCTIONS:DATA
PRESET,PAPI_L2_TCH,DERIVED_SUB,REQUESTS_TO_L2:INSTRUCTIONS:DATA,L2_CACHE_MISS:ALL
#
# no L3_ preset definitions for multi-cores with shared L3 cache,
# as long as L3 events are automatically shadowed from core- to chip-space
# PRESET,PAPI_L3_TCR,NOT_DERIVED,READ_REQUEST_TO_L3_CACHE:ALL
# PRESET,PAPI_L3_TCM,NOT_DERIVED,L3_CACHE_MISSES:ALL
# PRESET,PAPI_L3_TCH,DERIVED_SUB,READ_REQUEST_TO_L3_CACHE:ALL,L3_CACHE_MISSES:ALL
#
PRESET,PAPI_TLB_DM,NOT_DERIVED,L1_DTLB_AND_L2_DTLB_MISS:ALL
PRESET,PAPI_TLB_IM,NOT_DERIVED,L1_ITLB_MISS_AND_L2_ITLB_MISS:ALL
PRESET,PAPI_TLB_TL,DERIVED_ADD,L1_DTLB_AND_L2_DTLB_MISS:ALL,L1_ITLB_MISS_AND_L2_ITLB_MISS:ALL
#
PRESET,PAPI_BR_INS,NOT_DERIVED,RETIRED_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_TKN,NOT_DERIVED,RETIRED_TAKEN_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_MSP,NOT_DERIVED,RETIRED_MISPREDICTED_BRANCH_INSTRUCTIONS
#
PRESET,PAPI_STL_ICY,NOT_DERIVED,DECODER_EMPTY
PRESET,PAPI_RES_STL,NOT_DERIVED,DISPATCH_STALLS
PRESET,PAPI_HW_INT,NOT_DERIVED,INTERRUPTS_TAKEN
#
PRESET,PAPI_FPU_IDL,NOT_DERIVED,CYCLES_NO_FPU_OPS_RETIRED
PRESET,PAPI_FML_INS,NOT_DERIVED,DISPATCHED_FPU:OPS_MULTIPLY
PRESET,PAPI_FAD_INS,NOT_DERIVED,DISPATCHED_FPU:OPS_ADD
PRESET,PAPI_VEC_INS,NOT_DERIVED,RETIRED_MMX_AND_FP_INSTRUCTIONS:PACKED_SSE_AND_SSE2
#
#    An analysis by Bill Homer of Cray indicates accurate counts over a range of conditions
#    John McCalpin reports that OP_TYPE expands packed operation counts appropriately.
#    Therefore, it is included in FP_OPS, but not in FP_INS.
PRESET,PAPI_FP_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_ADD_SUB_OPS:SINGLE_MUL_OPS:DOUBLE_ADD_SUB_OPS:DOUBLE_MUL_OPS
PRESET,PAPI_FP_OPS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_ADD_SUB_OPS:SINGLE_MUL_OPS:DOUBLE_ADD_SUB_OPS:DOUBLE_MUL_OPS:OP_TYPE
PRESET,PAPI_SP_OPS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_ADD_SUB_OPS:SINGLE_MUL_OPS:SINGLE_DIV_OPS
PRESET,PAPI_DP_OPS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:DOUBLE_ADD_SUB_OPS:DOUBLE_MUL_OPS:DOUBLE_DIV_OPS
#
PRESET,PAPI_FML_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_MUL_OPS:DOUBLE_MUL_OPS:OP_TYPE
PRESET,PAPI_FAD_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_ADD_SUB_OPS:DOUBLE_ADD_SUB_OPS:OP_TYPE,NOTE,"Also includes subtract instructions"
PRESET,PAPI_FDV_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_DIV_OPS:DOUBLE_DIV_OPS:OP_TYPE,NOTE,"Counts both divide and square root instructions"
PRESET,PAPI_FSQ_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_DIV_OPS:DOUBLE_DIV_OPS:OP_TYPE,NOTE,"Counts both divide and square root instructions"


########################
# AMD64 fam12h llano   #
########################

CPU,amd64_fam12h_llano
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,RETIRED_INSTRUCTIONS
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CLK_UNHALTED
PRESET,PAPI_L1_ICH,DERIVED_SUB,INSTRUCTION_CACHE_FETCHES,INSTRUCTION_CACHE_REFILLS_FROM_SYSTEM,INSTRUCTION_CACHE_REFILLS_FROM_L2
PRESET,PAPI_L1_ICM,NOT_DERIVED,INSTRUCTION_CACHE_MISSES
PRESET,PAPI_L1_ICA,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_ICR,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_DCM,NOT_DERIVED,DATA_CACHE_MISSES
PRESET,PAPI_L1_DCA,NOT_DERIVED,DATA_CACHE_ACCESSES
PRESET,PAPI_L1_DCH,DERIVED_SUB,DATA_CACHE_ACCESSES,DATA_CACHE_MISSES
PRESET,PAPI_L1_TCA,DERIVED_ADD,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_TCM,DERIVED_ADD,INSTRUCTION_CACHE_MISSES,DATA_CACHE_MISSES
PRESET,PAPI_L1_TCH,DERIVED_POSTFIX,N0|N1|+|N2|-|N3|-|,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES,DATA_CACHE_MISSES,INSTRUCTION_CACHE_MISSES
#
PRESET,PAPI_L2_ICA,NOT_DERIVED,REQUESTS_TO_L2:INSTRUCTIONS
PRESET,PAPI_L2_ICM,NOT_DERIVED,L2_CACHE_MISS:INSTRUCTIONS
PRESET,PAPI_L2_ICH,NOT_DERIVED,INSTRUCTION_CACHE_REFILLS_FROM_L2
PRESET,PAPI_L2_DCA,NOT_DERIVED,REQUESTS_TO_L2:DATA
PRESET,PAPI_L2_DCM,NOT_DERIVED,L2_CACHE_MISS:DATA
PRESET,PAPI_L2_DCH,DERIVED_SUB,REQUESTS_TO_L2:DATA,L2_CACHE_MISS:DATA
PRESET,PAPI_L2_TCA,NOT_DERIVED,REQUESTS_TO_L2:ALL
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_CACHE_MISS:INSTRUCTIONS:DATA
PRESET,PAPI_L2_TCH,DERIVED_SUB,REQUESTS_TO_L2:INSTRUCTIONS:DATA,L2_CACHE_MISS:ALL
#
# no L3_ preset definitions for multi-cores with shared L3 cache,
# as long as L3 events are automatically shadowed from core- to chip-space
# PRESET,PAPI_L3_TCR,NOT_DERIVED,READ_REQUEST_TO_L3_CACHE:ALL
# PRESET,PAPI_L3_TCM,NOT_DERIVED,L3_CACHE_MISSES:ALL
# PRESET,PAPI_L3_TCH,DERIVED_SUB,READ_REQUEST_TO_L3_CACHE:ALL,L3_CACHE_MISSES:ALL
#
PRESET,PAPI_TLB_DM,NOT_DERIVED,L1_DTLB_AND_L2_DTLB_MISS:ALL
PRESET,PAPI_TLB_IM,NOT_DERIVED,L1_ITLB_MISS_AND_L2_ITLB_MISS:ALL
PRESET,PAPI_TLB_TL,DERIVED_ADD,L1_DTLB_AND_L2_DTLB_MISS:ALL,L1_ITLB_MISS_AND_L2_ITLB_MISS:ALL
#
PRESET,PAPI_BR_INS,NOT_DERIVED,RETIRED_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_TKN,NOT_DERIVED,RETIRED_TAKEN_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_MSP,NOT_DERIVED,RETIRED_MISPREDICTED_BRANCH_INSTRUCTIONS
#
PRESET,PAPI_STL_ICY,NOT_DERIVED,DECODER_EMPTY
PRESET,PAPI_RES_STL,NOT_DERIVED,DISPATCH_STALLS
PRESET,PAPI_HW_INT,NOT_DERIVED,INTERRUPTS_TAKEN
#
PRESET,PAPI_FPU_IDL,NOT_DERIVED,CYCLES_NO_FPU_OPS_RETIRED
PRESET,PAPI_FML_INS,NOT_DERIVED,DISPATCHED_FPU:OPS_MULTIPLY
PRESET,PAPI_FAD_INS,NOT_DERIVED,DISPATCHED_FPU:OPS_ADD
PRESET,PAPI_VEC_INS,NOT_DERIVED,RETIRED_MMX_AND_FP_INSTRUCTIONS:SSE_AND_SSE2
#
#    An analysis by Bill Homer of Cray indicates accurate counts over a range of conditions
#    John McCalpin reports that OP_TYPE expands packed operation counts appropriately.
#    Therefore, it is included in FP_OPS, but not in FP_INS.
PRESET,PAPI_FP_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_ADD_SUB_OPS:SINGLE_MUL_OPS:DOUBLE_ADD_SUB_OPS:DOUBLE_MUL_OPS
PRESET,PAPI_FP_OPS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_ADD_SUB_OPS:SINGLE_MUL_OPS:DOUBLE_ADD_SUB_OPS:DOUBLE_MUL_OPS:OP_TYPE
PRESET,PAPI_SP_OPS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_ADD_SUB_OPS:SINGLE_MUL_OPS:SINGLE_DIV_OPS
PRESET,PAPI_DP_OPS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:DOUBLE_ADD_SUB_OPS:DOUBLE_MUL_OPS:DOUBLE_DIV_OPS
#
PRESET,PAPI_FML_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_MUL_OPS:DOUBLE_MUL_OPS:OP_TYPE
PRESET,PAPI_FAD_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_ADD_SUB_OPS:DOUBLE_ADD_SUB_OPS:OP_TYPE,NOTE,"Also includes subtract instructions"
PRESET,PAPI_FDV_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_DIV_OPS:DOUBLE_DIV_OPS:OP_TYPE,NOTE,"Counts both divide and square root instructions"
PRESET,PAPI_FSQ_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_DIV_OPS:DOUBLE_DIV_OPS:OP_TYPE,NOTE,"Counts both divide and square root instructions"


#########################
# AMD Fam14h Bobcat     #
#########################

#
CPU,amd64_fam14h_bobcat
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,RETIRED_INSTRUCTIONS
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CLK_UNHALTED
PRESET,PAPI_L1_ICH,DERIVED_SUB,INSTRUCTION_CACHE_FETCHES,INSTRUCTION_CACHE_REFILLS_FROM_SYSTEM,INSTRUCTION_CACHE_REFILLS_FROM_L2
PRESET,PAPI_L1_ICM,NOT_DERIVED,INSTRUCTION_CACHE_MISSES
PRESET,PAPI_L1_ICA,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_ICR,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_DCM,NOT_DERIVED,DATA_CACHE_MISSES
PRESET,PAPI_L1_DCA,NOT_DERIVED,DATA_CACHE_ACCESSES
PRESET,PAPI_L1_DCH,DERIVED_SUB,DATA_CACHE_ACCESSES,DATA_CACHE_MISSES
PRESET,PAPI_L1_TCA,DERIVED_ADD,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_TCM,DERIVED_ADD,INSTRUCTION_CACHE_MISSES,DATA_CACHE_MISSES
PRESET,PAPI_L1_TCH,DERIVED_POSTFIX,N0|N1|+|N2|-|N3|-|,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES,DATA_CACHE_MISSES,INSTRUCTION_CACHE_MISSES
PRESET,PAPI_L2_ICA,NOT_DERIVED,REQUESTS_TO_L2:INSTRUCTIONS
PRESET,PAPI_L2_ICM,NOT_DERIVED,L2_CACHE_MISS:INSTRUCTIONS
PRESET,PAPI_L2_ICH,NOT_DERIVED,INSTRUCTION_CACHE_REFILLS_FROM_L2
PRESET,PAPI_L2_DCA,NOT_DERIVED,REQUESTS_TO_L2:DATA
PRESET,PAPI_L2_DCM,NOT_DERIVED,L2_CACHE_MISS:DATA
PRESET,PAPI_L2_DCH,DERIVED_SUB,REQUESTS_TO_L2:DATA,L2_CACHE_MISS:DATA
PRESET,PAPI_L2_TCA,NOT_DERIVED,REQUESTS_TO_L2:ALL
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_CACHE_MISS:INSTRUCTIONS:DATA
PRESET,PAPI_L2_TCH,DERIVED_SUB,REQUESTS_TO_L2:INSTRUCTIONS:DATA,L2_CACHE_MISS:ALL
PRESET,PAPI_TLB_DM,NOT_DERIVED,DTLB_MISS
PRESET,PAPI_TLB_IM,NOT_DERIVED,L1_ITLB_MISS_AND_L2_ITLB_MISS
PRESET,PAPI_TLB_TL,DERIVED_ADD,DTLB_MISS,L1_ITLB_MISS_AND_L2_ITLB_MISS
PRESET,PAPI_BR_INS,NOT_DERIVED,RETIRED_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_TKN,NOT_DERIVED,RETIRED_TAKEN_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_MSP,NOT_DERIVED,RETIRED_MISPREDICTED_BRANCH_INSTRUCTIONS
PRESET,PAPI_HW_INT,NOT_DERIVED,INTERRUPTS_TAKEN
PRESET,PAPI_FPU_IDL,NOT_DERIVED,CYCLES_NO_FPU_OPS_RETIRED
PRESET,PAPI_FP_INS,NOT_DERIVED,RETIRED_FLOATING_POINT_INSTRUCTIONS:ALL
PRESET,PAPI_FP_OPS,NOT_DERIVED,DISPATCHED_FPU:ANY
PRESET,PAPI_VEC_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:ALL
PRESET,PAPI_VEC_SP,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_ADD_SUB_OPS:SINGLE_MUL_OPS:SINGLE_DIV_OPS
PRESET,PAPI_VEC_DP,NOT_DERIVED,RETIRED_SSE_OPERATIONS:DOUBLE_ADD_SUB_OPS:DOUBLE_MUL_OPS:DOUBLE_DIV_OPS
PRESET,PAPI_FML_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_MUL_OPS:DOUBLE_MUL_OPS
PRESET,PAPI_FDV_INS,NOT_DERIVED,RETIRED_SSE_OPERATIONS:SINGLE_DIV_OPS:DOUBLE_DIV_OPS
#
CPU,AMD64 (Family 15h RevB)
CPU,amd64_fam15h_interlagos
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,RETIRED_INSTRUCTIONS
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CLK_UNHALTED
PRESET,PAPI_L1_ICH,DERIVED_SUB,INSTRUCTION_CACHE_FETCHES,INSTRUCTION_CACHE_REFILLS_FROM_SYSTEM,INSTRUCTION_CACHE_REFILLS_FROM_L2
PRESET,PAPI_L1_ICM,NOT_DERIVED,INSTRUCTION_CACHE_MISSES
PRESET,PAPI_L1_ICA,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_ICR,NOT_DERIVED,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_DCM,NOT_DERIVED,DATA_CACHE_MISSES:DC_MISS_STREAMING_STORE
PRESET,PAPI_L1_DCA,NOT_DERIVED,DATA_CACHE_ACCESSES
PRESET,PAPI_L1_DCH,DERIVED_SUB,DATA_CACHE_ACCESSES,DATA_CACHE_MISSES:DC_MISS_STREAMING_STORE
PRESET,PAPI_L1_TCA,DERIVED_ADD,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES
PRESET,PAPI_L1_TCM,DERIVED_ADD,INSTRUCTION_CACHE_MISSES,DATA_CACHE_MISSES:DC_MISS_STREAMING_STORE
PRESET,PAPI_L1_TCH,DERIVED_POSTFIX,N0|N1|+|N2|-|N3|-|,DATA_CACHE_ACCESSES,INSTRUCTION_CACHE_FETCHES,DATA_CACHE_MISSES:DC_MISS_STREAMING_STORE,INSTRUCTION_CACHE_MISSES
#
PRESET,PAPI_L2_ICA,NOT_DERIVED,REQUESTS_TO_L2:INSTRUCTIONS
PRESET,PAPI_L2_ICM,NOT_DERIVED,L2_CACHE_MISS:INSTRUCTIONS
PRESET,PAPI_L2_ICH,NOT_DERIVED,INSTRUCTION_CACHE_REFILLS_FROM_L2
PRESET,PAPI_L2_DCA,NOT_DERIVED,REQUESTS_TO_L2:DATA
PRESET,PAPI_L2_DCM,NOT_DERIVED,L2_CACHE_MISS:DATA
PRESET,PAPI_L2_DCH,DERIVED_SUB,REQUESTS_TO_L2:DATA,L2_CACHE_MISS:DATA
PRESET,PAPI_L2_TCA,NOT_DERIVED,REQUESTS_TO_L2:ALL
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_CACHE_MISS:INSTRUCTIONS:DATA
PRESET,PAPI_L2_TCH,DERIVED_SUB,REQUESTS_TO_L2:INSTRUCTIONS:DATA,L2_CACHE_MISS:ALL
#
# not implemented: PRESET,PAPI_L3_TCR,NOT_DERIVED,READ_REQUEST_TO_L3_CACHE:ALL
# not implemented: PRESET,PAPI_L3_TCM,NOT_DERIVED,L3_CACHE_MISSES:ALL
# not implemented: PRESET,PAPI_L3_TCH,DERIVED_SUB,READ_REQUEST_TO_L3_CACHE:ALL,L3_CACHE_MISSES:ALL
#
PRESET,PAPI_TLB_DM,NOT_DERIVED,UNIFIED_TLB_MISS:4K_DATA:2M_DATA:1GB_DATA
PRESET,PAPI_TLB_IM,NOT_DERIVED,UNIFIED_TLB_MISS:4K_INST:2M_INST:1G_INST
PRESET,PAPI_TLB_TL,NOT_DERIVED,UNIFIED_TLB_MISS:ALL
#
PRESET,PAPI_BR_INS,NOT_DERIVED,RETIRED_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_TKN,NOT_DERIVED,RETIRED_TAKEN_BRANCH_INSTRUCTIONS
PRESET,PAPI_BR_MSP,NOT_DERIVED,RETIRED_MISPREDICTED_BRANCH_INSTRUCTIONS
#
PRESET,PAPI_STL_ICY,NOT_DERIVED,DECODER_EMPTY
PRESET,PAPI_RES_STL,NOT_DERIVED,DISPATCH_STALLS
PRESET,PAPI_HW_INT,NOT_DERIVED,INTERRUPTS_TAKEN
#
PRESET,PAPI_FPU_IDL,NOT_DERIVED,CYCLES_FPU_EMPTY
PRESET,PAPI_VEC_INS,NOT_DERIVED,RETIRED_MMX_FP_INSTRUCTIONS:SSE
PRESET,PAPI_FP_INS,NOT_DERIVED,RETIRED_SSE_OPS:ALL
PRESET,PAPI_FP_OPS,NOT_DERIVED,RETIRED_SSE_OPS:ALL
PRESET,PAPI_SP_OPS,NOT_DERIVED,RETIRED_SSE_OPS:SINGLE_ADD_SUB_OPS:SINGLE_MUL_OPS:SINGLE_DIV_OPS:SINGLE_MUL_ADD_OPS
PRESET,PAPI_DP_OPS,NOT_DERIVED,RETIRED_SSE_OPS:DOUBLE_ADD_SUB_OPS:DOUBLE_MUL_OPS:DOUBLE_DIV_OPS:DOUBLE_MUL_ADD_OPS
#
PRESET,PAPI_FML_INS,NOT_DERIVED,RETIRED_SSE_OPS:SINGLE_MUL_OPS:DOUBLE_MUL_OPS:SINGLE_MUL_ADD_OPS:DOUBLE_MUL_ADD_OPS,NOTE,"Also includes multiply-add instructions"
PRESET,PAPI_FAD_INS,NOT_DERIVED,RETIRED_SSE_OPS:SINGLE_ADD_SUB_OPS:DOUBLE_ADD_SUB_OPS:SINGLE_MUL_ADD_OPS:DOUBLE_MUL_ADD_OPS,NOTE,"Also includes subtract and multiply-add instructions"
PRESET,PAPI_FDV_INS,NOT_DERIVED,RETIRED_SSE_OPS:SINGLE_DIV_OPS:DOUBLE_DIV_OPS,NOTE,"Counts both divide and square root instructions"
PRESET,PAPI_FSQ_INS,NOT_DERIVED,RETIRED_SSE_OPS:SINGLE_DIV_OPS:DOUBLE_DIV_OPS,NOTE,"Counts both divide and square root instructions"
#
#
CPU,Intel architectural PMU
CPU,ix86arch
#
PRESET,PAPI_BR_INS,NOT_DERIVED,BRANCH_INSTRUCTIONS_RETIRED
PRESET,PAPI_BR_MSP,NOT_DERIVED,RETIRED_MISPREDICTED_BRANCH_INSTRUCTIONS
#
CPU,Intel Atom
CPU,atom
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTRUCTIONS_RETIRED
PRESET,PAPI_TOT_CYC,NOT_DERIVED,UNHALTED_CORE_CYCLES
PRESET,PAPI_REF_CYC,NOT_DERIVED,UNHALTED_REFERENCE_CYCLES
PRESET,PAPI_L1_ICM,NOT_DERIVED,ICACHE:MISSES
PRESET,PAPI_L1_DCM,DERIVED_SUB,L2_RQSTS:SELF:MESI,ICACHE:MISSES
PRESET,PAPI_L1_ICA,NOT_DERIVED,ICACHE:ACCESSES
PRESET,PAPI_L1_ICH,DERIVED_SUB,ICACHE:ACCESSES,ICACHE:MISSES
#PRESET,PAPI_L1_DCA,NOT_DERIVED,L1D_CACHE:LD:ST
PRESET,PAPI_L1_DCA,DERIVED_ADD,L1D_CACHE:LD,L1D_CACHE:ST
PRESET,PAPI_L1_TCM,NOT_DERIVED,L2_RQSTS:SELF:MESI
PRESET,PAPI_L1_LDM,NOT_DERIVED,L2_LD:SELF:ANY:MESI
PRESET,PAPI_L1_STM,NOT_DERIVED,L2_ST:SELF:MESI
PRESET,PAPI_L2_DCM,DERIVED_SUB,L2_LINES_IN:SELF:ANY,BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L2_ICM,NOT_DERIVED,BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_LINES_IN:SELF:ANY
PRESET,PAPI_L2_LDM,DERIVED_SUB,L2_LINES_IN:SELF:ANY,L2_M_LINES_IN:SELF
PRESET,PAPI_L2_STM,NOT_DERIVED,L2_M_LINES_IN:SELF
PRESET,PAPI_L2_DCA,DERIVED_ADD,L2_LD:SELF:ANY:MESI,L2_ST:SELF:MESI
PRESET,PAPI_L2_DCR,NOT_DERIVED,L2_LD:SELF:ANY:MESI
PRESET,PAPI_L2_DCW,NOT_DERIVED,L2_ST:SELF:MESI
PRESET,PAPI_L2_ICH,DERIVED_SUB,L2_IFETCH:SELF:MESI,BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L2_ICA,NOT_DERIVED,L2_IFETCH:SELF:MESI
PRESET,PAPI_L2_TCH,DERIVED_SUB,L2_RQSTS:SELF:ANY:MESI,L2_LINES_IN:SELF:ANY
PRESET,PAPI_L2_TCA,NOT_DERIVED,L2_RQSTS:SELF:ANY:MESI
PRESET,PAPI_L2_TCR,DERIVED_ADD,L2_LD:SELF:ANY:MESI,L2_IFETCH:SELF:MESI
PRESET,PAPI_L2_TCW,NOT_DERIVED,L2_ST:SELF:MESI
#
PRESET,PAPI_CA_SNP,NOT_DERIVED,EXT_SNOOP:SELF:MESI
PRESET,PAPI_CA_SHR,NOT_DERIVED,L2_RQSTS:SELF:ANY:S_STATE
PRESET,PAPI_CA_CLN,NOT_DERIVED,BUS_TRANS_RFO:SELF
PRESET,PAPI_CA_ITV,NOT_DERIVED,BUS_TRANS_INVAL:SELF
#
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB:MISSES
PRESET,PAPI_TLB_DM,NOT_DERIVED,DATA_TLB_MISSES:DTLB_MISS
#
PRESET,PAPI_BR_TKN,NOT_DERIVED,BR_INST_RETIRED:TAKEN
PRESET,PAPI_BR_NTK,NOT_DERIVED,BR_INST_RETIRED:PRED_NOT_TAKEN:MISPRED_NOT_TAKEN
PRESET,PAPI_BR_INS,NOT_DERIVED,BRANCH_INSTRUCTIONS_RETIRED
PRESET,PAPI_BR_MSP,NOT_DERIVED,MISPREDICTED_BRANCH_RETIRED
#
PRESET,PAPI_TOT_IIS,NOT_DERIVED,MACRO_INSTS:ALL_DECODED
PRESET,PAPI_HW_INT,NOT_DERIVED,HW_INT_RCV
#PRESET,PAPI_RES_STL,NOT_DERIVED,RESOURCE_STALLS:ANY
#
#PRESET,PAPI_FP_INS,NOT_DERIVED,X87_COMP_OPS_EXE:ANY_AR
PRESET,PAPI_FP_INS,NOT_DERIVED,SIMD_INST_RETIRED:ANY
#PRESET,PAPI_FP_OPS,NOT_DERIVED,X87_COMP_OPS_EXE:ANY_AR
#PRESET,PAPI_FP_OPS,NOT_DERIVED,SIMD_UOPS_EXEC:AR
PRESET,PAPI_FP_OPS,DERIVED_ADD,SIMD_INST_RETIRED:ANY,X87_COMP_OPS_EXE:ANY_AR
PRESET,PAPI_FML_INS,NOT_DERIVED,MUL:AR
PRESET,PAPI_FDV_INS,NOT_DERIVED,DIV:AR
PRESET,PAPI_VEC_INS,NOT_DERIVED,SIMD_INST_RETIRED:VECTOR
#
CPU,Intel Nehalem
CPU,Intel Westmere
CPU,nhm
CPU,nhm_ex
CPU,wsm
CPU,wsm_dp
#
PRESET,PAPI_TOT_CYC,NOT_DERIVED,UNHALTED_CORE_CYCLES
PRESET,PAPI_REF_CYC,NOT_DERIVED,UNHALTED_REFERENCE_CYCLES
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTRUCTION_RETIRED
PRESET,PAPI_L1_ICM,NOT_DERIVED,L1I:MISSES
PRESET,PAPI_L1_ICA,NOT_DERIVED,L1I:READS
PRESET,PAPI_L1_ICH,NOT_DERIVED,L1I:HITS
PRESET,PAPI_L1_DCM,NOT_DERIVED,L1D:REPL
#PRESET,PAPI_L1_TCM,NOT_DERIVED,L2_RQSTS:SELF:MESI
#PRESET,PAPI_L1_LDM,NOT_DERIVED,L2_LD:SELF:ANY:MESI
#PRESET,PAPI_L1_STM,NOT_DERIVED,L2_ST:SELF:MESI
# OLD VALUE PRESET,PAPI_L2_DCM,DERIVED_SUB,L2_RQSTS:MISS,L2_RQSTS:IFETCH_MISS
PRESET,PAPI_L2_DCM,DERIVED_ADD,L2_RQSTS:LD_MISS,L2_RQSTS:RFO_MISS
PRESET,PAPI_L2_ICM,NOT_DERIVED,L2_RQSTS:IFETCH_MISS
# OLD VALUE PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_RQSTS:MISS
PRESET,PAPI_L2_TCM,NOT_DERIVED,LAST_LEVEL_CACHE_REFERENCES
PRESET,PAPI_L2_LDM,NOT_DERIVED,L2_RQSTS:LD_MISS
#PRESET,PAPI_L2_STM,NOT_DERIVED,L2_M_LINES_IN:SELF
# OLD VALUE PRESET,PAPI_L2_DCA,NOT_DERIVED,L2_DATA_RQSTS:ANY
PRESET,PAPI_L2_DCA,NOT_DERIVED,L1D:REPL
# OLD VALUE PRESET,PAPI_L2_DCR,DERIVED_SUB,L2_RQSTS:LOADS,L2_RQSTS:IFETCHES
PRESET,PAPI_L2_DCR,NOT_DERIVED,L2_RQSTS:LOADS
#PRESET,PAPI_L2_DCW,NOT_DERIVED,L2_ST:SELF:MESI
PRESET,PAPI_L2_ICH,NOT_DERIVED,L2_RQSTS:IFETCH_HIT
PRESET,PAPI_L2_ICA,NOT_DERIVED,L2_RQSTS:IFETCHES
PRESET,PAPI_L2_TCH,DERIVED_SUB,L2_RQSTS:REFERENCES, L2_RQSTS:MISS
PRESET,PAPI_L2_TCA,NOT_DERIVED,L2_RQSTS:REFERENCES
# OLD VALUE PRESET,PAPI_L2_TCR,NOT_DERIVED,L2_RQSTS:LOADS
PRESET,PAPI_L2_TCR,DERIVED_ADD,L2_RQSTS:LOADS,L2_RQSTS:IFETCHES
#PRESET,PAPI_L2_TCW,NOT_DERIVED,L2_ST:SELF:MESI
#
PRESET,PAPI_L1_ICR,NOT_DERIVED,L1I:READS
PRESET,PAPI_L1_LDM,NOT_DERIVED,L2_RQSTS:LOADS
PRESET,PAPI_L1_STM,NOT_DERIVED,L2_WRITE:RFO_MESI
PRESET,PAPI_L1_TCM,DERIVED_SUB,L2_RQSTS:REFERENCES,L2_RQSTS:PREFETCHES
PRESET,PAPI_L2_DCH,DERIVED_ADD,L2_RQSTS:LD_HIT,L2_RQSTS:RFO_HIT
PRESET,PAPI_L2_DCW,NOT_DERIVED,L2_WRITE:RFO_MESI
PRESET,PAPI_L2_ICR,NOT_DERIVED,L2_RQSTS:IFETCHES
PRESET,PAPI_L2_STM,NOT_DERIVED,L2_RQSTS:RFO_MISS
PRESET,PAPI_L2_TCW,NOT_DERIVED,L2_RQSTS:RFOS
PRESET,PAPI_L3_DCA,DERIVED_ADD,L2_RQSTS:LD_MISS,L2_RQSTS:RFO_MISS
PRESET,PAPI_L3_DCR,NOT_DERIVED,L2_RQSTS:LD_MISS
PRESET,PAPI_L3_DCW,NOT_DERIVED,L2_RQSTS:RFO_MISS
PRESET,PAPI_L3_ICA,NOT_DERIVED,L2_RQSTS:IFETCH_MISS
PRESET,PAPI_L3_ICR,NOT_DERIVED,L2_RQSTS:IFETCH_MISS
PRESET,PAPI_L3_LDM,NOT_DERIVED,MEM_LOAD_RETIRED:L3_MISS
PRESET,PAPI_L3_TCA,NOT_DERIVED,LAST_LEVEL_CACHE_REFERENCES
PRESET,PAPI_L3_TCM,NOT_DERIVED,LAST_LEVEL_CACHE_MISSES
PRESET,PAPI_L3_TCR,DERIVED_ADD,L2_RQSTS:LD_MISS,L2_RQSTS:IFETCH_MISS
PRESET,PAPI_L3_TCW,NOT_DERIVED,L2_RQSTS:RFO_MISS
PRESET,PAPI_LST_INS,DERIVED_ADD,MEM_INST_RETIRED:LOADS,MEM_INST_RETIRED:STORES
#
PRESET,PAPI_LD_INS,NOT_DERIVED,MEM_INST_RETIRED:LOADS
PRESET,PAPI_SR_INS,NOT_DERIVED,MEM_INST_RETIRED:STORES
#
#PRESET,PAPI_CA_SHR,NOT_DERIVED,L2_RQSTS:SELF:ANY:S_STATE
#PRESET,PAPI_CA_CLN,NOT_DERIVED,BUS_TRANS_RFO:SELF
#PRESET,PAPI_CA_ITV,NOT_DERIVED,BUS_TRANS_INVAL:SELF
#
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB_MISSES:ANY
PRESET,PAPI_TLB_DM,NOT_DERIVED,DTLB_MISSES:ANY
PRESET,PAPI_TLB_TL,DERIVED_ADD,ITLB_MISSES:ANY, DTLB_MISSES:ANY
#
PRESET,PAPI_BR_TKN,NOT_DERIVED,BR_INST_EXEC:TAKEN
PRESET,PAPI_BR_NTK,DERIVED_SUB,BR_INST_EXEC:ANY, BR_INST_EXEC:TAKEN
PRESET,PAPI_BR_INS,NOT_DERIVED,BR_INST_EXEC:ANY
PRESET,PAPI_BR_MSP,NOT_DERIVED,BR_MISP_EXEC:ANY
PRESET,PAPI_BR_CN,NOT_DERIVED,BR_INST_EXEC:COND
PRESET,PAPI_BR_UCN,NOT_DERIVED,BR_INST_EXEC:DIRECT
PRESET,PAPI_BR_PRC,DERIVED_SUB,BR_INST_EXEC:COND, BR_MISP_EXEC:COND
#
PRESET,PAPI_TOT_IIS,NOT_DERIVED,MACRO_INSTS:DECODED
PRESET,PAPI_RES_STL,NOT_DERIVED,RESOURCE_STALLS:ANY
#
PRESET,PAPI_FP_INS,NOT_DERIVED,FP_COMP_OPS_EXE:SSE_FP
# PRESET,PAPI_FP_OPS,NOT_DERIVED,FP_COMP_OPS_EXE:SSE_FP
# PAPI_FP_OPS counts single and double precision SCALAR operations
# PRESET,PAPI_FP_OPS,NOT_DERIVED,FP_COMP_OPS_EXE:SSE_SINGLE_PRECISION:SSE_DOUBLE_PRECISION
# According to Stephane (Jan 2010), it's not allowed to combine unit masks for FP_COMP_OPS_EXE;
# we have to use two counters instead
#PRESET,PAPI_FP_OPS,DERIVED_ADD,FP_COMP_OPS_EXE:SSE_SINGLE_PRECISION,FP_COMP_OPS_EXE:SSE_DOUBLE_PRECISION
PRESET,PAPI_FP_OPS,DERIVED_ADD,FP_COMP_OPS_EXE:SSE_FP,FP_COMP_OPS_EXE:X87
# PAPI_SP_OPS = single precision scalar ops + 3 * packed ops
PRESET,PAPI_SP_OPS,DERIVED_POSTFIX,N0|N1|3|*|+|,FP_COMP_OPS_EXE:SSE_SINGLE_PRECISION,FP_COMP_OPS_EXE:SSE_FP_PACKED
PRESET,PAPI_DP_OPS,DERIVED_ADD,FP_COMP_OPS_EXE:SSE_DOUBLE_PRECISION,FP_COMP_OPS_EXE:SSE_FP_PACKED
PRESET,PAPI_VEC_SP,NOT_DERIVED,FP_COMP_OPS_EXE:SSE_FP_PACKED
PRESET,PAPI_VEC_DP,NOT_DERIVED,FP_COMP_OPS_EXE:SSE_FP_PACKED
#PRESET,PAPI_FML_INS,NOT_DERIVED,MUL
#PRESET,PAPI_FDV_INS,NOT_DERIVED,DIV
#PRESET,PAPI_VEC_INS,NOT_DERIVED,SIMD_INST_RETIRED:VECTOR
#
# Not available on Westmere
#
CPU,Intel Nehalem
CPU,nhm
CPU,nhm_ex
#PRESET,PAPI_HW_INT,NOT_DERIVED,HW_INT:RCV
PRESET,PAPI_L1_DCA,NOT_DERIVED,L1D_ALL_REF:ANY
PRESET,PAPI_L1_DCH,DERIVED_SUB,L1D_ALL_REF:ANY,L1D:REPL
PRESET,PAPI_L1_TCA,DERIVED_ADD,L1D_ALL_REF:ANY,L1I:READS
#
PRESET,PAPI_L1_DCR,NOT_DERIVED,L1D_CACHE_LD:MESI
PRESET,PAPI_L1_DCW,NOT_DERIVED,L1D_CACHE_ST:MESI
PRESET,PAPI_L1_TCR,DERIVED_ADD,L1D_CACHE_LD:MESI,L1I:READS
PRESET,PAPI_L2_TCW,NOT_DERIVED,L1D_CACHE_ST:MESI
#
# Intel SandyBridge and IvyBridge
CPU,snb
CPU,snb_ep
CPU,ivb
CPU,ivb_ep
#
PRESET,PAPI_TOT_CYC,NOT_DERIVED,UNHALTED_CORE_CYCLES
PRESET,PAPI_REF_CYC,NOT_DERIVED,UNHALTED_REFERENCE_CYCLES
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTRUCTION_RETIRED
#
PRESET,PAPI_L1_DCM,NOT_DERIVED,L1D:REPLACEMENT
PRESET,PAPI_L1_LDM,NOT_DERIVED,L2_RQSTS:ALL_DEMAND_DATA_RD
PRESET,PAPI_L1_STM,NOT_DERIVED,L2_STORE_LOCK_RQSTS:ALL
PRESET,PAPI_L1_ICM,NOT_DERIVED,ICACHE:MISSES
PRESET,PAPI_L1_TCM,DERIVED_ADD,ICACHE:MISSES,L1D:REPLACEMENT
#
PRESET,PAPI_L2_DCM,DERIVED_SUB,LAST_LEVEL_CACHE_REFERENCES,L2_RQSTS:CODE_RD_MISS
PRESET,PAPI_L2_STM,NOT_DERIVED,L2_RQSTS:RFO_MISS
PRESET,PAPI_L2_DCA,NOT_DERIVED,L1D:REPLACEMENT
PRESET,PAPI_L2_DCR,NOT_DERIVED,L2_RQSTS:ALL_DEMAND_DATA_RD
PRESET,PAPI_L2_DCW,NOT_DERIVED,L2_STORE_LOCK_RQSTS:ALL
PRESET,PAPI_L2_ICM,NOT_DERIVED,L2_RQSTS:CODE_RD_MISS
PRESET,PAPI_L2_ICH,NOT_DERIVED,L2_RQSTS:CODE_RD_HIT
PRESET,PAPI_L2_ICA,NOT_DERIVED,L2_RQSTS:ALL_CODE_RD
PRESET,PAPI_L2_ICR,NOT_DERIVED,L2_RQSTS:ALL_CODE_RD
PRESET,PAPI_L2_TCM,NOT_DERIVED,LAST_LEVEL_CACHE_REFERENCES
PRESET,PAPI_L2_TCA,DERIVED_ADD,L1D:REPLACEMENT,L2_RQSTS:ALL_CODE_RD
PRESET,PAPI_L2_TCR,DERIVED_ADD,L2_RQSTS:ALL_DEMAND_DATA_RD,L2_RQSTS:ALL_CODE_RD
#
PRESET,PAPI_L3_DCA,DERIVED_SUB,LAST_LEVEL_CACHE_REFERENCES,L2_RQSTS:CODE_RD_MISS
PRESET,PAPI_L3_DCR,NOT_DERIVED,OFFCORE_REQUESTS:DEMAND_DATA_RD
PRESET,PAPI_L3_DCW,NOT_DERIVED,L2_RQSTS:RFO_MISS
PRESET,PAPI_L3_ICA,NOT_DERIVED,L2_RQSTS:CODE_RD_MISS
PRESET,PAPI_L3_ICR,NOT_DERIVED,L2_RQSTS:CODE_RD_MISS
PRESET,PAPI_L3_TCA,NOT_DERIVED,LAST_LEVEL_CACHE_REFERENCES
PRESET,PAPI_L3_TCM,NOT_DERIVED,LAST_LEVEL_CACHE_MISSES
PRESET,PAPI_L3_TCR,DERIVED_SUB,LAST_LEVEL_CACHE_REFERENCES,L2_RQSTS:RFO_MISS
PRESET,PAPI_L3_TCW,NOT_DERIVED,L2_RQSTS:RFO_MISS
#
PRESET,PAPI_BR_TKN,DERIVED_SUB,BR_INST_RETIRED:ALL_BRANCHES,BR_INST_RETIRED:NOT_TAKEN
PRESET,PAPI_BR_NTK,NOT_DERIVED,BR_INST_RETIRED:NOT_TAKEN
PRESET,PAPI_BR_INS,NOT_DERIVED,BR_INST_RETIRED:ALL_BRANCHES
PRESET,PAPI_BR_MSP,NOT_DERIVED,BR_MISP_RETIRED:ALL_BRANCHES
PRESET,PAPI_BR_PRC,DERIVED_SUB,BR_INST_RETIRED:ALL_BRANCHES,BR_MISP_RETIRED:ALL_BRANCHES
#
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB_MISSES:CAUSES_A_WALK
#
PRESET,PAPI_FDV_INS,NOT_DERIVED,ARITH:FPU_DIV
PRESET,PAPI_STL_ICY,NOT_DERIVED,ILD_STALL:IQ_FULL
PRESET,PAPI_LD_INS,NOT_DERIVED,MEM_UOP_RETIRED:ANY_LOADS
PRESET,PAPI_SR_INS,NOT_DERIVED,MEM_UOP_RETIRED:ANY_STORES
#
# Intel SandyBridge only
CPU,snb
CPU,snb_ep
#
PRESET,PAPI_L2_TCW,NOT_DERIVED,L2_RQSTS:RFO_ANY
PRESET,PAPI_L2_DCH,DERIVED_ADD,L2_RQSTS:ALL_DEMAND_RD_HIT,L2_RQSTS:RFO_HITS
PRESET,PAPI_BR_CN,NOT_DERIVED,BR_INST_RETIRED:CONDITIONAL
PRESET,PAPI_BR_UCN,DERIVED_SUB,BR_INST_RETIRED:ALL_BRANCHES,BR_INST_RETIRED:CONDITIONAL
PRESET,PAPI_TLB_DM,DERIVED_ADD,DTLB_LOAD_MISSES:CAUSES_A_WALK,DTLB_STORE_MISSES:CAUSES_A_WALK
#
# Counts scalars only; no SSE or AVX is counted; includes speculative
PRESET,PAPI_FP_INS,DERIVED_ADD,FP_COMP_OPS_EXE:SSE_SCALAR_DOUBLE,FP_COMP_OPS_EXE:SSE_FP_SCALAR_SINGLE
PRESET,PAPI_FP_OPS,DERIVED_ADD,FP_COMP_OPS_EXE:SSE_SCALAR_DOUBLE,FP_COMP_OPS_EXE:SSE_FP_SCALAR_SINGLE
#
PRESET,PAPI_SP_OPS,DERIVED_POSTFIX,N0|N1|4|*|N2|8|*|+|+|,FP_COMP_OPS_EXE:SSE_FP_SCALAR_SINGLE,FP_COMP_OPS_EXE:SSE_PACKED_SINGLE,SIMD_FP_256:PACKED_SINGLE
PRESET,PAPI_DP_OPS,DERIVED_POSTFIX,N0|N1|2|*|N2|4|*|+|+|,FP_COMP_OPS_EXE:SSE_SCALAR_DOUBLE,FP_COMP_OPS_EXE:SSE_FP_PACKED_DOUBLE,SIMD_FP_256:PACKED_DOUBLE
PRESET,PAPI_VEC_SP,DERIVED_POSTFIX,N0|4|*|N1|8|*|+|,FP_COMP_OPS_EXE:SSE_PACKED_SINGLE,SIMD_FP_256:PACKED_SINGLE
PRESET,PAPI_VEC_DP,DERIVED_POSTFIX,N0|2|*|N1|4|*|+|,FP_COMP_OPS_EXE:SSE_FP_PACKED_DOUBLE,SIMD_FP_256:PACKED_DOUBLE
#
# Intel IvyBridge only
CPU,ivb
CPU,ivb_ep
#
PRESET,PAPI_L2_TCW,NOT_DERIVED,L2_RQSTS:ALL_RFO
PRESET,PAPI_L2_DCH,DERIVED_ADD,L2_RQSTS:DEMAND_DATA_RD_HIT,L2_RQSTS:RFO_HIT
PRESET,PAPI_BR_CN,NOT_DERIVED,BR_INST_RETIRED:COND
PRESET,PAPI_BR_UCN,DERIVED_SUB,BR_INST_RETIRED:ALL_BRANCHES,BR_INST_RETIRED:COND
PRESET,PAPI_TLB_DM,DERIVED_ADD,DTLB_LOAD_MISSES:DEMAND_LD_MISS_CAUSES_A_WALK,DTLB_STORE_MISSES:CAUSES_A_WALK
#PRESET,PAPI_HW_INT,NOT_DERIVED,HW_INTERRUPTS
#
CPU,Intel Core2
CPU,Intel Core
CPU,core
#
PRESET,PAPI_TOT_CYC,NOT_DERIVED,UNHALTED_CORE_CYCLES
PRESET,PAPI_REF_CYC,NOT_DERIVED,UNHALTED_REFERENCE_CYCLES/****************************/
/* THIS IS OPEN SOURCE CODE */
/****************************/

/** 
* @file		papi_hl.c
* @author	Philip Mucci
*			mucci@cs.utk.edu
* @author	Kevin London
*           london@cs.utk.edu
* @author	dan terpstra
*			terpstra@cs.utk.edu
* @brief This file contains the 'high level' interface to PAPI. 
*  BASIC is a high level language. ;-) */

#include "papi.h"
#include "papi_internal.h"
#include "papi_memory.h"
#include <string.h>

/* high level papi functions*/

/*
 * Which high-level interface are we using?
 */
#define HL_START_COUNTERS	1
#define HL_FLIPS			2
#define HL_IPC				3
#define HL_EPC2				4
#define HL_EPC3				5
#define HL_FLOPS			6

/* Definitions for reading */
#define PAPI_HL_READ		1
#define PAPI_HL_ACCUM		2

/** \internal 
 * This is stored per thread
 */
typedef struct _HighLevelInfo
{
	int EventSet;				   /**< EventSet of the thread */
	short int num_evts;
	short int running;
	long long initial_time;			   /**< Start time */
	float initial_proc_time;		   /**< Start processor time */
	float total_ins;			   /**< Total instructions */
} HighLevelInfo;

int _hl_rate_calls( float *real_time, float *proc_time, long long *ins,
					float *rate, unsigned int EVENT, HighLevelInfo * state );
void _internal_cleanup_hl_info( HighLevelInfo * state );
int _internal_check_state( HighLevelInfo ** state );
int _internal_start_hl_counters( HighLevelInfo * state );
int _internal_hl_read_cnts( long long *values, int array_len, int flag );

/* CHANGE LOG:
  - ksl 10/17/03
   Pretty much a complete rewrite of the high level interface.  Now
   the interface is thread safe and you don't have to worry as much
   about mixing the various high level calls.

  - dkt 11/19/01:
   After much discussion with users and developers, removed FMA and SLOPE
   fudge factors. SLOPE was not being used, and we decided the place to
   apply FMA was at a higher level where there could be a better understanding
   of platform discrepancies and code implications.
   ALL PAPI CALLS NOW RETURN EXACTLY WHAT THE HARDWARE REPORTS
  - dkt 08/14/01:
   Added reinitialization of values and proc_time to new reinit code.
   Added SLOPE and FMA constants to correct for systemic errors on a
   platform-by-platform basis.
   SLOPE is a factor subtracted from flpins on each call to compensate
   for platform overhead in the call.
   FMA is a shifter that doubles floating point counts on platforms that
   count FMA as one op instead of two.
   NOTE: We are making the FLAWED assumption that ALL flpins are FMA!
   This will result in counts that are TOO HIGH on the affected platforms
   in instances where the code is NOT mostly FMA.
  - dkt 08/01/01:
   NOTE: Calling semantics have changed!
   Now, if flpins < 0 (an invalid value) a PAPI_reset is issued to reset the
   counter values. The internal start time is also reset. This should be a 
   benign change, exept in the rare case where a user passes an uninitialized
   (and possibly negative) value for flpins to the routine *AFTER* it has been
   called the first time. This is unlikely, since the first call clears and
   returns th is value.
  - dkt 08/01/01:
   Internal sequencing changes:
   -- initial PAPI_get_real_usec() call moved above PAPI_start to avoid unwanted flops.
   -- PAPI_accum() replaced with PAPI_start() / PAPI_stop pair for same reason.
*/

/** @internal 
 * This function is called to determine the state of the system.
 * We may as well set the HighLevelInfo so you don't have to look it
 * up again.
 */
int
_internal_check_state( HighLevelInfo ** outgoing )
{
	int retval;
	HighLevelInfo *state = NULL;

	/* Only allow one thread at a time in here */
	if ( init_level == PAPI_NOT_INITED ) {
		retval = PAPI_library_init( PAPI_VER_CURRENT );
		if ( retval != PAPI_VER_CURRENT ) {
			return ( retval );
		} else {
			_papi_hwi_lock( HIGHLEVEL_LOCK );
			init_level = PAPI_HIGH_LEVEL_INITED;
			_papi_hwi_unlock( HIGHLEVEL_LOCK );
		}
	}

	/*
	 * Do we have the thread specific data setup yet?
	 */
	if ( ( retval =
		   PAPI_get_thr_specific( PAPI_HIGH_LEVEL_TLS, ( void * ) &state ) )
		 != PAPI_OK || state == NULL ) {
		state = ( HighLevelInfo * ) papi_malloc( sizeof ( HighLevelInfo ) );
		if ( state == NULL )
			return ( PAPI_ENOMEM );

		memset( state, 0, sizeof ( HighLevelInfo ) );
		state->EventSet = -1;

		if ( ( retval = PAPI_create_eventset( &state->EventSet ) ) != PAPI_OK )
			return ( retval );

		if ( ( retval =
			   PAPI_set_thr_specific( PAPI_HIGH_LEVEL_TLS,
									  state ) ) != PAPI_OK )
			return ( retval );
	}
	*outgoing = state;
	return ( PAPI_OK );
}

/** @internal 
 * Make sure to allocate space for values 
 */
int
_internal_start_hl_counters( HighLevelInfo * state )
{
	return ( PAPI_start( state->EventSet ) );
}

void
_internal_cleanup_hl_info( HighLevelInfo * state )
{
	state->num_evts = 0;
	state->running = 0;
	state->initial_time = -1;
   	state->initial_proc_time = -1;
	state->total_ins = 0;
	return;
}

/** @class PAPI_flips
  *	@brief Simplified call to get Mflips/s (floating point instruction rate), real and processor time. 
  *
  *	@par C Interface: 
  *	\#include <papi.h> @n
  *	int PAPI_flips( float *rtime, float *ptime, long long *flpins, float *mflips );
  *
  *     @param *rtime
  *		total realtime since the first PAPI_flips() call
  *	@param *ptime
  *		total process time since the first PAPI_flips() call
  *	@param *flpins
  *		total floating point instructions since the first call
  *  
  *	@retval PAPI_EINVAL 
  *		The counters were already started by something other than: PAPI_flips() or PAPI_flops().
  *	@retval PAPI_ENOEVNT 
  *		The floating point operations, floating point instructions or total cycles 
  *		event does not exist.
  *	@retval PAPI_ENOMEM 
  *		Insufficient memory to complete the operation. 
  *
  * The first call to PAPI_flips() will initialize the PAPI High Level interface, 
  * set up the counters to monitor PAPI_FP_INS and PAPI_TOT_CYC events 
  * and start the counters. 
  * Subsequent calls will read the counters and return total real time, 
  * total process time, total floating point instructions since the start of the 
  * measurement and the Mflip/s rate since latest call to PAPI_flips(). 
  * A call to PAPI_stop_counters()  will stop the counters from running and then 
  * calls such as PAPI_start_counters()  can safely be used. 
  *
  * @internal
  * The next three calls all use _hl_rate_calls() to return an instruction rate value.
  * PAPI_flips returns information related to floating point instructions using 
  * the PAPI_FP_INS event. This is intended to measure instruction rate through the 
  * floating point pipe with no massaging.
  * PAPI_flops return information related to theoretical floating point operations
  * rather than simple instructions. It uses the PAPI_FP_OPS event which attempts to 
  * 'correctly' account for, e.g., FMA undercounts and FP Store overcounts, etc.
  *
  * @see PAPI_stop_counters() PAPI_ipc() PAPI_set_opt()
 */
int
PAPI_flips( float *rtime, float *ptime, long long *flpins, float *mflips )
{
	if ( rtime == NULL || ptime == NULL || flpins == NULL || mflips == NULL )
		return PAPI_EINVAL;

	HighLevelInfo *state = NULL;
	int retval;

	if ( ( retval = _internal_check_state( &state ) ) != PAPI_OK ) {
		return ( retval );
        }

	if ( ( retval =
		   _hl_rate_calls( rtime, ptime, flpins, mflips,
		       ( unsigned int ) PAPI_FP_INS, state ) ) != PAPI_OK )
		return ( retval );

	return ( PAPI_OK );
}

/** @class PAPI_flops
  *	@brief Simplified call to get Mflops/s (floating point instruction rate), real and processor time. 
  *
  *	@par C Interface: 
  *	\#include <papi.h> @n
  *	int PAPI_flops( float *rtime, float *ptime, long long *flpops, float *mflops );
  *
  *     @param *rtime
  *		total realtime since the first PAPI_flops() call
  *	@param *ptime
  *		total process time since the first PAPI_flops() call
  *	@param *flpins
  *		total floating point instructions since the first call
  *     @param *rtime
  *		total realtime since the first PAPI_flops() call
  *	@param *ptime
  *		total process time since the first PAPI_flops() call
  *	@param *flpops
  *		total floating point instructions since the first call
  * 
  *	@retval PAPI_EINVAL 
  *		The counters were already started by something other than: PAPI_flips() or PAPI_flops().
  *	@retval PAPI_ENOEVNT 
  *		The floating point operations, floating point instructions or total cycles 
  *		event does not exist.
  *	@retval PAPI_ENOMEM 
  *		Insufficient memory to complete the operation. 
  *
  * The first call to PAPI_flops() will initialize the PAPI High Level interface, 
  * set up the counters to monitor PAPI_FP_OPS and PAPI_TOT_CYC events 
  * and start the counters. 
  * Subsequent calls will read the counters and return total real time, 
  * total process time, total floating point instructions since the start of the 
  * measurement and the Mflop/s rate since latest call to PAPI_flops(). 
  * A call to PAPI_stop_counters()  will stop the counters from running and then 
  * calls such as PAPI_start_counters()  can safely be used. 
  *
  * @internal
  * The next three calls all use _hl_rate_calls() to return an instruction rate value.
  * PAPI_flops returns information related to floating point instructions using 
  * the PAPI_FP_INS event. This is intended to measure instruction rate through the 
  * floating point pipe with no massaging.
  * PAPI_flops return information related to theoretical floating point operations
  * rather than simple instructions. It uses the PAPI_FP_OPS event which attempts to 
  * 'correctly' account for, e.g., FMA undercounts and FP Store overcounts, etc.
  *
  * @see PAPI_stop_counters() PAPI_ipc() PAPI_set_opt()
 */
int
PAPI_flops( float *rtime, float *ptime, long long *flpops, float *mflops )
{
	if ( rtime == NULL || ptime == NULL || flpops == NULL || mflops == NULL )
		return PAPI_EINVAL;

	HighLevelInfo *state = NULL;
	int retval;

	if ( ( retval = _internal_check_state( &state ) ) != PAPI_OK )
		return ( retval );

	if ( ( retval =
		   _hl_rate_calls( rtime, ptime, flpops, mflops,
			( unsigned int ) PAPI_FP_OPS, state ) ) != PAPI_OK )
		return ( retval );

	return ( PAPI_OK );
}

/** @class PAPI_ipc
 *	@brief Get instructions per cycle, real and processor time.
 *	
 *	@par C Interface:
 *	\#include <papi.h> @n
 *	int PAPI_ipc( float *rtime, float *ptime, long long *ins, float *ipc );
 *
 *	@param *rtime
 *		total realtime since the first PAPI_flops() call
 *	@param *ptime
 *		total process time since the first PAPI_flops() call
 *	@param *ins
 *		total instructions since the first call
 *	@param *ipc
 *		instructions per cycle achieved since the previous call
 *
 *	@retval PAPI_EINVAL 
 *		The counters were already started by something other than: PAPI_ipc()
 *	@retval PAPI_ENOEVNT 
 *		The total instructions or total cycles event does not exist.
 *	@retval PAPI_ENOMEM 
 *		Insufficient memory to complete the operation. 
 *
 * The first call to PAPI_ipc() will initialize the PAPI High Level interface,
 * set up the counters to monitor PAPI_TOT_INS and PAPI_TOT_CYC events 
 * and start the counters. 
 * Subsequent calls will read the counters and return total real time, 
 * total process time, total instructions since the start of the measurement 
 * and the instructions per cycle rate since latest call to PAPI_ipc(). 
 * A call to PAPI_stop_counters()  will stop the counters from running and then 
 * calls such as PAPI_start_counters()  can safely be used. 
 *
 * @see PAPI_flops() PAPI_stop_counters() PAPI_set_opt() PAPI_flips()
 */
int
PAPI_ipc( float *rtime, float *ptime, long long *ins, float *ipc )
{
	if ( rtime == NULL || ptime == NULL || ins == NULL || ipc == NULL )
		return PAPI_EINVAL;

	HighLevelInfo *state = NULL;
	int retval;

	if ( ( retval = _internal_check_state( &state ) ) != PAPI_OK )
		return ( retval );

	return _hl_rate_calls( rtime, ptime, ins, ipc,
			       ( unsigned int ) PAPI_TOT_INS, state );
}

int
_hl_rate_calls( float *real_time, float *proc_time, long long *ins, 
		float *rate, unsigned int EVENT, HighLevelInfo *state )
{
     long long values[2] = { 0, 0 };
     int retval = 0;
     int level = 0;

     (void) rate; /* The code used to sometimes estimate cycles */
                  /* based on instructions / IPC (rate)         */
                  /* that no longer seems necessary             */
     if ( EVENT == ( unsigned int ) PAPI_FP_INS )
	level = HL_FLIPS;
     else if ( EVENT == ( unsigned int ) PAPI_TOT_INS )
	level = HL_IPC;
     else if ( EVENT == ( unsigned int ) PAPI_FP_OPS )
	level = HL_FLOPS;

     if ( state->running != 0 && state->running != level ) {
	return PAPI_EINVAL;
     }

     if ( state->running == 0 ) {
        if ( PAPI_query_event( ( int ) EVENT ) != PAPI_OK ) {
	   return PAPI_ENOEVNT;
        }

	if ((retval=PAPI_add_event(state->EventSet,(int)EVENT))!=PAPI_OK ) {
	   _internal_cleanup_hl_info( state );
	   PAPI_cleanup_eventset( state->EventSet );
	   return retval;
	}

	if ( PAPI_query_event( ( int ) PAPI_TOT_CYC ) != PAPI_OK ) {
	   return PAPI_ENOEVNT;
	}

	if ((retval=PAPI_add_event(state->EventSet,(int)PAPI_TOT_CYC))!=PAPI_OK) {
	   _internal_cleanup_hl_info( state );
	   PAPI_cleanup_eventset( state->EventSet );
	   return retval;
	}

	state->initial_time = PAPI_get_real_usec(  );
	state->initial_proc_time = PAPI_get_virt_usec();
	
	if ( ( retval = PAPI_start( state->EventSet ) ) != PAPI_OK ) {
	   return retval;
	}

	state->running = ( short ) level;

     } else {
        if ( ( retval = PAPI_stop( state->EventSet, values ) ) != PAPI_OK ) {
	   return retval;
        }

	/* Use Multiplication because it is much faster */
	*real_time = (float) ((double) (PAPI_get_real_usec() -
					state->initial_time ) * .000001 );
	*proc_time = (float) ((double) (PAPI_get_virt_usec() -
					state->initial_proc_time) * .000001);
	
	state->total_ins += ( float ) values[0];
	
	*ins = ( long long ) state->total_ins;
	if ( ( retval = PAPI_start( state->EventSet ) ) != PAPI_OK ) {
	   state->running = 0;
	   return retval;
	}
     }

     return PAPI_OK;
}

/** @class PAPI_epc
 *	@brief Get events per cycle, real and processor time, core and ref cycles.
 *	
 *	@par C Interface:
 *	\#include <papi.h> @n
 *	int PAPI_epc( char *name, float *rtime, float *ptime, long long *ref, long long *core, long long *evt, float *epc );
 *
 *	@param *name
 *		name of the event to be measured
 *	@param *rtime
 *		total realtime since the first PAPI_flops() call
 *	@param *ptime
 *		total process time since the first PAPI_flops() call
 *	@param *ref
 *		total reference cycles since the first call (where supported; otherwise 0)
 *	@param *core
 *		total core cycles since the first call
 *	@param *evt
 *		total events since the first call
 *	@param *ipc
 *		events per core cycle achieved since the previous call
 *
 *	@retval PAPI_EINVAL 
 *		The counters were already started by something other than: PAPI_epc()
 *	@retval PAPI_ENOEVNT 
 *		The total events or total cycles event does not exist.
 *	@retval PAPI_ENOMEM 
 *		Insufficient memory to complete the operation. 
 *
 * The first call to PAPI_epc() will initialize the PAPI High Level interface,
 * set up the counters to monitor the named event, PAPI_REF_CYC (where available),
 * and PAPI_TOT_CYC events, and start the counters. 
 * Subsequent calls will read the counters and return total real time, 
 * total process time, total reference and core cycles, and total events 
 * since the start of the measurement and the event per cycle rate 
 * since latest call to PAPI_epc(). 
 * A call to PAPI_stop_counters()  will stop the counters from running and then 
 * calls such as PAPI_start_counters()  can safely be used. 
 *
 * @see PAPI_flops()  PAPI_flips()  PAPI_ipc() PAPI_stop_counters() PAPI_set_opt()
 */
int
PAPI_epc( char *name, float *rtime, float *ptime, long long *ref, long long *core, long long *evt, float *epc )
{
     long long values[3] = { 0, 0, 0 };
     int retval = 0;
     int level = 0;
	HighLevelInfo *state = NULL;

	if ( name == NULL || rtime == NULL || ptime == NULL || core == NULL || evt == NULL || epc == NULL )
		return PAPI_EINVAL;

	if ( ( retval = _internal_check_state( &state ) ) != PAPI_OK )
		return ( retval );

	if ( PAPI_query_event( ( int ) PAPI_REF_CYC ) != PAPI_OK ) {
	   level = HL_EPC2;
	} else level = HL_EPC3;

     if ( state->running != 0 && state->running != level ) {
	return PAPI_EINVAL;
     }

     if ( state->running == 0 ) {
        if ( PAPI_query_named_event( name ) != PAPI_OK ) {
	   return PAPI_ENOEVNT;
        }

	if (( retval = PAPI_add_named_event( state->EventSet, name )) != PAPI_OK ) {
	   _internal_cleanup_hl_info( state );
	   PAPI_cleanup_eventset( state->EventSet );
	   return retval;
	}

	if ( PAPI_query_event( ( int ) PAPI_TOT_CYC ) != PAPI_OK ) {
	   return PAPI_ENOEVNT;
	}

	if ((retval=PAPI_add_event(state->EventSet,(int)PAPI_TOT_CYC))!=PAPI_OK) {
	   _internal_cleanup_hl_info( state );
	   PAPI_cleanup_eventset( state->EventSet );
	   return retval;
	}

	if ( level == HL_EPC3 ) {
	if ((retval=PAPI_add_event(state->EventSet,(int)PAPI_REF_CYC))!=PAPI_OK) {
	   _internal_cleanup_hl_info( state );
	   PAPI_cleanup_eventset( state->EventSet );
	   return retval;
	}
	}

	state->initial_time = PAPI_get_real_usec(  );
	state->initial_proc_time = PAPI_get_virt_usec();
	
	if ( ( retval = PAPI_start( state->EventSet ) ) != PAPI_OK ) {
	   return retval;
	}

	state->running = ( short ) level;

     } else {
        if ( ( retval = PAPI_stop( state->EventSet, values ) ) != PAPI_OK ) {
	   return retval;
        }

	/* Use Multiplication because it is much faster */
	*rtime = (float) ((double) (PAPI_get_real_usec() -
					state->initial_time ) * .000001 );
	*ptime = (float) ((double) (PAPI_get_virt_usec() -
					state->initial_proc_time) * .000001);
	
	state->total_ins += ( float ) values[0];
	
	*evt = ( long long ) state->total_ins;
	*core = values[1];
	*ref = values[2];
	
	if ( ( retval = PAPI_start( state->EventSet ) ) != PAPI_OK ) {
	   state->running = 0;
	   return retval;
	}
     }

     return PAPI_OK;
}

/** @class PAPI_num_counters
  *	@brief Get the number of hardware counters available on the system.
  *
  *	@par C Interface:
  *	\#include <papi.h> @n
  *	int PAPI_num_counters( void );
  *
  * @post 
  *		Initializes the library to PAPI_HIGH_LEVEL_INITED if necessary.
  *
  *	@retval PAPI_EINVAL 
  *		papi.h is different from the version used to compile the PAPI library.
  *	@retval PAPI_ENOMEM 
  *		Insufficient memory to complete the operation.
  *	@retval PAPI_ESYS 
  *		A system or C library call failed inside PAPI, see the errno variable. 
  *
  *	@par Examples:
  * @code
  * int num_hwcntrs;
  * //  The installation does not support PAPI 
  * if ((num_hwcntrs = PAPI_num_counters()) < 0 )
  * 	handle_error(1);
  * //  The installation supports PAPI, but has no counters 
  * if ((num_hwcntrs = PAPI_num_counters()) == 0 )
  * 	fprintf(stderr,"Info:: This machine does not provide hardware counters.\n");
  *	@endcode
  *
  * PAPI_num_counters() returns the optimal length of the values array for the high level functions. 
  * This value corresponds to the number of hardware counters supported by the current CPU component.
  *
  * @note This function only works for the CPU component. To determine the number of counters on
  * another component, use the low level PAPI_num_cmp_hwctrs().
  */
int
PAPI_num_counters( void )
{
	int retval;
	HighLevelInfo *tmp = NULL;

	/* Make sure the Library is initialized, etc... */
	if ( ( retval = _internal_check_state( &tmp ) ) != PAPI_OK )
		return ( retval );

	return ( PAPI_get_opt( PAPI_MAX_HWCTRS, NULL ) );
}

/** @class PAPI_start_counters
 *	@brief Start counting hardware events.
 *
 *	@par C Interface:
 *	\#include <papi.h> @n
 *	int PAPI_start_counters( int *events, int array_len );
 *
 * @param *events
 *		an array of codes for events such as PAPI_INT_INS or a native event code 
 * @param array_len
 *		the number of items in the *events array 
 *
 *	@retval PAPI_EINVAL 
 *		One or more of the arguments is invalid.
 *	@retval PAPI_EISRUN 
 *		Counters have already been started, you must call PAPI_stop_counters() 
 *		before you call this function again.
 *	@retval PAPI_ESYS 
 *		A system or C library call failed inside PAPI, see the errno variable.
 *	@retval PAPI_ENOMEM 
 *		Insufficient memory to complete the operation.
 *	@retval PAPI_ECNFLCT 
 *		The underlying counter hardware cannot count this event and other events 
 *		in the EventSet simultaneously.
 *	@retval PAPI_ENOEVNT 
 *		The PAPI preset is not available on the underlying hardware. 
 *
 * PAPI_start_counters() starts counting the events named in the *events array. 
 * This function cannot be called if the counters have already been started. 
 * The user must call PAPI_stop_counters() to stop the events explicitly if 
 * he/she wants to call this function again. 
 * It is the user's responsibility to choose events that can be counted 
 * simultaneously by reading the vendor's documentation. 
 * The length of the *events array should be no longer than the value returned 
 * by PAPI_num_counters(). 
 *
 *	@code
if( PAPI_start_counters( Events, num_hwcntrs ) != PAPI_OK )
	handle_error(1);
 *	@endcode
 *
 * @see PAPI_stop_counters() PAPI_add_event() PAPI_create_eventset()
 */
int
PAPI_start_counters( int *events, int array_len )
{
	int i, retval;
	HighLevelInfo *state = NULL;

	if ( events == NULL || array_len <= 0 )
		return PAPI_EINVAL;

	if ( ( retval = _internal_check_state( &state ) ) != PAPI_OK )
		return ( retval );

	if ( state->running != 0 )
		return ( PAPI_EINVAL );

	/* load events to the new EventSet */
	for ( i = 0; i < array_len; i++ ) {
		retval = PAPI_add_event( state->EventSet, events[i] );
		if ( retval == PAPI_EISRUN )
			return ( retval );

		if ( retval ) {
			/* remove any prior events that may have been added 
			 * and cleanup the high level information
			 */
			_internal_cleanup_hl_info( state );
			PAPI_cleanup_eventset( state->EventSet );
			return ( retval );
		}
	}
	/* start the EventSet */
	if ( ( retval = _internal_start_hl_counters( state ) ) == PAPI_OK ) {
		state->running = HL_START_COUNTERS;
		state->num_evts = ( short ) array_len;
	}
	return ( retval );
}

/*========================================================================*/
/* int PAPI_read_counters(long long *values, int array_len)      */
/*                                                                        */
/* Read the running counters into the values array. This call             */
/* implicitly initializes the internal counters to zero and allows        */
/* them continue to run upon return.                                      */
/*========================================================================*/

int
_internal_hl_read_cnts( long long *values, int array_len, int flag )
{
	int retval;
	HighLevelInfo *state = NULL;

	if ( ( retval = _internal_check_state( &state ) ) != PAPI_OK )
		return ( retval );

	if ( state->running != HL_START_COUNTERS || array_len < state->num_evts )
		return ( PAPI_EINVAL );

	if ( flag == PAPI_HL_ACCUM )
		return ( PAPI_accum( state->EventSet, values ) );
	else if ( flag == PAPI_HL_READ ) {
		if ( ( retval = PAPI_read( state->EventSet, values ) ) != PAPI_OK )
			return ( retval );
		return ( PAPI_reset( state->EventSet ) );
	}

	/* Invalid flag passed in */
	return ( PAPI_EINVAL );
}

/** @class PAPI_read_counters
 *	@brief Read and reset counters.
 *
 *	@par C Interface:
 *	\#include <papi.h> @n
 *	int PAPI_read_counters( long long *values, int array_len );
 *
 * @param *values
 *		an array to hold the counter values of the counting events
 * @param arry_len
 *		the number of items in the *events array
 *
 * @pre 
 *		These calls assume an initialized PAPI library and a properly added event set.
 *
 * @post 
 *		The counters are reset and left running after the call.
 *
 *	@retval PAPI_EINVAL 
 *		One or more of the arguments is invalid.
 *	@retval PAPI_ESYS 
 *		A system or C library call failed inside PAPI, see the errno variable. 
 *
 * PAPI_read_counters() copies the event counters into the array *values. 
 *
 *	@code
do_100events();
if ( PAPI_read_counters( values, num_hwcntrs ) != PAPI_OK )
	handlw_error(1);
// values[0] now equals 100 
do_100events();
if ( PAPI_accum_counters( values, num_hwcntrs ) != PAPI_OK )
	handle_error(1);
// values[0] now equals 200
values[0] = -100;
do_100events();
if ( PAPI_accum_counters(values, num_hwcntrs ) != PAPI_OK )
	handle_error();
// values[0] now equals 0
 *	@endcode
 *
 * @see PAPI_set_opt() PAPI_start_counters()
 */
int
PAPI_read_counters( long long *values, int array_len )
{
	return ( _internal_hl_read_cnts( values, array_len, PAPI_HL_READ ) );
}


/** @class PAPI_accum_counters
 *	@brief Accumulate and reset counters.
 *
 *	@par C Interface:
 *	\#include <papi.h> @n
 *	int PAPI_accum_counters( long long *values, int array_len );
 *
 * @param *values
 *		an array to hold the counter values of the counting events
 * @param arry_len
 *		the number of items in the *events array
 *
 * @pre 
 *		These calls assume an initialized PAPI library and a properly added event set.
 *
 * @post 
 *		The counters are reset and left running after the call.
 * 
 *	@retval PAPI_EINVAL 
 *		One or more of the arguments is invalid.
 *	@retval PAPI_ESYS 
 *		A system or C library call failed inside PAPI, see the errno variable. 
 *
 * PAPI_accum_counters() adds the event counters into the array *values. 
 *
 *	@code
do_100events();
if ( PAPI_read_counters( values, num_hwcntrs ) != PAPI_OK )
	handlw_error(1);
// values[0] now equals 100 
do_100events();
if ( PAPI_accum_counters( values, num_hwcntrs ) != PAPI_OK )
	handle_error(1);
// values[0] now equals 200
values[0] = -100;
do_100events();
if ( PAPI_accum_counters(values, num_hwcntrs ) != PAPI_OK )
	handle_error();
// values[0] now equals 0
 *	@endcode
 *
 * @see PAPI_set_opt() PAPI_start_counters()
 */
int
PAPI_accum_counters( long long *values, int array_len )
{
	if ( values == NULL || array_len <= 0 )
		return PAPI_EINVAL;

	return ( _internal_hl_read_cnts( values, array_len, PAPI_HL_ACCUM ) );
}

/** @class PAPI_stop_counters
 *	@brief Stop counting hardware events and reset values to zero.
 *
 *	@par C Interface:
 *	\#include <papi.h> @n
 *	int PAPI_stop_counters( long long *values, int array_len );
 *
 * @param *values
 *		an array where to put the counter values
 * @param array_len
 *		the number of items in the *values array 
 *
 * @post 
 *	After this function is called, the values are reset to zero. 
 *
 *	@retval PAPI_EINVAL 
 *		One or more of the arguments is invalid.
 *	@retval PAPI_ENOTRUN 
 *		The EventSet is not started yet.
 *	@retval PAPI_ENOEVST 
 *		The EventSet has not been added yet. 
 *
 * The PAPI_stop_counters() function stops the counters and copies the counts 
 * into the *values array. 
 * The counters must have been started by a previous call to PAPI_start_counters(). 
 *
 *	\code
int Events[2] = { PAPI_TOT_CYC, PAPI_TOT_INS };
long long values[2];
if ( PAPI_start_counters( Events, 2 ) != PAPI_OK )
	handle_error(1);
your_slow_code();
if ( PAPI_stop_counters( values, 2 ) != PAPI_OK )
	handle_error(1);
 *	\endcode
 * 
 * @see PAPI_read_counters() PAPI_start_counters() PAPI_set_opt()
 */
int
PAPI_stop_counters( long long *values, int array_len )
{
	int retval;
	HighLevelInfo *state = NULL;

	if ( values == NULL || array_len <= 0 )
		return PAPI_EINVAL;

	if ( ( retval = _internal_check_state( &state ) ) != PAPI_OK )
		return ( retval );

	if ( state->running == 0 )
		return ( PAPI_ENOTRUN );

	if ( state->running == HL_FLOPS || state->running == HL_FLIPS ||
		 state->running == HL_IPC || state->running == HL_EPC2 ) {
		long long tmp_values[2];
		retval = PAPI_stop( state->EventSet, tmp_values );
	} else if ( state->running == HL_EPC3 ) {
		long long tmp_values[3];
		retval = PAPI_stop( state->EventSet, tmp_values );
	} else if ( state->running != HL_START_COUNTERS ||
				array_len < state->num_evts )
		return ( PAPI_EINVAL );
	else
		retval = PAPI_stop( state->EventSet, values );

	if ( retval == PAPI_OK ) {
		_internal_cleanup_hl_info( state );
		PAPI_cleanup_eventset( state->EventSet );
	}
	APIDBG( "PAPI_stop_counters returns %d\n", retval );
	return retval;
}

void
_papi_hwi_shutdown_highlevel(  )
{
	HighLevelInfo *state = NULL;

	if ( PAPI_get_thr_specific( PAPI_HIGH_LEVEL_TLS, ( void * ) &state ) ==
		 PAPI_OK ) {
		if ( state )
			papi_free( state );
	}
}

PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTRUCTIONS_RETIRED
PRESET,PAPI_L1_ICM,NOT_DERIVED,L1I_MISSES
PRESET,PAPI_L1_ICA,NOT_DERIVED,L1I_READS
PRESET,PAPI_L1_ICH,DERIVED_SUB,L1I_READS,L1I_MISSES
PRESET,PAPI_L1_DCM,NOT_DERIVED,L1D_REPL
PRESET,PAPI_L1_DCA,NOT_DERIVED,L1D_ALL_REF
PRESET,PAPI_L1_DCH,DERIVED_SUB,L1D_ALL_REF,L1D_REPL
PRESET,PAPI_L1_TCM,NOT_DERIVED,LAST_LEVEL_CACHE_REFERENCES
PRESET,PAPI_L1_LDM,NOT_DERIVED,L2_LD:SELF:ANY:MESI
PRESET,PAPI_L1_STM,NOT_DERIVED,L2_ST:SELF:MESI
PRESET,PAPI_L1_TCA,DERIVED_ADD,L1D_ALL_REF,L1I_READS
PRESET,PAPI_L2_DCM,DERIVED_SUB,L2_LINES_IN:SELF:ANY,BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L2_ICM,NOT_DERIVED,BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_LINES_IN:SELF:ANY
PRESET,PAPI_L2_LDM,DERIVED_SUB,L2_LINES_IN:SELF:ANY,L2_M_LINES_IN:SELF
PRESET,PAPI_L2_STM,NOT_DERIVED,L2_M_LINES_IN:SELF
PRESET,PAPI_L2_DCA,DERIVED_ADD,L2_LD:SELF:ANY:MESI,L2_ST:SELF:MESI
PRESET,PAPI_L2_DCR,NOT_DERIVED,L2_LD:SELF:ANY:MESI
PRESET,PAPI_L2_DCW,NOT_DERIVED,L2_ST:SELF:MESI
PRESET,PAPI_L2_ICH,DERIVED_SUB,L2_IFETCH:SELF:MESI,BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L2_ICA,NOT_DERIVED,L2_IFETCH:SELF:MESI
PRESET,PAPI_L2_TCH,DERIVED_SUB,L2_RQSTS:SELF:ANY:MESI,L2_LINES_IN:SELF:ANY
PRESET,PAPI_L2_TCA,NOT_DERIVED,L2_RQSTS:SELF:ANY:MESI
PRESET,PAPI_L2_TCR,DERIVED_ADD,L2_LD:SELF:ANY:MESI,L2_IFETCH:SELF:MESI
PRESET,PAPI_L2_TCW,NOT_DERIVED,L2_ST:SELF:MESI
#
PRESET,PAPI_LD_INS,NOT_DERIVED,INST_RETIRED:LOADS
PRESET,PAPI_SR_INS,NOT_DERIVED,INST_RETIRED:STORES
#
PRESET,PAPI_CA_SHR,NOT_DERIVED,L2_RQSTS:SELF:ANY:S_STATE
PRESET,PAPI_CA_CLN,NOT_DERIVED,BUS_TRANS_RFO:SELF
PRESET,PAPI_CA_ITV,NOT_DERIVED,BUS_TRANS_INVAL:SELF
#
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB:MISSES
PRESET,PAPI_TLB_DM,NOT_DERIVED,DTLB_MISSES:ANY
#
PRESET,PAPI_BR_TKN,NOT_DERIVED,BR_INST_RETIRED:TAKEN
PRESET,PAPI_BR_NTK,NOT_DERIVED,BR_INST_RETIRED:PRED_NOT_TAKEN:MISPRED_NOT_TAKEN
PRESET,PAPI_BR_INS,NOT_DERIVED,BR_INST_EXEC
PRESET,PAPI_BR_MSP,NOT_DERIVED,BR_MISSP_EXEC
PRESET,PAPI_BR_CN,NOT_DERIVED,BR_CND_EXEC
PRESET,PAPI_BR_PRC,DERIVED_SUB,BR_CND_EXEC,BR_CND_MISSP_EXEC
#
PRESET,PAPI_TOT_IIS,NOT_DERIVED,MACRO_INSTS:DECODED
PRESET,PAPI_HW_INT,NOT_DERIVED,HW_INT_RCV
PRESET,PAPI_RES_STL,NOT_DERIVED,RESOURCE_STALLS:ANY
#
PRESET,PAPI_FP_INS,NOT_DERIVED,FP_COMP_OPS_EXE
# This is an alternate definition of OPS that produces no error with calibrate
# the previous definition was identical to FP_INS
# PRESET,PAPI_FP_OPS,NOT_DERIVED,X87_OPS_RETIRED:ANY
# PRESET,PAPI_FP_OPS,DERIVED_ADD, FP_COMP_OPS_EXE, SIMD_COMP_INST_RETIRED:SCALAR_DOUBLE:PACKED_DOUBLE:SCALAR_SINGLE:PACKED_SINGLE
PRESET,PAPI_FP_OPS,NOT_DERIVED,FP_COMP_OPS_EXE
# PAPI_SP_OPS = FP_COMP_OPS_EXE + 3 * SIMD_COMP_INST_RETIRED:PACKED_SINGLE
PRESET,PAPI_SP_OPS,DERIVED_POSTFIX,N0|N1|3|*|+|,FP_COMP_OPS_EXE,SIMD_COMP_INST_RETIRED:PACKED_SINGLE
PRESET,PAPI_DP_OPS,DERIVED_ADD,FP_COMP_OPS_EXE,SIMD_COMP_INST_RETIRED:PACKED_DOUBLE
PRESET,PAPI_VEC_SP,NOT_DERIVED,SIMD_COMP_INST_RETIRED:PACKED_SINGLE
PRESET,PAPI_VEC_DP,NOT_DERIVED,SIMD_COMP_INST_RETIRED:PACKED_DOUBLE
#
PRESET,PAPI_FML_INS,NOT_DERIVED,MUL
PRESET,PAPI_FDV_INS,NOT_DERIVED,DIV
PRESET,PAPI_VEC_INS,NOT_DERIVED,SIMD_INST_RETIRED:VECTOR
#
CPU,Intel Core Duo/Solo
CPU,coreduo
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTRUCTIONS_RETIRED
PRESET,PAPI_TOT_CYC,NOT_DERIVED,UNHALTED_CORE_CYCLES
PRESET,PAPI_REF_CYC,NOT_DERIVED,UNHALTED_REFERENCE_CYCLES
PRESET,PAPI_BR_INS,NOT_DERIVED,BRANCH_INSTRUCTIONS_RETIRED
PRESET,PAPI_BR_TKN,NOT_DERIVED,BR_TAKEN_RET
PRESET,PAPI_BR_MSP,NOT_DERIVED,MISPREDICTED_BRANCH_RETIRED
PRESET,PAPI_L2_TCM,NOT_DERIVED,LAST_LEVEL_CACHE_MISSES
PRESET,PAPI_L2_TCA,NOT_DERIVED,LAST_LEVEL_CACHE_REFERENCES
PRESET,PAPI_FP_INS,NOT_DERIVED,FP_COMP_INSTR_RET
PRESET,PAPI_FP_OPS,NOT_DERIVED,FP_COMP_INSTR_RET
#
PRESET,PAPI_L1_DCM,NOT_DERIVED, DCACHE_REPL
PRESET,PAPI_L1_ICM,NOT_DERIVED, L2_IFETCH:SELF:MESI
PRESET,PAPI_L2_DCM,DERIVED_SUB, L2_LINES_IN:SELF:ANY, BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L2_ICM,NOT_DERIVED, BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L1_TCM,NOT_DERIVED, L2_RQSTS:SELF:MESI
#PRESET,PAPI_L2_TCM,NOT_DERIVED, L2_LINES_IN:SELF:ANY
PRESET,PAPI_CA_SHR,NOT_DERIVED, L2_RQSTS:SELF:ANY:S_STATE
PRESET,PAPI_CA_CLN,NOT_DERIVED, BUS_TRANS_RFO:SELF
PRESET,PAPI_CA_ITV,NOT_DERIVED, BUS_TRANS_INVAL:SELF
PRESET,PAPI_TLB_IM,NOT_DERIVED, ITLB_MISSES
PRESET,PAPI_TLB_DM,NOT_DERIVED, DTLB_MISS
PRESET,PAPI_L1_LDM,NOT_DERIVED, L2_LD:SELF:MESI
PRESET,PAPI_L1_STM,NOT_DERIVED, L2_ST:SELF:MESI
PRESET,PAPI_L2_LDM,DERIVED_SUB, L2_LINES_IN:SELF:ANY, L2_M_LINES_IN:SELF
PRESET,PAPI_L2_STM,NOT_DERIVED, L2_M_LINES_IN:SELF
PRESET,PAPI_BTAC_M,NOT_DERIVED, PREF_RQSTS_DN
PRESET,PAPI_HW_INT,NOT_DERIVED, HW_INT_RX
PRESET,PAPI_BR_CN,NOT_DERIVED, BR_CND_EXEC
PRESET,PAPI_BR_TKN,NOT_DERIVED, BR_TAKEN_RET
PRESET,PAPI_BR_NTK,DERIVED_SUB, BR_INSTR_RET,BR_TAKEN_RET
PRESET,PAPI_BR_MSP,NOT_DERIVED, BR_MISSP_EXEC
PRESET,PAPI_BR_PRC,DERIVED_SUB, BR_INSTR_RET,BR_MISPRED_RET
PRESET,PAPI_TOT_IIS,NOT_DERIVED, INSTR_DECODED
PRESET,PAPI_RES_STL,NOT_DERIVED, RESOURCE_STALL
PRESET,PAPI_L1_DCH,DERIVED_SUB, DATA_MEM_REF, DCACHE_REPL
PRESET,PAPI_L1_DCA,NOT_DERIVED, DATA_MEM_REF
PRESET,PAPI_L2_DCA,DERIVED_ADD, L2_LD:SELF:MESI, L2_ST:SELF:MESI
PRESET,PAPI_L2_DCR,NOT_DERIVED, L2_LD:SELF:MESI
PRESET,PAPI_L2_DCW,NOT_DERIVED, L2_ST:SELF:MESI
PRESET,PAPI_L1_ICH,DERIVED_SUB, BUS_TRANS_IFETCH:SELF, L2_IFETCH:SELF:MESI
PRESET,PAPI_L2_ICH,DERIVED_SUB, L2_IFETCH:SELF:MESI, BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L1_ICA,NOT_DERIVED, BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L2_ICA,NOT_DERIVED, L2_IFETCH:SELF:MESI
PRESET,PAPI_L1_ICR,NOT_DERIVED, BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L2_ICR,NOT_DERIVED, L2_IFETCH:SELF:MESI
PRESET,PAPI_L2_TCH,DERIVED_SUB, L2_RQSTS:SELF:ANY:MESI, L2_LINES_IN:SELF:ANY
PRESET,PAPI_L1_TCA,DERIVED_ADD, DATA_MEM_REF, BUS_TRANS_IFETCH:SELF
PRESET,PAPI_L2_TCA,NOT_DERIVED, L2_RQSTS:SELF:ANY:MESI
PRESET,PAPI_L2_TCR,DERIVED_ADD, L2_LD:SELF:MESI, L2_IFETCH:SELF:MESI
PRESET,PAPI_L2_TCW,NOT_DERIVED, L2_ST:SELF:MESI
PRESET,PAPI_FML_INS,NOT_DERIVED, MUL
PRESET,PAPI_FDV_INS,NOT_DERIVED, DIV
#
CPU,Intel PentiumIII
CPU,Intel P6 Processor Family
CPU,p6
#
PRESET,PAPI_L2_DCM,DERIVED_SUB,L2_LINES_IN,BUS_TRAN_IFETCH:SELF
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_LINES_IN
PRESET,PAPI_L2_LDM,DERIVED_SUB,L2_LINES_IN,L2_M_LINES_INM
PRESET,PAPI_L2_TCH,DERIVED_SUB,L2_RQSTS:M:E:S:I,L2_LINES_IN
#
CPU,Intel PentiumM
CPU,Intel Pentium M
CPU,pm
#
PRESET,PAPI_L2_DCM,DERIVED_SUB,L2_LINES_IN:ONLY_HW_PREFETCH:NON_HW_PREFETCH,BUS_TRAN_IFETCH:SELF
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_LINES_IN:ONLY_HW_PREFETCH:NON_HW_PREFETCH
PRESET,PAPI_L2_LDM,DERIVED_SUB,L2_LINES_IN:ONLY_HW_PREFETCH:NON_HW_PREFETCH,L2_M_LINES_INM
PRESET,PAPI_L2_TCH,DERIVED_SUB,L2_RQSTS:M:E:S:I,L2_LINES_IN:ONLY_HW_PREFETCH:NON_HW_PREFETCH
#
CPU,Intel P6
CPU,Intel PentiumIII
CPU,Intel PentiumM
CPU,Intel P6 Processor Family
CPU,Intel Pentium Pro
CPU,Intel Pentium II
CPU,Intel Pentium M
CPU,p6
CPU,ppro
CPU,pii
CPU,pm
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,INST_RETIRED
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CLK_UNHALTED
PRESET,PAPI_L1_DCM,NOT_DERIVED,DCU_LINES_IN
PRESET,PAPI_L1_ICM,NOT_DERIVED,L2_IFETCH:M:E:S:I
PRESET,PAPI_L1_TCM,NOT_DERIVED,L2_RQSTS:M:E:S:I
PRESET,PAPI_L1_LDM,NOT_DERIVED,L2_LD:M:E:S:I
PRESET,PAPI_L1_STM,NOT_DERIVED,L2_ST:M:E:S:I
PRESET,PAPI_L1_DCH,DERIVED_SUB,DATA_MEM_REFS,DCU_LINES_IN
PRESET,PAPI_L1_DCA,NOT_DERIVED,DATA_MEM_REFS
PRESET,PAPI_L1_ICH,DERIVED_SUB,IFU_IFETCH,L2_IFETCH:M:E:S:I
PRESET,PAPI_L1_ICA,NOT_DERIVED,IFU_IFETCH
PRESET,PAPI_L1_ICR,NOT_DERIVED,IFU_IFETCH
PRESET,PAPI_L1_TCA,DERIVED_ADD,DATA_MEM_REFS,IFU_IFETCH
#
PRESET,PAPI_L2_ICM,NOT_DERIVED,BUS_TRAN_IFETCH:SELF
PRESET,PAPI_L2_STM,NOT_DERIVED,L2_M_LINES_INM
PRESET,PAPI_L2_DCA,DERIVED_ADD,L2_LD:M:E:S:I,L2_ST:M:E:S:I
PRESET,PAPI_L2_DCR,NOT_DERIVED,L2_LD:M:E:S:I
PRESET,PAPI_L2_DCW,NOT_DERIVED,L2_ST:M:E:S:I
PRESET,PAPI_L2_ICH,DERIVED_SUB,L2_IFETCH:M:E:S:I,BUS_TRAN_IFETCH:SELF
PRESET,PAPI_L2_ICA,NOT_DERIVED,L2_IFETCH:M:E:S:I
PRESET,PAPI_L2_ICR,NOT_DERIVED,L2_IFETCH:M:E:S:I
PRESET,PAPI_L2_TCA,NOT_DERIVED,L2_RQSTS:M:E:S:I
PRESET,PAPI_L2_TCR,DERIVED_ADD,L2_LD:M:E:S:I,L2_IFETCH:M:E:S:I
PRESET,PAPI_L2_TCW,NOT_DERIVED,L2_ST:M:E:S:I
#
PRESET,PAPI_CA_SHR,NOT_DERIVED,L2_RQSTS:S
PRESET,PAPI_CA_CLN,NOT_DERIVED,BUS_TRANS_RFO:SELF
PRESET,PAPI_CA_ITV,NOT_DERIVED,BUS_TRAN_INVAL:SELF
#
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB_MISS
PRESET,PAPI_HW_INT,NOT_DERIVED,HW_INT_RX
PRESET,PAPI_TOT_IIS,NOT_DERIVED,INST_DECODED
PRESET,PAPI_RES_STL,NOT_DERIVED,RESOURCE_STALLS
#
PRESET,PAPI_BTAC_M,NOT_DERIVED,BTB_MISSES
PRESET,PAPI_BR_CN,NOT_DERIVED,BR_INST_RETIRED
PRESET,PAPI_BR_TKN,NOT_DERIVED,BR_TAKEN_RETIRED
PRESET,PAPI_BR_NTK,DERIVED_SUB,BR_INST_RETIRED,BR_TAKEN_RETIRED
PRESET,PAPI_BR_MSP,NOT_DERIVED,BR_MISS_PRED_RETIRED
PRESET,PAPI_BR_PRC,DERIVED_SUB,BR_INST_RETIRED,BR_MISS_PRED_RETIRED
PRESET,PAPI_BR_INS,NOT_DERIVED,BR_INST_RETIRED
#
PRESET,PAPI_FP_INS,NOT_DERIVED,FLOPS
PRESET,PAPI_FP_OPS,NOT_DERIVED,FLOPS
PRESET,PAPI_FML_INS,NOT_DERIVED,MUL
PRESET,PAPI_FDV_INS,NOT_DERIVED,DIV
#
# This is an example of multiple processor names matching the same table
CPU,Intel Pentium4
CPU,Intel Pentium4 L3
CPU,Pentium4/Xeon/EM64T
CPU,netburst
CPU,netburst_p
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTR_RETIRED:NBOGUSNTAG
PRESET,PAPI_TOT_CYC,NOT_DERIVED,GLOBAL_POWER_EVENTS:RUNNING
PRESET,PAPI_RES_STL, NOT_DERIVED, resource_stall:SBFULL
PRESET,PAPI_BR_INS, NOT_DERIVED, branch_retired:MMNP:MMNM:MMTP:MMTM
PRESET,PAPI_BR_TKN, NOT_DERIVED, branch_retired:MMTP:MMTM
PRESET,PAPI_BR_NTK, NOT_DERIVED, branch_retired:MMNP:MMNM
PRESET,PAPI_BR_MSP, NOT_DERIVED, branch_retired:MMNM:MMTM
PRESET,PAPI_BR_PRC, NOT_DERIVED, branch_retired:MMNP:MMTP
PRESET,PAPI_TLB_DM, NOT_DERIVED, page_walk_type:DTMISS
PRESET,PAPI_TLB_IM, NOT_DERIVED, page_walk_type:ITMISS
PRESET,PAPI_TLB_TL, NOT_DERIVED, page_walk_type:DTMISS:ITMISS
PRESET,PAPI_LD_INS, DERIVED_CMPD, front_end_event:NBOGUS, uops_type:TAGLOADS
PRESET,PAPI_SR_INS, DERIVED_CMPD, front_end_event:NBOGUS, uops_type:TAGSTORES
PRESET,PAPI_LST_INS, DERIVED_CMPD, front_end_event:NBOGUS, uops_type:TAGLOADS:TAGSTORES
PRESET,PAPI_FP_INS, DERIVED_CMPD, execution_event:NBOGUS0, x87_FP_uop:ALL:TAG0,NOTE,"PAPI_FP_INS counts only retired x87 uops tagged with 0. If you add other native events tagged with 0, their counts will be included in PAPI_FP_INS"
PRESET,PAPI_TOT_IIS, NOT_DERIVED, instr_retired:NBOGUSNTAG:NBOGUSTAG:BOGUSNTAG:BOGUSTAG, NOTE, "Only on model 2 and above"
PRESET,PAPI_L1_ICM, NOT_DERIVED, BPU_fetch_request:TCMISS
PRESET,PAPI_L1_ICA, NOT_DERIVED, uop_queue_writes:FROM_TC_BUILD:FROM_TC_DELIVER
PRESET,PAPI_L1_LDM, NOT_DERIVED, replay_event:NBOGUS:L1_LD_MISS
PRESET,PAPI_L2_LDM, NOT_DERIVED, replay_event:NBOGUS:L2_LD_MISS
PRESET,PAPI_L2_TCH, NOT_DERIVED, BSQ_cache_reference:RD_2ndL_HITS:RD_2ndL_HITE:RD_2ndL_HITM
PRESET,PAPI_L2_TCM, NOT_DERIVED, BSQ_cache_reference:RD_2ndL_MISS
PRESET,PAPI_L2_TCA, NOT_DERIVED, BSQ_cache_reference:RD_2ndL_MISS:RD_2ndL_HITS:RD_2ndL_HITE:RD_2ndL_HITM
#
CPU,Intel Pentium4 L3
PRESET,PAPI_L3_TCH, NOT_DERIVED, BSQ_cache_reference:RD_3rdL_HITS:RD_3rdL_HITE:RD_3rdL_HITM
PRESET,PAPI_L3_TCM, NOT_DERIVED, BSQ_cache_reference:RD_3rdL_MISS
PRESET,PAPI_L3_TCA, NOT_DERIVED, BSQ_cache_reference:RD_3rdL_MISS:RD_3rdL_HITS:RD_3rdL_HITE:RD_3rdL_HITM
#
CPU,Intel Pentium4 FPU X87
PRESET,PAPI_FP_OPS, DERIVED_CMPD, execution_event:NBOGUS1, x87_FP_uop:ALL:TAG1,NOTE,"PAPI_FP_OPS counts retired x87 uops tagged with 1."
#
CPU,Intel Pentium4 FPU SSE_SP
PRESET,PAPI_FP_OPS, DERIVED_CMPD, execution_event:NBOGUS1, scalar_SP_uop:ALL:TAG1,NOTE,"PAPI_FP_OPS counts retired scalar_SP SSE uops tagged with 1."
#
CPU,Intel Pentium4 FPU SSE_DP
PRESET,PAPI_FP_OPS, DERIVED_CMPD, execution_event:NBOGUS1, scalar_DP_uop:ALL:TAG1,NOTE,"PAPI_FP_OPS counts retired scalar_DP SSE uops tagged with 1."
#
CPU,Intel Pentium4 FPU X87 SSE_SP
PRESET,PAPI_FP_OPS, DERIVED_CMPD, execution_event:NBOGUS1, scalar_SP_uop:ALL:TAG1, x87_FP_uop:ALL:TAG1,NOTE,"PAPI_FP_OPS counts retired x87 and scalar_SP SSE uops tagged with 1."
#
CPU,Intel Pentium4 FPU X87 SSE_DP
PRESET,PAPI_FP_OPS, DERIVED_CMPD, execution_event:NBOGUS1, scalar_DP_uop:ALL:TAG1, x87_FP_uop:ALL:TAG1,NOTE,"PAPI_FP_OPS counts retired x87 and scalar_DP SSE uops tagged with 1."
#
CPU,Intel Pentium4 FPU SSE_SP SSE_DP
PRESET,PAPI_FP_OPS, DERIVED_CMPD, execution_event:NBOGUS1, scalar_SP_uop:ALL:TAG1, scalar_DP_uop:ALL:TAG1,NOTE,"PAPI_FP_OPS counts retired scalar_SP and scalar_DP SSE uops tagged with 1."
#
CPU,Intel Pentium4 VEC MMX
PRESET,PAPI_VEC_INS, DERIVED_CMPD, execution_event:NBOGUS2, 64bit_MMX_uop:ALL:TAG2, 128bit_MMX_uop:ALL:TAG2,NOTE,"PAPI_VEC_INS counts retired 64bit and 128bit MMX uops tagged with 2."
#
CPU,Intel Pentium4 VEC SSE
PRESET,PAPI_VEC_INS, DERIVED_CMPD, execution_event:NBOGUS2, packed_SP_uop:ALL:TAG2, packed_DP_uop:ALL:TAG2,NOTE,"PAPI_VEC_INS counts retired packed single and double precision SSE uops tagged with 2."
#
CPU,IA-64
#
CPU,dual-core Itanium 2
#
PRESET,PAPI_FP_OPS,NOT_DERIVED,FP_OPS_RETIRED
PRESET,PAPI_STL_ICY,NOT_DERIVED,DISP_STALLED
PRESET,PAPI_STL_CCY,NOT_DERIVED,BACK_END_BUBBLE_ALL
PRESET,PAPI_TOT_IIS,NOT_DERIVED,INST_DISPERSED
PRESET,PAPI_RES_STL,NOT_DERIVED,BE_EXE_BUBBLE_ALL
PRESET,PAPI_FP_STAL,NOT_DERIVED,BE_EXE_BUBBLE_FRALL
PRESET,PAPI_L1_ICM,NOT_DERIVED,L2I_READS_ALL_DMND
PRESET,PAPI_L1_DCM,NOT_DERIVED,L1D_READ_MISSES_ALL
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2I_READS_MISS_ALL
PRESET,PAPI_L2_ICM,NOT_DERIVED,L2I_READS_MISS_ALL
PRESET,PAPI_L3_TCM,NOT_DERIVED,L3_MISSES
PRESET,PAPI_L3_ICM,NOT_DERIVED,L3_READS_INST_FETCH_MISS:M:E:S:I
PRESET,PAPI_L3_LDM,NOT_DERIVED,L3_READS_ALL_MISS:M:E:S:I
PRESET,PAPI_L3_STM,NOT_DERIVED,L3_WRITES_DATA_WRITE_MISS:M:E:S:I
PRESET,PAPI_L1_LDM,NOT_DERIVED,L1D_READ_MISSES_ALL
PRESET,PAPI_L2_LDM,NOT_DERIVED,L3_READS_ALL_ALL:M:E:S:I
PRESET,PAPI_L2_STM,NOT_DERIVED,L3_WRITES_ALL_ALL:M:E:S:I
PRESET,PAPI_L1_DCA,NOT_DERIVED,L1D_READS_SET1
PRESET,PAPI_L2_DCA,NOT_DERIVED,L2D_REFERENCES_ALL
PRESET,PAPI_L3_DCA,NOT_DERIVED,L3_REFERENCES
PRESET,PAPI_L1_DCR,NOT_DERIVED,L1D_READS_SET1
PRESET,PAPI_L2_DCR,NOT_DERIVED,L2D_REFERENCES_READS
PRESET,PAPI_L3_DCR,NOT_DERIVED,L3_READS_DATA_READ_ALL:M:E:S:I
PRESET,PAPI_L2_DCW,NOT_DERIVED,L2D_REFERENCES_WRITES
PRESET,PAPI_L3_DCW,NOT_DERIVED,L3_WRITES_DATA_WRITE_ALL:M:E:S:I
PRESET,PAPI_L3_ICH,NOT_DERIVED,L3_READS_DINST_FETCH_HIT:M:E:S:I
PRESET,PAPI_L3_ICR,NOT_DERIVED,L3_READS_INST_FETCH_ALL:M:E:S:I
PRESET,PAPI_L3_TCA,NOT_DERIVED,L3_REFERENCES
PRESET,PAPI_L3_TCR,NOT_DERIVED,L3_READS_ALL_ALL:M:E:S:I
PRESET,PAPI_L3_TCW,NOT_DERIVED,L3_WRITES_ALL_ALL:M:E:S:I
PRESET,PAPI_TLB_DM,NOT_DERIVED,L2DTLB_MISSES
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB_MISSES_FETCH_L2ITLB
PRESET,PAPI_BR_INS,NOT_DERIVED,BRANCH_EVENT
PRESET,PAPI_BR_PRC,NOT_DERIVED,BR_MISPRED_DETAIL_ALL_CORRECT_PRED
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_OP_CYCLES_ALL
PRESET,PAPI_FP_OPS,NOT_DERIVED,FP_OPS_RETIRED
PRESET,PAPI_TOT_INS,NOT_DERIVED,IA64_INST_RETIRED
PRESET,PAPI_LD_INS,NOT_DERIVED,LOADS_RETIRED
PRESET,PAPI_SR_INS,NOT_DERIVED,STORES_RETIRED
PRESET,PAPI_L2_ICA,NOT_DERIVED,L2I_DEMAND_READS
PRESET,PAPI_L3_ICA,NOT_DERIVED,L3_READS_INST_FETCH_ALL:M:E:S:I
PRESET,PAPI_L1_TCR,NOT_DERIVED,L2I_READS_ALL_ALL
PRESET,PAPI_L2_TCW,NOT_DERIVED,L2D_REFERENCES_WRITES
#
CPU,itanium2
#
PRESET,PAPI_CA_SNP,NOT_DERIVED,BUS_SNOOPS_SELF
PRESET,PAPI_CA_INV,DERIVED_ADD,BUS_MEM_READ_BRIL_SELF,BUS_MEM_READ_BIL_SELF
PRESET,PAPI_TLB_TL,DERIVED_ADD,ITLB_MISSES_FETCH_L2ITLB,L2DTLB_MISSES
PRESET,PAPI_STL_ICY,NOT_DERIVED,DISP_STALLED
PRESET,PAPI_STL_CCY,NOT_DERIVED,BACK_END_BUBBLE_ALL
PRESET,PAPI_TOT_IIS,NOT_DERIVED,INST_DISPERSED
PRESET,PAPI_RES_STL,NOT_DERIVED,BE_EXE_BUBBLE_ALL
PRESET,PAPI_FP_STAL,NOT_DERIVED,BE_EXE_BUBBLE_FRALL
PRESET,PAPI_L2_TCR,DERIVED_ADD,L2_DATA_REFERENCES_L2_DATA_READS,L2_INST_DEMAND_READS,L2_INST_PREFETCHES
PRESET,PAPI_L1_TCM,DERIVED_ADD,L2_INST_DEMAND_READS,L1D_READ_MISSES_ALL
PRESET,PAPI_L1_ICM,NOT_DERIVED,L2_INST_DEMAND_READS
PRESET,PAPI_L1_DCM,NOT_DERIVED,L1D_READ_MISSES_ALL
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_MISSES
PRESET,PAPI_L2_DCM, DERIVED_SUB,L2_MISSES,L3_READS_INST_FETCH_ALL
PRESET,PAPI_L2_ICM,NOT_DERIVED,L3_READS_INST_FETCH_ALL
PRESET,PAPI_L3_TCM,NOT_DERIVED,L3_MISSES
PRESET,PAPI_L3_ICM,NOT_DERIVED,L3_READS_INST_FETCH_MISS
PRESET,PAPI_L3_DCM, DERIVED_ADD,L3_READS_DATA_READ_MISS,L3_WRITES_DATA_WRITE_MISS
PRESET,PAPI_L3_LDM,NOT_DERIVED,L3_READS_ALL_MISS
PRESET,PAPI_L3_STM,NOT_DERIVED,L3_WRITES_DATA_WRITE_MISS
PRESET,PAPI_L1_LDM,DERIVED_ADD,L1D_READ_MISSES_ALL,L2_INST_DEMAND_READS
PRESET,PAPI_L2_LDM,NOT_DERIVED,L3_READS_ALL_ALL
PRESET,PAPI_L2_STM,NOT_DERIVED,L3_WRITES_ALL_ALL
PRESET,PAPI_L1_DCH,DERIVED_SUB,L1D_READS_SET1,L1D_READ_MISSES_ALL
PRESET,PAPI_L2_DCH,DERIVED_SUB,L2_DATA_REFERENCES_L2_ALL,L2_MISSES
PRESET,PAPI_L3_DCH,DERIVED_ADD,L3_READS_DATA_READ_HIT,L3_WRITES_DATA_WRITE_HIT
PRESET,PAPI_L1_DCA,NOT_DERIVED,L1D_READS_SET1
PRESET,PAPI_L2_DCA,NOT_DERIVED,L2_DATA_REFERENCES_L2_ALL
PRESET,PAPI_L3_DCA,DERIVED_ADD,L3_READS_DATA_READ_ALL,L3_WRITES_DATA_WRITE_ALL
PRESET,PAPI_L1_DCR,NOT_DERIVED,L1D_READS_SET1
PRESET,PAPI_L2_DCR,NOT_DERIVED,L2_DATA_REFERENCES_L2_DATA_READS
PRESET,PAPI_L3_DCR,NOT_DERIVED,L3_READS_DATA_READ_ALL
PRESET,PAPI_L2_DCW,NOT_DERIVED,L2_DATA_REFERENCES_L2_DATA_WRITES
PRESET,PAPI_L3_DCW,NOT_DERIVED,L3_WRITES_DATA_WRITE_ALL
PRESET,PAPI_L3_ICH,NOT_DERIVED,L3_READS_DINST_FETCH_HIT
PRESET,PAPI_L1_ICR,DERIVED_ADD,L1I_PREFETCHES,L1I_READS
PRESET,PAPI_L2_ICR,DERIVED_ADD,L2_INST_DEMAND_READS,L2_INST_PREFETCHES
PRESET,PAPI_L3_ICR,NOT_DERIVED,L3_READS_INST_FETCH_ALL
PRESET,PAPI_L1_ICA,DERIVED_ADD,L1I_PREFETCHES,L1I_READS
PRESET,PAPI_L2_TCH,DERIVED_SUB,L2_REFERENCES,L2_MISSES
PRESET,PAPI_L3_TCH,DERIVED_SUB,L3_REFERENCES,L3_MISSES
PRESET,PAPI_L2_TCA,NOT_DERIVED,L2_REFERENCES
PRESET,PAPI_L3_TCA,NOT_DERIVED,L3_REFERENCES
PRESET,PAPI_L3_TCR,NOT_DERIVED,L3_READS_ALL_ALL
PRESET,PAPI_L3_TCW,NOT_DERIVED,L3_WRITES_ALL_ALL
PRESET,PAPI_TLB_DM,NOT_DERIVED,L2DTLB_MISSES
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB_MISSES_FETCH_L2ITLB
PRESET,PAPI_BR_INS,NOT_DERIVED,BRANCH_EVENT
PRESET,PAPI_BR_PRC,NOT_DERIVED,BR_MISPRED_DETAIL_ALL_CORRECT_PRED
PRESET,PAPI_BR_MSP,DERIVED_ADD,BR_MISPRED_DETAIL_ALL_WRONG_PATH,BR_MISPRED_DETAIL_ALL_WRONG_TARGET
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CYCLES
PRESET,PAPI_FP_OPS,NOT_DERIVED,FP_OPS_RETIRED
PRESET,PAPI_TOT_INS,DERIVED_ADD,IA64_INST_RETIRED,IA32_INST_RETIRED
PRESET,PAPI_LD_INS,NOT_DERIVED,LOADS_RETIRED
PRESET,PAPI_SR_INS,NOT_DERIVED,STORES_RETIRED
PRESET,PAPI_L2_ICA,NOT_DERIVED,L2_INST_DEMAND_READS
PRESET,PAPI_L3_ICA,NOT_DERIVED,L3_READS_INST_FETCH_ALL
PRESET,PAPI_L1_TCR,DERIVED_ADD,L1D_READS_SET0,L1I_READS 
PRESET,PAPI_L1_TCA,DERIVED_ADD,L1D_READS_SET0,L1I_READS 
PRESET,PAPI_L2_TCW,NOT_DERIVED,L2_DATA_REFERENCES_L2_DATA_WRITES
#
CPU,itanium
#
CPU,PPC970
#
PRESET,PAPI_L2_DCM,NOT_DERIVED,PM_DATA_FROM_MEM
PRESET,PAPI_L2_DCR,DERIVED_ADD,PM_DATA_FROM_L2,PM_DATA_FROM_L25_MOD,PM_DATA_FROM_L25_SHR,PM_DATA_FROM_MEM
PRESET,PAPI_L2_DCH,DERIVED_ADD,PM_DATA_FROM_L2,PM_DATA_FROM_L25_MOD,PM_DATA_FROM_L25_SHR
PRESET,PAPI_L2_LDM,NOT_DERIVED,PM_DATA_FROM_MEM
PRESET,PAPI_L1_ICM,DERIVED_ADD,PM_INST_FROM_L2,PM_INST_FROM_L25_SHR,PM_INST_FROM_L25_MOD,PM_INST_FROM_MEM
PRESET,PAPI_L2_ICA,DERIVED_ADD,PM_INST_FROM_L2,PM_INST_FROM_L25_SHR,PM_INST_FROM_L25_MOD,PM_INST_FROM_MEM
PRESET,PAPI_L2_ICH,DERIVED_ADD,PM_INST_FROM_L2,PM_INST_FROM_L25_SHR,PM_INST_FROM_L25_MOD
PRESET,PAPI_L2_ICM,NOT_DERIVED,PM_INST_FROM_MEM
PRESET,PAPI_L1_DCM,DERIVED_ADD,PM_LD_MISS_L1,PM_ST_MISS_L1
PRESET,PAPI_L1_DCA,DERIVED_ADD,PM_LD_REF_L1,PM_ST_REF_L1
PRESET,PAPI_FXU_IDL,NOT_DERIVED,PM_FXU_IDLE
PRESET,PAPI_L1_LDM,NOT_DERIVED,PM_LD_MISS_L1
PRESET,PAPI_L1_STM,NOT_DERIVED,PM_ST_MISS_L1
PRESET,PAPI_L1_DCW,NOT_DERIVED,PM_ST_REF_L1
PRESET,PAPI_L1_DCR,NOT_DERIVED,PM_LD_REF_L1
PRESET,PAPI_FMA_INS,NOT_DERIVED,PM_FPU_FMA
PRESET,PAPI_TOT_IIS,NOT_DERIVED,PM_INST_DISP
PRESET,PAPI_TOT_INS,NOT_DERIVED,PM_INST_CMPL
PRESET,PAPI_INT_INS,NOT_DERIVED,PM_FXU_FIN
PRESET,PAPI_FP_OPS,DERIVED_POSTFIX,N0|N1|+|N2|+|N3|-|,PM_FPU0_FIN,PM_FPU1_FIN,PM_FPU_FMA,PM_FPU_STF
PRESET,PAPI_FP_INS,NOT_DERIVED,PM_FPU_FIN
PRESET,PAPI_TOT_CYC,NOT_DERIVED,PM_CYC
PRESET,PAPI_FDV_INS,NOT_DERIVED,PM_FPU_FDIV
PRESET,PAPI_FSQ_INS,NOT_DERIVED,PM_FPU_FSQRT
PRESET,PAPI_TLB_DM,NOT_DERIVED,PM_DTLB_MISS
PRESET,PAPI_TLB_IM,NOT_DERIVED,PM_ITLB_MISS
PRESET,PAPI_TLB_TL,DERIVED_ADD,PM_DTLB_MISS,PM_ITLB_MISS
PRESET,PAPI_HW_INT,NOT_DERIVED,PM_EXT_INT
PRESET,PAPI_STL_ICY,NOT_DERIVED,PM_0INST_FETCH
PRESET,PAPI_LD_INS,NOT_DERIVED,PM_LD_REF_L1
PRESET,PAPI_SR_INS,NOT_DERIVED,PM_ST_REF_L1
PRESET,PAPI_LST_INS,DERIVED_ADD,PM_ST_REF_L1,PM_LD_REF_L1
PRESET,PAPI_BR_INS,NOT_DERIVED,PM_BR_ISSUED
PRESET,PAPI_BR_MSP,DERIVED_ADD,PM_BR_MPRED_CR,PM_BR_MPRED_TA
PRESET,PAPI_L1_DCH,DERIVED_POSTFIX,N0|N1|-|N2|+|N3|-|,PM_LD_REF_L1,PM_LD_MISS_L1,PM_ST_REF_L1,PM_ST_MISS_L1
PRESET,PAPI_L3_DCM,NOT_DERIVED,PM_DATA_FROM_MEM
PRESET,PAPI_L3_LDM,NOT_DERIVED,PM_DATA_FROM_MEM
PRESET,PAPI_L1_ICH,NOT_DERIVED,PM_INST_FROM_L1
PRESET,PAPI_L3_ICM,NOT_DERIVED,PM_INST_FROM_MEM
#
CPU,PPC970MP
#
PRESET,PAPI_L2_DCM,NOT_DERIVED,PM_DATA_FROM_MEM
PRESET,PAPI_L2_DCR,DERIVED_ADD,PM_DATA_FROM_L2,PM_DATA_FROM_L25_MOD,PM_DATA_FROM_L25_SHR,PM_DATA_FROM_MEM
PRESET,PAPI_L2_DCH,DERIVED_ADD,PM_DATA_FROM_L2,PM_DATA_FROM_L25_MOD,PM_DATA_FROM_L25_SHR PRESET,PAPI_L2_LDM,NOT_DERIVED,PM_DATA_FROM_MEM
#PRESET,PAPI_L1_ICM,DERIVED_ADD,PM_INST_FROM_L2,PM_INST_FROM_L25_SHR,PM_INST_FROM_L25_MOD,PM_INST_FROM_MEM
#PRESET,PAPI_L2_ICA,DERIVED_ADD,PM_INST_FROM_L2,PM_INST_FROM_L25_SHR,PM_INST_FROM_L25_MOD,PM_INST_FROM_MEM
#PRESET,PAPI_L2_ICH,DERIVED_ADD,PM_INST_FROM_L2,PM_INST_FROM_L25_SHR,PM_INST_FROM_L25_MOD PRESET,PAPI_L2_ICM,NOT_DERIVED,PM_INST_FROM_MEM
PRESET,PAPI_L1_DCM,DERIVED_ADD,PM_LD_MISS_L1,PM_ST_MISS_L1
PRESET,PAPI_L1_DCA,DERIVED_ADD,PM_LD_REF_L1,PM_ST_REF_L1
PRESET,PAPI_FXU_IDL,NOT_DERIVED,PM_FXU_IDLE
PRESET,PAPI_L1_LDM,NOT_DERIVED,PM_LD_MISS_L1
PRESET,PAPI_L1_STM,NOT_DERIVED,PM_ST_MISS_L1
PRESET,PAPI_L1_DCW,NOT_DERIVED,PM_ST_REF_L1
PRESET,PAPI_L1_DCR,NOT_DERIVED,PM_LD_REF_L1
PRESET,PAPI_FMA_INS,NOT_DERIVED,PM_FPU_FMA
PRESET,PAPI_TOT_IIS,NOT_DERIVED,PM_INST_DISP
PRESET,PAPI_TOT_INS,NOT_DERIVED,PM_INST_CMPL
PRESET,PAPI_INT_INS,NOT_DERIVED,PM_FXU_FIN
PRESET,PAPI_FP_OPS,DERIVED_POSTFIX,N0|N1|+|N2|+|N3|-|,PM_FPU0_FIN,PM_FPU1_FIN,PM_FPU_FMA,PM_FPU_STF 
PRESET,PAPI_FP_INS,NOT_DERIVED,PM_FPU_FIN
PRESET,PAPI_TOT_CYC,NOT_DERIVED,PM_CYC
PRESET,PAPI_FDV_INS,NOT_DERIVED,PM_FPU_FDIV
PRESET,PAPI_FSQ_INS,NOT_DERIVED,PM_FPU_FSQRT
PRESET,PAPI_TLB_DM,NOT_DERIVED,PM_DTLB_MISS
PRESET,PAPI_TLB_IM,NOT_DERIVED,PM_ITLB_MISS
PRESET,PAPI_TLB_TL,DERIVED_ADD,PM_DTLB_MISS,PM_ITLB_MISS
PRESET,PAPI_HW_INT,NOT_DERIVED,PM_EXT_INT
PRESET,PAPI_STL_ICY,NOT_DERIVED,PM_0INST_FETCH
PRESET,PAPI_LD_INS,NOT_DERIVED,PM_LD_REF_L1
PRESET,PAPI_SR_INS,NOT_DERIVED,PM_ST_REF_L1
PRESET,PAPI_LST_INS,DERIVED_ADD,PM_ST_REF_L1,PM_LD_REF_L1
PRESET,PAPI_BR_INS,NOT_DERIVED,PM_BR_ISSUED
PRESET,PAPI_BR_MSP,DERIVED_ADD,PM_BR_MPRED_CR,PM_BR_MPRED_TA
PRESET,PAPI_L1_DCH,DERIVED_POSTFIX,N0|N1|-|N2|+|N3|-|,PM_LD_REF_L1,PM_LD_MISS_L1,PM_ST_REF_L1,PM_ST_MISS_L1
PRESET,PAPI_L3_DCM,NOT_DERIVED,PM_DATA_FROM_MEM
PRESET,PAPI_L3_LDM,NOT_DERIVED,PM_DATA_FROM_MEM
PRESET,PAPI_L1_ICH,NOT_DERIVED,PM_INST_FROM_L1
PRESET,PAPI_L3_ICM,NOT_DERIVED,PM_INST_FROM_MEM
#
CPU,POWER5
#
PRESET,PAPI_L1_DCM,DERIVED_ADD,PM_LD_MISS_L1,PM_ST_MISS_L1
PRESET,PAPI_L1_DCA,DERIVED_ADD,PM_LD_REF_L1,PM_ST_REF_L1
PRESET,PAPI_L1_LDM,NOT_DERIVED,PM_LD_MISS_L1
PRESET,PAPI_L1_STM,NOT_DERIVED,PM_ST_MISS_L1
PRESET,PAPI_L1_DCW,NOT_DERIVED,PM_ST_REF_L1
PRESET,PAPI_L1_DCR,NOT_DERIVED,PM_LD_REF_L1
PRESET,PAPI_L2_DCM,NOT_DERIVED,PM_DATA_FROM_L2MISS
PRESET,PAPI_L2_LDM,NOT_DERIVED,PM_DATA_FROM_L2MISS
PRESET,PAPI_L3_DCR,NOT_DERIVED,PM_DATA_FROM_L2MISS
PRESET,PAPI_L3_DCM,DERIVED_ADD,PM_DATA_FROM_LMEM,PM_DATA_FROM_RMEM
PRESET,PAPI_L3_LDM,DERIVED_ADD,PM_DATA_FROM_LMEM,PM_DATA_FROM_RMEM
PRESET,PAPI_L1_ICH,NOT_DERIVED,PM_INST_FROM_L1
PRESET,PAPI_L2_ICM,NOT_DERIVED,PM_INST_FROM_L2MISS
PRESET,PAPI_L2_ICH,NOT_DERIVED,PM_INST_FROM_L2
PRESET,PAPI_L3_ICA,NOT_DERIVED,PM_INST_FROM_L2MISS
PRESET,PAPI_L3_ICH,NOT_DERIVED,PM_INST_FROM_L3
PRESET,PAPI_L3_ICM,DERIVED_ADD,PM_DATA_FROM_LMEM,PM_DATA_FROM_RMEM
PRESET,PAPI_FMA_INS,NOT_DERIVED,PM_FPU_FMA
PRESET,PAPI_TOT_IIS,NOT_DERIVED,PM_INST_DISP
PRESET,PAPI_TOT_INS,NOT_DERIVED,PM_INST_CMPL
PRESET,PAPI_INT_INS,NOT_DERIVED,PM_FXU_FIN
PRESET,PAPI_FP_OPS,DERIVED_ADD,PM_FPU_1FLOP,PM_FPU_FMA,PM_FPU_FMA
PRESET,PAPI_FP_INS,NOT_DERIVED,PM_FPU_FIN
PRESET,PAPI_TOT_CYC,NOT_DERIVED,PM_RUN_CYC
PRESET,PAPI_FDV_INS,NOT_DERIVED,PM_FPU_FDIV
PRESET,PAPI_FSQ_INS,NOT_DERIVED,PM_FPU_FSQRT
PRESET,PAPI_TLB_DM,NOT_DERIVED,PM_DTLB_MISS
PRESET,PAPI_TLB_IM,NOT_DERIVED,PM_ITLB_MISS
PRESET,PAPI_TLB_TL,DERIVED_ADD,PM_DTLB_MISS,PM_ITLB_MISS
PRESET,PAPI_HW_INT,NOT_DERIVED,PM_EXT_INT
PRESET,PAPI_STL_ICY,NOT_DERIVED,PM_0INST_FETCH
PRESET,PAPI_LD_INS,NOT_DERIVED,PM_LD_REF_L1
PRESET,PAPI_SR_INS,NOT_DERIVED,PM_ST_REF_L1
PRESET,PAPI_LST_INS,DERIVED_ADD,PM_ST_REF_L1,PM_LD_REF_L1
PRESET,PAPI_BR_INS,NOT_DERIVED,PM_BR_ISSUED
PRESET,PAPI_BR_MSP,DERIVED_ADD,PM_BR_MPRED_CR,PM_BR_MPRED_TA
PRESET,PAPI_BR_PRC,NOT_DERIVED,PM_BR_PRED_CR_TA
PRESET,PAPI_FXU_IDL,NOT_DERIVED,PM_FXU_IDLE
#
CPU,POWER5+
#
PRESET,PAPI_L1_DCM,DERIVED_ADD,PM_LD_MISS_L1,PM_ST_MISS_L1
PRESET,PAPI_L1_DCA,DERIVED_ADD,PM_LD_REF_L1,PM_ST_REF_L1
PRESET,PAPI_L1_LDM,NOT_DERIVED,PM_LD_MISS_L1
PRESET,PAPI_L1_STM,NOT_DERIVED,PM_ST_MISS_L1
PRESET,PAPI_L1_DCW,NOT_DERIVED,PM_ST_REF_L1
PRESET,PAPI_L1_DCR,NOT_DERIVED,PM_LD_REF_L1
PRESET,PAPI_L2_DCM,NOT_DERIVED,PM_DATA_FROM_L2MISS
PRESET,PAPI_L2_LDM,NOT_DERIVED,PM_DATA_FROM_L2MISS
PRESET,PAPI_L3_DCR,NOT_DERIVED,PM_DATA_FROM_L2MISS
PRESET,PAPI_L3_DCM,DERIVED_ADD,PM_DATA_FROM_LMEM,PM_DATA_FROM_RMEM
PRESET,PAPI_L3_LDM,DERIVED_ADD,PM_DATA_FROM_LMEM,PM_DATA_FROM_RMEM
PRESET,PAPI_L1_ICH,NOT_DERIVED,PM_INST_FROM_L1
PRESET,PAPI_L2_ICM,NOT_DERIVED,PM_INST_FROM_L2MISS
PRESET,PAPI_L2_ICH,NOT_DERIVED,PM_INST_FROM_L2
PRESET,PAPI_L3_ICA,NOT_DERIVED,PM_INST_FROM_L2MISS
PRESET,PAPI_L3_ICH,NOT_DERIVED,PM_INST_FROM_L3
PRESET,PAPI_L3_ICM,DERIVED_ADD,PM_DATA_FROM_LMEM,PM_DATA_FROM_RMEM
PRESET,PAPI_FMA_INS,NOT_DERIVED,PM_FPU_FMA
PRESET,PAPI_TOT_IIS,NOT_DERIVED,PM_INST_DISP
PRESET,PAPI_TOT_INS,NOT_DERIVED,PM_INST_CMPL
PRESET,PAPI_INT_INS,NOT_DERIVED,PM_FXU_FIN
PRESET,PAPI_FP_OPS,DERIVED_POSTFIX,N0|N1|2|*|+|N2|N3|+|4|*|+|,PM_FPU_1FLOP,PM_FPU_FMA,PM_FPU_FSQRT,PM_FPU_FDIV
PRESET,PAPI_FP_INS,NOT_DERIVED,PM_FPU_FIN
PRESET,PAPI_TOT_CYC,NOT_DERIVED,PM_RUN_CYC
PRESET,PAPI_FDV_INS,NOT_DERIVED,PM_FPU_FDIV
PRESET,PAPI_FSQ_INS,NOT_DERIVED,PM_FPU_FSQRT
PRESET,PAPI_TLB_DM,NOT_DERIVED,PM_DTLB_MISS
PRESET,PAPI_TLB_IM,NOT_DERIVED,PM_ITLB_MISS
PRESET,PAPI_TLB_TL,DERIVED_ADD,PM_DTLB_MISS,PM_ITLB_MISS
PRESET,PAPI_HW_INT,NOT_DERIVED,PM_EXT_INT
PRESET,PAPI_STL_ICY,NOT_DERIVED,PM_0INST_FETCH
PRESET,PAPI_LD_INS,NOT_DERIVED,PM_LD_REF_L1
PRESET,PAPI_SR_INS,NOT_DERIVED,PM_ST_REF_L1
PRESET,PAPI_LST_INS,DERIVED_ADD,PM_ST_REF_L1,PM_LD_REF_L1
PRESET,PAPI_BR_INS,NOT_DERIVED,PM_BR_ISSUED
PRESET,PAPI_BR_MSP,DERIVED_ADD,PM_BR_MPRED_CR,PM_BR_MPRED_TA
PRESET,PAPI_BR_PRC,NOT_DERIVED,PM_BR_PRED_CR_TA
PRESET,PAPI_FXU_IDL,NOT_DERIVED,PM_FXU_IDLE
#
CPU,POWER6
CPU,power6
#
PRESET,PAPI_L1_DCM,DERIVED_ADD,PM_LD_MISS_L1,PM_ST_MISS_L1
PRESET,PAPI_L1_DCA,DERIVED_ADD,PM_LD_REF_L1,PM_ST_REF_L1
PRESET,PAPI_L1_LDM,NOT_DERIVED,PM_LD_MISS_L1
PRESET,PAPI_L1_STM,NOT_DERIVED,PM_ST_MISS_L1
PRESET,PAPI_L1_DCW,NOT_DERIVED,PM_ST_REF_L1
PRESET,PAPI_L1_DCR,NOT_DERIVED,PM_LD_REF_L1
PRESET,PAPI_L2_DCM,NOT_DERIVED,PM_DATA_FROM_L2MISS
PRESET,PAPI_L2_LDM,NOT_DERIVED,PM_DATA_FROM_L2MISS
PRESET,PAPI_L3_DCR,NOT_DERIVED,PM_DATA_FROM_L2MISS
PRESET,PAPI_L3_DCM,DERIVED_ADD,PM_DATA_FROM_LMEM,PM_DATA_FROM_RMEM
PRESET,PAPI_L3_LDM,DERIVED_ADD,PM_DATA_FROM_LMEM,PM_DATA_FROM_RMEM
PRESET,PAPI_L1_ICH,NOT_DERIVED,PM_INST_FROM_L1
PRESET,PAPI_L1_ICM,NOT_DERIVED,PM_L1_ICACHE_MISS
PRESET,PAPI_L2_ICM,NOT_DERIVED,PM_INST_FROM_L2MISS
PRESET,PAPI_L2_ICH,NOT_DERIVED,PM_INST_FROM_L2
PRESET,PAPI_L3_ICA,NOT_DERIVED,PM_INST_FROM_L2MISS
PRESET,PAPI_L3_ICH,NOT_DERIVED,PM_INST_FROM_L3
PRESET,PAPI_L3_ICM,NOT_DERIVED,PM_INST_FROM_L3MISS
PRESET,PAPI_FMA_INS,NOT_DERIVED,PM_FPU_FMA
PRESET,PAPI_TOT_IIS,NOT_DERIVED,PM_INST_DISP
PRESET,PAPI_TOT_INS,NOT_DERIVED,PM_INST_CMPL
PRESET,PAPI_INT_INS,DERIVED_ADD,PM_FXU0_FIN,PM_FXU1_FIN
# This definition comes from the (unreleased) IBM PM documentation
PRESET,PAPI_FP_OPS,DERIVED_POSTFIX,N0|3|*|N1|N2|+|+|,PM_FPU_FSQRT_FDIV,PM_FPU_FLOP,PM_FPU_FMA
# The following counts SQRT and DIV as one FP event instead of 4
#PRESET,PAPI_FP_OPS,DERIVED_ADD,PM_FPU_FLOP,PM_FPU_FMA
PRESET,PAPI_FP_INS,NOT_DERIVED,PM_FPU_FIN
# It appears PM_CYC is not widely available
#PRESET,PAPI_TOT_CYC,NOT_DERIVED,PM_CYC
# PM_RUN_CYC is in every group; but it doesn't overflow :(
PRESET,PAPI_TOT_CYC,NOT_DERIVED,PM_RUN_CYC
PRESET,PAPI_HW_INT,NOT_DERIVED,PM_EXT_INT
PRESET,PAPI_STL_ICY,NOT_DERIVED,PM_0INST_FETCH
PRESET,PAPI_LD_INS,NOT_DERIVED,PM_LD_REF_L1
PRESET,PAPI_SR_INS,NOT_DERIVED,PM_ST_REF_L1
PRESET,PAPI_LST_INS,DERIVED_ADD,PM_ST_REF_L1,PM_LD_REF_L1
PRESET,PAPI_BR_INS,NOT_DERIVED,PM_BRU_FIN
PRESET,PAPI_BR_MSP,NOT_DERIVED,PM_BR_MPRED
PRESET,PAPI_BR_PRC,NOT_DERIVED,PM_BR_PRED
PRESET,PAPI_FXU_IDL,NOT_DERIVED,PM_FXU_IDLE
#
CPU,POWER7
CPU,power7
#
PRESET,PAPI_L1_DCM,DERIVED_ADD,PM_LD_MISS_L1,PM_ST_MISS_L1
PRESET,PAPI_L1_LDM,NOT_DERIVED,PM_LD_MISS_L1
PRESET,PAPI_L1_STM,NOT_DERIVED,PM_ST_MISS_L1
PRESET,PAPI_L1_DCW,DERIVED_POSTFIX,N0|N1|-|,PM_ST_FIN,PM_ST_MISS_L1
PRESET,PAPI_L1_DCA,NOT_DERIVED,PM_LSU_FIN
#PRESET,PAPI_L1_DCA,DERIVED_POSTFIX,N0|N1|-|N2|+|,PM_ST_FIN,PM_ST_MISS_L1,PM_LD_REF_L1
PRESET,PAPI_L1_DCR,DERIVED_ADD,PM_LD_REF_L1_LSU0,PM_LD_REF_L1_LSU1
PRESET,PAPI_L2_DCM,NOT_DERIVED,PM_DATA_FROM_L2MISS
PRESET,PAPI_L2_LDM,NOT_DERIVED,PM_L2_LD_MISS
PRESET,PAPI_L2_STM,NOT_DERIVED,PM_L2_ST_MISS
PRESET,PAPI_L3_DCR,NOT_DERIVED,PM_DATA_FROM_L2MISS
PRESET,PAPI_L3_DCM,DERIVED_ADD,PM_DATA_FROM_LMEM,PM_DATA_FROM_RMEM
PRESET,PAPI_L3_LDM,DERIVED_ADD,PM_DATA_FROM_LMEM,PM_DATA_FROM_RMEM
PRESET,PAPI_L1_ICH,NOT_DERIVED,PM_INST_FROM_L1
PRESET,PAPI_L1_ICM,NOT_DERIVED,PM_L1_ICACHE_MISS
PRESET,PAPI_L2_ICM,NOT_DERIVED,PM_L2_INST_MISS
PRESET,PAPI_L2_ICH,NOT_DERIVED,PM_INST_FROM_L2
PRESET,PAPI_L3_ICA,NOT_DERIVED,PM_INST_FROM_L2MISS
PRESET,PAPI_L3_ICH,NOT_DERIVED,PM_INST_FROM_L3
PRESET,PAPI_L3_ICM,NOT_DERIVED,PM_INST_FROM_L3MISS
PRESET,PAPI_FMA_INS,NOT_DERIVED,PM_VSU_FMA
PRESET,PAPI_TOT_IIS,NOT_DERIVED,PM_INST_DISP
PRESET,PAPI_TOT_INS,NOT_DERIVED,PM_INST_CMPL
PRESET,PAPI_INT_INS,DERIVED_ADD,PM_FXU0_FIN,PM_FXU1_FIN
#
# We'd like to do a 1FLOP + 2*2FLOP + 4*4FLOP + 8*8FLOP + 16*16FLOP, but
# we run out of counters (we have 4, but need 5).  So for now, just assume
# that the vast majority of users won't be using the single precision
# vector FDIV and FSQRT instructions that would tick PM_VSU0_16FLOP.
#
#PRESET,PAPI_FP_OPS,DERIVED_POSTFIX,N0|N1|2|*|+|N2|4|*|+|N3|8|*|+|N4|16|*|+|,PM_VSU_1FLOP,PM_VSU_2FLOP,PM_VSU_4FLOP,PM_VSU_8FLOP,PM_VSU0_16FLOP
#
#PRESET,PAPI_FP_OPS,DERIVED_POSTFIX,N0|N1|2|*|+|N2|4|*|+|N3|8|*|+|,PM_VSU_1FLOP,PM_VSU_2FLOP,PM_VSU_4FLOP,PM_VSU_8FLOP
PRESET,PAPI_FP_OPS,NOT_DERIVED,PM_FLOP
PRESET,PAPI_FP_INS,NOT_DERIVED,PM_FLOP
PRESET,PAPI_TOT_CYC,NOT_DERIVED,PM_RUN_CYC
PRESET,PAPI_HW_INT,NOT_DERIVED,PM_EXT_INT
PRESET,PAPI_STL_ICY,DERIVED_POSTFIX,N0|N1|-|,PM_RUN_CYC,PM_1PLUS_PPC_DISP
PRESET,PAPI_SR_INS,NOT_DERIVED,PM_ST_FIN
PRESET,PAPI_LD_INS,DERIVED_ADD,PM_LD_REF_L1,PM_LD_MISS_L1
PRESET,PAPI_LST_INS,NOT_DERIVED,PM_LSU_FIN
#PRESET,PAPI_LST_INS,DERIVED_ADD,PM_LD_REF_L1,PM_LD_MISS_L1,PM_ST_FIN
PRESET,PAPI_BR_INS,NOT_DERIVED,PM_BRU_FIN
PRESET,PAPI_BR_MSP,NOT_DERIVED,PM_BR_MPRED
PRESET,PAPI_BR_PRC,NOT_DERIVED,PM_BR_PRED
PRESET,PAPI_FXU_IDL,NOT_DERIVED,PM_FXU_IDLE
#
CPU,ultra12
#
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CYCLE_CNT
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTR_CNT
PRESET,PAPI_L1_ICM,NOT_DERIVED,DISPATCH0_IC_MISS
PRESET,PAPI_L1_ICA,NOT_DERIVED,IC_REF
PRESET,PAPI_L1_DCR,NOT_DERIVED,DC_RD
PRESET,PAPI_L1_DCW,NOT_DERIVED,DC_WR
PRESET,PAPI_MEM_RCY,NOT_DERIVED,LOAD_USE
PRESET,PAPI_L2_TCA,NOT_DERIVED,EC_REF
PRESET,PAPI_BR_MSP,NOT_DERIVED,DISPATCH0_MISPRED
PRESET,PAPI_L1_ICH,NOT_DERIVED,IC_HIT
PRESET,PAPI_L2_TCH,NOT_DERIVED,EC_HIT
PRESET,PAPI_L2_TCM,DERIVED_SUB,EC_REF,EC_HIT
#
CPU,ultra3
CPU,ultra3i
CPU,ultra3+
#
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CYCLE_CNT
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTR_CNT
PRESET,PAPI_L1_ICM,NOT_DERIVED,DISPATCH0_IC_MISS
PRESET,PAPI_L1_ICA,NOT_DERIVED,IC_REF
PRESET,PAPI_L1_DCR,NOT_DERIVED,DC_RD
PRESET,PAPI_L1_DCW,NOT_DERIVED,DC_WR
PRESET,PAPI_L2_TCA,NOT_DERIVED,EC_REF
PRESET,PAPI_BR_TKN,NOT_DERIVED,IU_STAT_BR_COUNT_TAKEN
PRESET,PAPI_BR_NTK,NOT_DERIVED,IU_STAT_BR_COUNT_UNTAKEN
PRESET,PAPI_BR_MSP,DERIVED_ADD,IU_STAT_BR_MISS_TAKEN,IU_STAT_BR_MISS_UNTAKEN
PRESET,PAPI_BR_INS,DERIVED_ADD,IU_STAT_BR_COUNT_TAKEN,IU_STAT_BR_COUNT_UNTAKEN
PRESET,PAPI_L2_TCM,NOT_DERIVED,EC_MISSES
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB_MISS
PRESET,PAPI_TLB_DM,NOT_DERIVED,DTLB_MISS
#
CPU,ultra4+
#
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CYCLE_CNT
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTR_CNT
PRESET,PAPI_L1_ICM,NOT_DERIVED,DISPATCH0_IC_MISS
PRESET,PAPI_L1_ICA,NOT_DERIVED,IC_REF
PRESET,PAPI_L1_DCR,NOT_DERIVED,DC_RD
PRESET,PAPI_L1_DCW,NOT_DERIVED,DC_WR
PRESET,PAPI_L2_TCA,NOT_DERIVED,L2_REF
PRESET,PAPI_BR_TKN,NOT_DERIVED,IU_STAT_BR_COUNT_TAKEN
PRESET,PAPI_BR_NTK,NOT_DERIVED,IU_STAT_BR_COUNT_UNTAKEN
PRESET,PAPI_BR_MSP,DERIVED_ADD,IU_STAT_BR_MISS_TAKEN,IU_STAT_BR_MISS_UNTAKEN
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB_MISS
PRESET,PAPI_TLB_DM,NOT_DERIVED,DTLB_MISS
PRESET,PAPI_L3_TCM,NOT_DERIVED,L3_MISS
#
CPU,niagara
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTR_CNT
PRESET,PAPI_FP_INS,NOT_DERIVED,FP_INSTR_CNT
PRESET,PAPI_L1_ICM,NOT_DERIVED,IC_MISS
PRESET,PAPI_L1_DCM,NOT_DERIVED,DC_MISS
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB_MISS
PRESET,PAPI_TLB_DM,NOT_DERIVED,DTLB_MISS
#
CPU,niagara2
#
CPU,Cell
#
PRESET,PAPI_TOT_INS,DERIVED_POSTFIX,N0|N1|+|2|*|,PPC_INST_COMMIT_TH0,PPC_INST_COMMIT_TH1
#PRESET,PAPI_L1_DCM,DERIVED_ADD,L1_DCACHE_MISS_TH0,L1_DCACHE_MISS_TH1 where's TH1??
PRESET,PAPI_L1_DCM,NOT_DERIVED,L1_DCACHE_MISS_TH0
PRESET,PAPI_L2_TCH,NOT_DERIVED,L2_CACHE_HIT
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_CACHE_MISS
PRESET,PAPI_L2_LDM,NOT_DERIVED,L2_LD_MISS
PRESET,PAPI_L2_STM,NOT_DERIVED,L2_ST_MISS
PRESET,PAPI_BR_MSP,DERIVED_ADD,BRANCH_FLUSH_TH0,BRANCH_FLUSH_TH1
PRESET,PAPI_BR_INS,DERIVED_ADD,BRANCH_COMMIT_TH0,BRANCH_COMMIT_TH1
#
CPU,arm_ac8
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTR_EXECUTED
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CYCLES
PRESET,PAPI_BR_INS,NOT_DERIVED,PC_WRITE
PRESET,PAPI_BR_MSP,NOT_DERIVED,PC_BRANCH_MIS_PRED
PRESET,PAPI_LD_INS,NOT_DERIVED,DREAD
PRESET,PAPI_SR_INS,NOT_DERIVED,DWRITE
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB_MISS
PRESET,PAPI_TLB_DM,NOT_DERIVED,DTLB_REFILL
PRESET,PAPI_L1_DCA,NOT_DERIVED,DCACHE_ACCESS
PRESET,PAPI_L1_DCM,NOT_DERIVED,DCACHE_REFILL
PRESET,PAPI_L1_ICA,NOT_DERIVED,L1_INST
PRESET,PAPI_L1_ICM,NOT_DERIVED,IFETCH_MISS
PRESET,PAPI_L2_TCA,NOT_DERIVED,L2_ACCESS
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_CACHE_MISS
PRESET,PAPI_BR_TKN,NOT_DERIVED,PC_BRANCH_EXECUTED
PRESET,PAPI_STL_ICY,NOT_DERIVED,CYCLES_INST_STALL
#
CPU,arm_ac9
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,INST_OUT_OF_RENAME_STAGE
PRESET,PAPI_TOT_IIS,NOT_DERIVED,MAIN_UNIT_EXECUTED_INST
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CYCLES
PRESET,PAPI_HW_INT,NOT_DERIVED,EXT_INTERRUPTS
PRESET,PAPI_FP_INS,NOT_DERIVED,FP_EXECUTED_INST
PRESET,PAPI_VEC_INS,NOT_DERIVED,NEON_EXECUTED_INST
PRESET,PAPI_BR_INS,NOT_DERIVED,PC_WRITE
PRESET,PAPI_BR_MSP,NOT_DERIVED,PC_BRANCH_MIS_PRED
PRESET,PAPI_LD_INS,NOT_DERIVED,DREAD
PRESET,PAPI_SR_INS,NOT_DERIVED,DWRITE
PRESET,PAPI_TLB_IM,NOT_DERIVED,ITLB_MISS
PRESET,PAPI_TLB_DM,NOT_DERIVED,DTLB_REFILL
PRESET,PAPI_L1_DCA,NOT_DERIVED,DCACHE_ACCESS
PRESET,PAPI_L1_DCM,NOT_DERIVED,DCACHE_REFILL
PRESET,PAPI_L1_ICM,NOT_DERIVED,IFETCH_MISS
#
CPU,arm_ac15
#
PRESET,PAPI_TOT_INS,NOT_DERIVED,INST_RETIRED
PRESET,PAPI_TOT_IIS,NOT_DERIVED,INST_SPEC_EXEC
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CYCLES
PRESET,PAPI_FP_INS,NOT_DERIVED,INST_SPEC_EXEC_VFP
PRESET,PAPI_VEC_INS,NOT_DERIVED,INST_SPEC_EXEC_SIMD
PRESET,PAPI_BR_INS,NOT_DERIVED,INST_SPEC_EXEC_SOFT_PC
PRESET,PAPI_BR_MSP,NOT_DERIVED,BRANCH_MISPRED
PRESET,PAPI_LD_INS,NOT_DERIVED,DATA_MEM_READ_ACCESS
PRESET,PAPI_SR_INS,NOT_DERIVED,DATA_MEM_WRITE_ACCESS
PRESET,PAPI_L1_DCA,DERIVED_ADD,L1D_READ_ACCESS,L1D_WRITE_ACCESS
PRESET,PAPI_L1_DCM,DERIVED_ADD,L1D_READ_REFILL,L1D_WRITE_REFILL
PRESET,PAPI_L1_DCR,NOT_DERIVED,L1D_READ_ACCESS
PRESET,PAPI_L1_DCW,NOT_DERIVED,L1D_WRITE_ACCESS
PRESET,PAPI_L1_ICA,NOT_DERIVED,L1I_CACHE_ACCESS
PRESET,PAPI_L1_ICM,NOT_DERIVED,L1I_CACHE_REFILL
PRESET,PAPI_L2_DCH,NOT_DERIVED,L2D_CACHE_ACCESS
PRESET,PAPI_L2_DCM,NOT_DERIVED,L2D_CACHE_REFILL
PRESET,PAPI_L2_DCR,NOT_DERIVED,L2D_READ_ACCESS
PRESET,PAPI_L2_DCW,NOT_DERIVED,L2D_WRITE_ACCESS
PRESET,PAPI_L2_LDM,NOT_DERIVED,L2D_READ_REFILL
PRESET,PAPI_L2_STM,NOT_DERIVED,L2D_WRITE_REFILL
#
CPU,mips_74k
#
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CYCLES
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTRUCTIONS
PRESET,PAPI_L1_ICA,NOT_DERIVED,ICACHE_ACCESSES
PRESET,PAPI_L1_ICM,NOT_DERIVED,ICACHE_MISSES
PRESET,PAPI_L1_DCA,NOT_DERIVED,DCACHE_ACCESSES
PRESET,PAPI_L1_DCM,NOT_DERIVED,DCACHE_MISSES
PRESET,PAPI_L1_TCA,DERIVED_ADD,DCACHE_ACCESSES,ICACHE_ACCESSES
PRESET,PAPI_L1_TCM,DERIVED_ADD,ICACHE_MISSES,DCACHE_MISSES
PRESET,PAPI_L2_TCA,NOT_DERIVED,L2_CACHE_ACCESSES
PRESET,PAPI_L2_TCM,NOT_DERIVED,L2_CACHE_MISSES
PRESET,PAPI_FP_INS,NOT_DERIVED,FPU_INSNS
PRESET,PAPI_INT_INS,NOT_DERIVED,INTEGER_INSNS
PRESET,PAPI_LD_INS,NOT_DERIVED,LOAD_INSNS
PRESET,PAPI_SR_INS,NOT_DERIVED,STORE_INSNS
PRESET,PAPI_TLB_IM,NOT_DERIVED,JTLB_INSN_MISSES
PRESET,PAPI_TLB_DM,NOT_DERIVED,JTLB_DATA_MISSES
PRESET,PAPI_BR_CN,NOT_DERIVED,COND_BRANCH_INSNS
PRESET,PAPI_BR_MSP,NOT_DERIVED,MISPREDICTED_BRANCH_INSNS
PRESET,PAPI_CSR_FAL,NOT_DERIVED,FAILED_SC_INSNS
PRESET,PAPI_CSR_TOT,NOT_DERIVED,SC_INSNS
PRESET,PAPI_FUL_ICY,NOT_DERIVED,DUAL_ISSUE_CYCLES
PRESET,PAPI_STL_CCY,NOT_DERIVED,NO_INSN_CYCLES
PRESET,PAPI_FUL_CCY,NOT_DERIVED,TWO_INSNS_CYCLES
#
CPU,MIPSICE9A
#
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CYCLES
PRESET,PAPI_TOT_INS,NOT_DERIVED,CPU_INSEXEC
PRESET,PAPI_L1_ICA,NOT_DERIVED,CPU_INSFETCH
PRESET,PAPI_LD_INS,NOT_DERIVED,CPU_LOAD
PRESET,PAPI_SR_INS,NOT_DERIVED,CPU_STORE
PRESET,PAPI_CSR_FAL,NOT_DERIVED,CPU_SCFAIL
PRESET,PAPI_CSR_TOT,NOT_DERIVED,CPU_SC
PRESET,PAPI_FP_INS,NOT_DERIVED,CPU_FLOAT
PRESET,PAPI_BR_INS,NOT_DERIVED,CPU_BRANCH
PRESET,PAPI_TLB_IM,NOT_DERIVED,CPU_ITLBMISS
PRESET,PAPI_TLB_TL,NOT_DERIVED,CPU_TLBTRAP
PRESET,PAPI_TLB_DM,NOT_DERIVED,CPU_DTLBMISS
PRESET,PAPI_BR_MSP,NOT_DERIVED,CPU_MISPRED
PRESET,PAPI_L1_ICM,NOT_DERIVED,CPU_ICMISS
PRESET,PAPI_L1_DCM,NOT_DERIVED,CPU_DCMISS
PRESET,PAPI_MEM_SCY,NOT_DERIVED,CPU_MSTALL
PRESET,PAPI_FUL_ICY,NOT_DERIVED,CPU_INSDUAL
#
CPU,MIPSICE9B
#
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CYCLES
PRESET,PAPI_TOT_INS,NOT_DERIVED,CPU_INSEXEC
PRESET,PAPI_L1_ICA,NOT_DERIVED,CPU_INSFETCH
PRESET,PAPI_LD_INS,NOT_DERIVED,CPU_LOAD
PRESET,PAPI_SR_INS,NOT_DERIVED,CPU_STORE
PRESET,PAPI_CSR_FAL,NOT_DERIVED,CPU_SCFAIL
PRESET,PAPI_CSR_TOT,NOT_DERIVED,CPU_SC
PRESET,PAPI_FP_INS,NOT_DERIVED,CPU_FPARITH
PRESET,PAPI_BR_INS,NOT_DERIVED,CPU_BRANCH
PRESET,PAPI_TLB_IM,NOT_DERIVED,CPU_ITLBMISS
PRESET,PAPI_TLB_TL,NOT_DERIVED,CPU_TLBTRAP
PRESET,PAPI_TLB_DM,NOT_DERIVED,CPU_DTLBMISS
PRESET,PAPI_BR_MSP,NOT_DERIVED,CPU_MISPRED
PRESET,PAPI_L1_ICM,NOT_DERIVED,CPU_ICMISS
PRESET,PAPI_L1_DCM,NOT_DERIVED,CPU_DCMISS
PRESET,PAPI_MEM_SCY,NOT_DERIVED,CPU_MSTALL
PRESET,PAPI_FUL_ICY,NOT_DERIVED,CPU_INSDUAL
PRESET,PAPI_L2_TCM,NOT_DERIVED,CPU_L2MISSALL
PRESET,PAPI_L2_TCA,NOT_DERIVED,CPU_L2REQ
#
CPU,BGQ
#
# Conditional Branching
PRESET,PAPI_BR_CN,NOT_DERIVED,PEVT_INST_XU_BRC
PRESET,PAPI_BR_INS,NOT_DERIVED,PEVT_XU_BR_COMMIT
PRESET,PAPI_BR_MSP,NOT_DERIVED,PEVT_XU_BR_MISPRED_COMMIT
PRESET,PAPI_BR_NTK,DERIVED_POSTFIX,N0|N1|-|N2|-|,PEVT_INST_XU_BRC,PEVT_XU_BR_TAKEN_COMMIT,PEVT_INST_XU_BRU
#PRESET,PAPI_BR_NTK,DERIVED_SUB,PEVT_INST_XU_BRC,PEVT_XU_BR_TAKEN_COMMIT # Not sure if branches_taken includes unconditional branches as well
PRESET,PAPI_BR_PRC,DERIVED_SUB,PEVT_INST_XU_BRC,PEVT_XU_BR_MISPRED_COMMIT
PRESET,PAPI_BR_TKN,DERIVED_SUB,PEVT_XU_BR_TAKEN_COMMIT,PEVT_INST_XU_BRU
#PRESET,PAPI_BR_TKN,NOT_DERIVED,PEVT_XU_BR_TAKEN_COMMIT # Not sure if branches_taken includes unconditional branches as well
PRESET,PAPI_BR_UCN,NOT_DERIVED,PEVT_INST_XU_BRU
PRESET,PAPI_BTAC_M,NOT_DERIVED,PEVT_XU_BR_TARG_ADDR_MISPRED_COMMIT
#
# Cache Requests
# none so far
#
# Conditional Store
PRESET,PAPI_CSR_FAL,NOT_DERIVED,PEVT_XU_STCX_FAIL
PRESET,PAPI_CSR_SUC,DERIVED_SUB,PEVT_LSU_COMMIT_STCX,PEVT_XU_STCX_FAIL
PRESET,PAPI_CSR_TOT,NOT_DERIVED,PEVT_LSU_COMMIT_STCX
#
# Floating Point Operations
PRESET,PAPI_FAD_INS,DERIVED_ADD,PEVT_INST_QFPU_FADD,PEVT_INST_QFPU_QADD
PRESET,PAPI_FDV_INS,NOT_DERIVED,PEVT_INST_QFPU_FDIV
PRESET,PAPI_FMA_INS,DERIVED_ADD,PEVT_INST_QFPU_FMA,PEVT_INST_QFPU_QMA
PRESET,PAPI_FML_INS,DERIVED_ADD,PEVT_INST_QFPU_FMUL,PEVT_INST_QFPU_QMUL
PRESET,PAPI_FP_INS,NOT_DERIVED,PEVT_INST_QFPU_ALL
# TODO: for PAPI_FP_OPS it's either FPGRP1 or FPGRP2. Needs to be tested
PRESET,PAPI_FP_OPS,NOT_DERIVED,PEVT_INST_QFPU_FPGRP1
# PRESET,PAPI_FP_OPS,NOT_DERIVED,PEVT_INST_QFPU_FPGRP2
PRESET,PAPI_FP_STAL,NOT_DERIVED,PEVT_IU_AXU_FXU_DEP_HIT_CYC
PRESET,PAPI_FSQ_INS,NOT_DERIVED,PEVT_INST_QFPU_FSQ
#
# Instruction Counting
#PRESET,PAPI_FUL_ICY,NOT_DERIVED,PEVT_IU_TWO_INSTR_ISSUE
PRESET,PAPI_FXU_IDL,NOT_DERIVED,PEVT_AXU_IDLE
PRESET,PAPI_HW_INT,NOT_DERIVED,PEVT_XU_INTS_TAKEN
PRESET,PAPI_INT_INS,NOT_DERIVED,PEVT_INST_XU_GRP_MASK:837800,NOTE,'UPC_P_XU_OGRP_IADD|UPC_P_XU_OGRP_IMUL|UPC_P_XU_OGRP_IDIV|UPC_P_XU_OGRP_ICMP|UPC_P_XU_OGRP_IMOV|UPC_P_XU_OGRP_ILOG|UPC_P_XU_OGRP_BITS'
PRESET,PAPI_TOT_CYC,NOT_DERIVED,PEVT_CYCLES
PRESET,PAPI_TOT_IIS,NOT_DERIVED,PEVT_IU_TOT_ISSUE_COUNT
PRESET,PAPI_TOT_INS,NOT_DERIVED,PEVT_INST_ALL
PRESET,PAPI_VEC_INS,DERIVED_ADD,PEVT_INST_QFPU_GRP_MASK:3FE,PEVT_INST_XU_GRP_MASK:3000000,NOTE,'UPC_P_AXU_OGRP_QADD|UPC_P_AXU_OGRP_QCMP|UPC_P_AXU_OGRP_QCVT|UPC_P_AXU_OGRP_QMA|UPC_P_AXU_OGRP_QMOV|UPC_P_AXU_OGRP_QMUL|UPC_P_AXU_OGRP_QOTH|UPC_P_AXU_OGRP_QRES|UPC_P_AXU_OGRP_QRND + UPC_P_XU_OGRP_QLD|UPC_P_XU_OGRP_QST'
#
# Cache Access
PRESET,PAPI_L1_DCM,DERIVED_ADD,PEVT_LSU_COMMIT_LD_MISSES,PEVT_LSU_COMMIT_ST_MISSES
PRESET,PAPI_L1_DCR,NOT_DERIVED,PEVT_LSU_COMMIT_CACHEABLE_LDS
PRESET,PAPI_L1_DCW,NOT_DERIVED,PEVT_LSU_COMMIT_STS
PRESET,PAPI_L1_ICM,NOT_DERIVED,PEVT_IU_IL1_MISS
PRESET,PAPI_L1_ICR,NOT_DERIVED,PEVT_IU_ICACHE_FETCH
PRESET,PAPI_L1_LDM,DERIVED_ADD,PEVT_IU_IL1_MISS,PEVT_LSU_COMMIT_LD_MISSES
PRESET,PAPI_L1_STM,NOT_DERIVED,PEVT_LSU_COMMIT_ST_MISSES
#PRESET,PAPI_L2_TCH,NOT_DERIVED,PEVT_L2_HITS
#PRESET,PAPI_L2_TCM,NOT_DERIVED,PEVT_L2_MISSES
#
# Data Access
PRESET,PAPI_LD_INS,DERIVED_ADD,PEVT_LSU_COMMIT_CACHEABLE_LDS,PEVT_LSU_COMMIT_CACHE_INHIB_LD_MISSES
# may not be possible
#PRESET,PAPI_LST_INS,DERIVED_POSTFIX,N0|N1|+|N2|+|,PEVT_LSU_COMMIT_CACHEABLE_LDS,PEVT_LSU_COMMIT_CACHE_INHIB_LD_MISSES,PEVT_LSU_COMMIT_STS
#PRESET,PAPI_MEM_RCY,NOT_DERIVED,PEVT_IU_RAW_DEP_HIT_CYC
#PRESET,PAPI_PRF_DM,NOT_DERIVED,PEVT_LSU_COMMIT_DCBT_MISSES
PRESET,PAPI_RES_STL,NOT_DERIVED,PEVT_IU_IS1_STALL_CYC
PRESET,PAPI_SR_INS,NOT_DERIVED,PEVT_LSU_COMMIT_STS
PRESET,PAPI_STL_CCY,DERIVED_SUB,PEVT_CYCLES,PEVT_INST_ALL
PRESET,PAPI_STL_ICY,DERIVED_SUB,PEVT_CYCLES,PEVT_IU_TOT_ISSUE_COUNT
PRESET,PAPI_SYC_INS,NOT_DERIVED,PEVT_INST_XU_SYNC
#
# TLB Operations
PRESET,PAPI_TLB_DM,DERIVED_ADD,PEVT_MMU_TLB_MISS_DIRECT_DERAT,PEVT_MMU_TLB_MISS_INDIR_DERAT
PRESET,PAPI_TLB_IM,NOT_DERIVED,PEVT_MMU_TLB_MISS_DIRECT_DERAT
PRESET,PAPI_TLB_SD,NOT_DERIVED,PEVT_MMU_TLBIVAX_SNOOP_TOT
PRESET,PAPI_TLB_TL,DERIVED_POSTFIX,N0|N1|+|N2|+|,PEVT_MMU_TLB_MISS_DIRECT_DERAT,PEVT_MMU_TLB_MISS_INDIR_DERAT,PEVT_MMU_TLB_MISS_DIRECT_IERAT

#################################
# Intel MIC / Xeon-Phi / Knights Corner
CPU,knc
#
PRESET,PAPI_BR_INS,NOT_DERIVED,BRANCHES
PRESET,PAPI_BR_MSP,NOT_DERIVED,BRANCHES_MISPREDICTED
PRESET,PAPI_L1_ICM,NOT_DERIVED,CODE_CACHE_MISS
PRESET,PAPI_TLB_IM,NOT_DERIVED,CODE_PAGE_WALK
PRESET,PAPI_L1_ICA,NOT_DERIVED,CODE_READ
PRESET,PAPI_TOT_CYC,NOT_DERIVED,CPU_CLK_UNHALTED
PRESET,PAPI_TLB_DM,NOT_DERIVED,DATA_PAGE_WALK
PRESET,PAPI_LD_INS,NOT_DERIVED,DATA_READ
PRESET,PAPI_SR_INS,NOT_DERIVED,DATA_WRITE
PRESET,PAPI_L1_DCM,NOT_DERIVED,DATA_READ_MISS_OR_WRITE_MISS
PRESET,PAPI_L1_DCA,NOT_DERIVED,DATA_READ_OR_WRITE
PRESET,PAPI_TOT_INS,NOT_DERIVED,INSTRUCTIONS_EXECUTED
PRESET,PAPI_L2_LDM,NOT_DERIVED,L2_READ_MISS
PRESET,PAPI_VEC_INS,NOT_DERIVED,VPU_INSTRUCTIONS_EXECUTED

CPU,BGP
# The following PAPI presets are accurate for all application nodes
# using SMP processing for zero or one threads.  The appropriate native
# hardware counters mapped to the following PAPI preset counters are
# only collected for processors 0 and 1 for each physical compute card.
# The values are correct for other processing mode/thread combinations,
# but only for those application nodes running on processor 0 or 1 of
# a given physical compute card.
PRESET,PAPI_L1_DCM,DERIVED_ADD,PNE_BGP_PU0_DCACHE_MISS,PNE_BGP_PU1_DCACHE_MISS
PRESET,PAPI_L1_ICM,DERIVED_ADD,PNE_BGP_PU0_ICACHE_MISS,PNE_BGP_PU1_ICACHE_MISS
PRESET,PAPI_L1_TCM,DERIVED_ADD,PNE_BGP_PU0_DCACHE_MISS,PNE_BGP_PU1_DCACHE_MISS,PNE_BGP_PU0_ICACHE_MISS,PNE_BGP_PU1_ICACHE_MISS
PRESET,PAPI_CA_SNP,DERIVED_ADD,PNE_BGP_PU0_L1_INVALIDATION_REQUESTS,PNE_BGP_PU1_L1_INVALIDATION_REQUESTS
PRESET,PAPI_PRF_DM,DERIVED_ADD,NE_BGP_PU0_ICACHE_MISS,PNE_BGP_PU1_ICACHE_MISS
PRESET,PAPI_FMA_INS,DERIVED_ADD,PNE_BGP_PU0_FPU_FMA_2,PNE_BGP_PU1_FPU_FMA_2,PNE_BGP_PU0_FPU_FMA_4,PNE_BGP_PU1_FPU_FMA_4
PRESET,PAPI_FP_INS,DERIVED_ADD,PNE_BGP_PU0_FPU_ADD_SUB_1,PNE_BGP_PU1_FPU_ADD_SUB_1,PNE_BGP_PU0_FPU_MULT_1,PNE_BGP_PU1_FPU_MULT_1,PNE_BGP_PU0_FPU_FMA_2,PNE_BGP_PU1_FPU_FMA_2,PNE_BGP_PU0_FPU_DIV_1,PNE_BGP_PU1_FPU_DIV_1,PNE_BGP_PU0_FPU_OTHER_NON_STORAGE_OPS,PNE_BGP_PU1_FPU_OTHER_NON_STORAGE_OPS,PNE_BGP_PU0_FPU_ADD_SUB_2,PNE_BGP_PU1_FPU_ADD_SUB_2,PNE_BGP_PU0_FPU_MULT_2,PNE_BGP_PU1_FPU_MULT_2,PNE_BGP_PU0_FPU_FMA_4,PNE_BGP_PU1_FPU_FMA_4,PNE_BGP_PU0_FPU_DUAL_PIPE_OTHER_NON_STORAGE_OPS,PNE_BGP_PU1_FPU_DUAL_PIPE_OTHER_NON_STORAGE_OPS
PRESET,PAPI_LD_INS,DERIVED_ADD,PNE_BGP_PU0_DATA_LOADS,PNE_BGP_PU1_DATA_LOADS
PRESET,PAPI_SR_INS,DERIVED_ADD,PNE_BGP_PU0_DATA_STORES,PNE_BGP_PU1_DATA_STORES
PRESET,PAPI_LST_INS,DERIVED_ADD,PNE_BGP_PU0_DATA_LOADS,PNE_BGP_PU1_DATA_LOADS,PNE_BGP_PU0_DATA_STORES,PNE_BGP_PU1_DATA_STORES
PRESET,PAPI_L1_DCH,DERIVED_ADD,PNE_BGP_PU0_DCACHE_HIT,PNE_BGP_PU1_DCACHE_HIT
PRESET,PAPI_L1_DCA,DERIVED_ADD,PNE_BGP_PU0_DCACHE_HIT,PNE_BGP_PU1_DCACHE_HIT,PNE_BGP_PU0_DCACHE_MISS,PNE_BGP_PU1_DCACHE_MISS
PRESET,PAPI_L1_DCR,DERIVED_ADD,PNE_BGP_PU0_DATA_LOADS,PNE_BGP_PU1_DATA_LOADS
PRESET,PAPI_L1_ICH,DERIVED_ADD,PNE_BGP_PU0_ICACHE_HIT,PNE_BGP_PU1_ICACHE_HIT
PRESET,PAPI_L1_ICA,DERIVED_ADD,PNE_BGP_PU0_ICACHE_HIT,PNE_BGP_PU1_ICACHE_HIT,PNE_BGP_PU0_ICACHE_MISS,PNE_BGP_PU1_ICACHE_MISS
PRESET,PAPI_L1_ICR,DERIVED_ADD,PNE_BGP_PU0_ICACHE_HIT,PNE_BGP_PU1_ICACHE_HIT,PNE_BGP_PU0_ICACHE_MISS,PNE_BGP_PU1_ICACHE_MISS
PRESET,PAPI_L1_ICW,DERIVED_ADD,PNE_BGP_PU0_ICACHE_LINEFILLINPROG,PNE_BGP_PU1_ICACHE_LINEFILLINPROG
PRESET,PAPI_L1_TCH, DERIVED_ADD,PNE_BGP_PU0_DCACHE_HIT,PNE_BGP_PU1_DCACHE_HIT,PNE_BGP_PU0_ICACHE_HIT,PNE_BGP_PU1_ICACHE_HIT,
PRESET,PAPI_L1_TCA,DERIVED_ADD,PNE_BGP_PU0_DCACHE_HIT,PNE_BGP_PU1_DCACHE_HIT,PNE_BGP_PU0_ICACHE_HIT,PNE_BGP_PU1_ICACHE_HIT,PNE_BGP_PU0_DCACHE_MISS,PNE_BGP_PU1_DCACHE_MISS,PNE_BGP_PU0_ICACHE_MISS,PNE_BGP_PU1_ICACHE_MISS,PNE_BGP_PU0_DCACHE_LINEFILLINPROG,PNE_BGP_PU1_DCACHE_LINEFILLINPROG
PRESET,PAPI_L1_TCR,DERIVED_ADD,PNE_BGP_PU0_DCACHE_HIT,PNE_BGP_PU1_DCACHE_HIT,PNE_BGP_PU0_ICACHE_HIT,PNE_BGP_PU1_ICACHE_HIT,PNE_BGP_PU0_DCACHE_MISS,PNE_BGP_PU1_DCACHE_MISS,PNE_BGP_PU0_ICACHE_MISS,PNE_BGP_PU1_ICACHE_MISS
PRESET,PAPI_L1_TCW,DERIVED_ADD,PNE_BGP_PU0_DCACHE_LINEFILLINPROG,PNE_BGP_PU1_DCACHE_LINEFILLINPROG,PNE_BGP_PU0_ICACHE_LINEFILLINPROG,PNE_BGP_PU1_ICACHE_LINEFILLINPROG
PRESET,PAPI_FP_OPS,DERIVED_POSTFIX,N0|N1|+|N2|+|N3|+|N4|2|*|+|N5|2|*|+|N6|13|*|+|N7|13|*|+|N8|+|N9|+|N10|2|*|+|N11|2|*|+|N12|2|*|+|N13|2|*|+|N14|4|*|+|N15|4|*|+|N16|2|*|+|N17|2|*|+|,PNE_BGP_PU0_FPU_ADD_SUB_1,PNE_BGP_PU1_FPU_ADD_SUB_1,PNE_BGP_PU0_FPU_MULT_1,PNE_BGP_PU1_FPU_MULT_1,PNE_BGP_PU0_FPU_FMA_2,PNE_BGP_PU1_FPU_FMA_2,PNE_BGP_PU0_FPU_DIV_1,PNE_BGP_PU1_FPU_DIV_1,PNE_BGP_PU0_FPU_OTHER_NON_STORAGE_OPS,PNE_BGP_PU1_FPU_OTHER_NON_STORAGE_OPS,PNE_BGP_PU0_FPU_ADD_SUB_2,PNE_BGP_PU1_FPU_ADD_SUB_2,PNE_BGP_PU0_FPU_MULT_2,PNE_BGP_PU1_FPU_MULT_2,PNE_BGP_PU0_FPU_FMA_4,PNE_BGP_PU1_FPU_FMA_4,PNE_BGP_PU0_FPU_DUAL_PIPE_OTHER_NON_STORAGE_OPS,PNE_BGP_PU1_FPU_DUAL_PIPE_OTHER_NON_STORAGE_OPS
# The following PAPI presets are accurate for any processing mode of 
# SMP, DUAL, or VN for all application nodes.  The appropriate native 
# hardware counters used for the following PAPI preset counters are
# collected for all four processors for each physical compute card.
PRESET,PAPI_L2_DCM,DERIVED_POSTFIX,N0|N1|+|N2|+|N3|+|N4|-|N5|-|N6|-|N7|-|,PNE_BGP_PU0_L2_PREFETCHABLE_REQUESTS,PNE_BGP_PU1_L2_PREFETCHABLE_REQUESTS,PNE_BGP_PU2_L2_PREFETCHABLE_REQUESTS,PNE_BGP_PU3_L2_PREFETCHABLE_REQUESTS,PNE_BGP_PU0_L2_PREFETCH_HITS_IN_STREAM,PNE_BGP_PU1_L2_PREFETCH_HITS_IN_STREAM,PNE_BGP_PU2_L2_PREFETCH_HITS_IN_STREAM,PNE_BGP_PU3_L2_PREFETCH_HITS_IN_STREAM
PRESET,PAPI_L3_LDM,DERIVED_ADD,PNE_BGP_L3_M0_RD0_DIR0_MISS_OR_LOCKDOWN,PNE_BGP_L3_M0_RD0_DIR1_MISS_OR_LOCKDOWN,PNE_BGP_L3_M1_RD0_DIR0_MISS_OR_LOCKDOWN,PNE_BGP_L3_M1_RD0_DIR1_MISS_OR_LOCKDOWN,PNE_BGP_L3_M0_RD1_DIR0_MISS_OR_LOCKDOWN,PNE_BGP_L3_M0_RD1_DIR1_MISS_OR_LOCKDOWN,PNE_BGP_L3_M1_RD1_DIR0_MISS_OR_LOCKDOWN,PNE_BGP_L3_M1_RD1_DIR1_MISS_OR_LOCKDOWN,PNE_BGP_L3_M0_R2_DIR0_MISS_OR_LOCKDOWN,PNE_BGP_L3_M0_R2_DIR1_MISS_OR_LOCKDOWN,PNE_BGP_L3_M1_R2_DIR0_MISS_OR_LOCKDOWN,PNE_BGP_L3_M1_R2_DIR1_MISS_OR_LOCKDOWN
# NOTE:  This value is for the time the counters are active,
# and not for the total cycles for the job.
PRESET,PAPI_TOT_CYC,NOT_DERIVED,PNE_BGP_MISC_ELAPSED_TIME
PRESET,PAPI_L2_DCH,DERIVED_ADD,PNE_BGP_PU0_L2_PREFETCH_HITS_IN_STREAM,PNE_BGP_PU1_L2_PREFETCH_HITS_IN_STREAM,PNE_BGP_PU2_L2_PREFETCH_HITS_IN_STREAM,PNE_BGP_PU3_L2_PREFETCH_HITS_IN_STREAM
PRESET,PAPI_L2_DCA,DERIVED_ADD,PNE_BGP_PU0_L2_PREFETCHABLE_REQUESTS,PNE_BGP_PU1_L2_PREFETCHABLE_REQUESTS,PNE_BGP_PU2_L2_PREFETCHABLE_REQUESTS,PNE_BGP_PU3_L2_PREFETCHABLE_REQUESTS,PNE_BGP_PU0_L2_MEMORY_WRITES,PNE_BGP_PU1_L2_MEMORY_WRITES,PNE_BGP_PU2_L2_MEMORY_WRITES,PNE_BGP_PU3_L2_MEMORY_WRITES
PRESET,PAPI_L2_DCR,DERIVED_ADD,PNE_BGP_PU0_L2_PREFETCHABLE_REQUESTS,PNE_BGP_PU1_L2_PREFETCHABLE_REQUESTS,PNE_BGP_PU2_L2_PREFETCHABLE_REQUESTS,PNE_BGP_PU3_L2_PREFETCHABLE_REQUESTS
PRESET,PAPI_L2_DCW,DERIVED_ADD,PNE_BGP_PU0_L2_MEMORY_WRITES,PNE_BGP_PU1_L2_MEMORY_WRITES,PNE_BGP_PU2_L2_MEMORY_WRITES,PNE_BGP_PU3_L2_MEMORY_WRITES
PRESET,PAPI_L3_TCA,DERIVED_ADD,PNE_BGP_L3_M0_RD0_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M0_RD1_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M0_R2_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M1_RD0_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M1_RD1_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M1_R2_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M0_RD0_BURST_DELIVERED_L2,PNE_BGP_L3_M0_RD1_BURST_DELIVERED_L2,PNE_BGP_L3_M0_R2_BURST_DELIVERED_L2,PNE_BGP_L3_M1_RD0_BURST_DELIVERED_L2,PNE_BGP_L3_M1_RD1_BURST_DELIVERED_L2,PNE_BGP_L3_M1_R2_BURST_DELIVERED_L2,BGP_L3_M0_W0_DEPOSIT_REQUESTS,BGP_L3_M0_W1_DEPOSIT_REQUESTS,BGP_L3_M1_W0_DEPOSIT_REQUESTS,BGP_L3_M1_W1_DEPOSIT_REQUESTS
PRESET,PAPI_L3_TCR,DERIVED_ADD,PNE_BGP_L3_M0_RD0_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M0_RD1_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M0_R2_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M1_RD0_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M1_RD1_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M1_R2_SINGLE_LINE_DELIVERED_L2,PNE_BGP_L3_M0_RD0_BURST_DELIVERED_L2,PNE_BGP_L3_M0_RD1_BURST_DELIVERED_L2,PNE_BGP_L3_M0_R2_BURST_DELIVERED_L2,PNE_BGP_L3_M1_RD0_BURST_DELIVERED_L2,PNE_BGP_L3_M1_RD1_BURST_DELIVERED_L2,PNE_BGP_L3_M1_R2_BURST_DELIVERED_L2
PRESET,PAPI_L3_TCW,DERIVED_ADD,PNE_BGP_L3_M0_W0_DEPOSIT_REQUESTS,PNE_BGP_L3_M0_W1_DEPOSIT_REQUESTS,PNE_BGP_L3_M1_W0_DEPOSIT_REQUESTS,PNE_BGP_L3_M1_W1_DEPOSIT_REQUESTS
