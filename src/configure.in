#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
# File: configure.in


AC_PREREQ(2.59)
AC_INIT(PAPI, 3.2.2, ptools-perfapi@cs.utk.edu)
AC_CONFIG_SRCDIR([papi.c])
AC_CONFIG_HEADER([config.h])

#checking for OS
OS="`uname | tr '[A-Z]' '[a-z]'`"
case "$OS" in
  cygwin*) OS=cygwin;;
  SunOS)   OS=solaris ;;
  sunos)   OS=solaris ;;
  irix64)  OS=irix ;;
  "unicos/mp") OS=unicos;;
esac

T3EOS="`uname -a | tr '[A-Z]' '[a-z]' | grep unicos`"
if test "$T3EOS" != ""; then
   OS=unicos
fi

#checking for catamount
/bin/rm -f ckcat
cc ckcatamount.c 2>&1 | cat > ckcat
if test "`cat ckcat | grep "IS_CATAMOUNT"`" != ""; then
OS=catamount
fi

#echo $OS
#AC_SUBST($OS)

#checking for OS version number
case "$OS" in
  aix) OSVER="`uname -v`";;
  irix) OSVER="`uname -r`";;
  linux) OSVER="`uname -r`";;
  netbsd) OSVER="`uname -r`";;
  osf1) OSVER="`uname -r | sed -e 's/^V//'`" ;;
  solaris) OSVER="`uname -r`";;
esac
#echo $OSVER
#AC_SUBST($OSVER)

#checking for CPU
R="(R)"
tm="(tm)"
TM="(TM)"
CPU=""
perfmon="no"
case "$OS" in
  aix)
         CPU="`/usr/sbin/lsattr -E -l proc0 | grep type | cut -d '_' -f 2 | cut -d ' ' -f 1 | tr '[A-Z]' '[a-z]'`"
         if test "$CPU" = ""; then
         CPU="`/usr/sbin/lsattr -E -l proc1 | grep type | cut -d '_' -f 2 | cut -d ' ' -f 1 | tr '[A-Z]' '[a-z]'`"
         fi
         ;;
  linux) 
         if test "`cat /proc/cpuinfo | grep GenuineIntel`" != "" ; then
           made=GenuineIntel
           family="`cat /proc/cpuinfo | grep family | cut -d: -f2 | cut -d' ' -f2 | sed '2,$d'`"
           model="`cat /proc/cpuinfo | grep model | cut -d: -f2 | cut -d' ' -f2 | sed '2,$d'`"
           if test "$family" = "15"; then
             if (test "$model" = "3" || test "$model" = "6"); then
               CPU=em64t
             elif test "$model" = "2"; then
               CPU=p4
             fi
#
# Montecito test can go here. For now we just look for family 32,
# but we should use the below code if we know we are on an itanium at
# all because cpuinfo will likely change.
#
#if defined(__GNUC__)
#static inline unsigned long
#ia64_get_cpuid (unsigned long regnum)
#{
#	unsigned long r;
#
#	asm ("mov %0=cpuid[%r1]" : "=r"(r) : "rO"(regnum));
#	return r;
#}
#elif defined(__ECC) && defined(__INTEL_COMPILER)
#include <ia64intrin.h>
#define ia64_get_cpuid(regnum)	__getIndReg(_IA64_REG_INDR_CPUID, (regnum))
#else
#error "Unknown compiler or compiler too old!"
#endif
#
#static inline int
#pfm_ia64_get_cpu_family(void)
#{
#	return (int)((ia64_get_cpuid(3) >> 24) & 0xff);
#}
#
#main()
#{
#	tmp = pfm_ia64_get_cpu_family();
#	if (tmp == 0x20) 
#	  exit(0);
#	exit(1);
#}
           elif test "$family" = "32"; then
	       CPU=montecito
	   fi	   
           if test "$CPU" = "" ; then       
             if test "`cat /proc/cpuinfo | grep "Pentium${R} 4"`" != ""; then
               CPU=p4
             elif test "`cat /proc/cpuinfo | grep "Itanium 2"`" != ""; then
               CPU=itanium2 
             elif test "`cat /proc/cpuinfo | grep Itanium`" != ""; then
               CPU=itanium
             elif test "`cat /proc/cpuinfo | grep "Pentium III"`" != ""; then
               CPU=p3
             elif test "`cat /proc/cpuinfo | grep "Pentium II"`" != ""; then
               CPU=p2
	     else CPU=p3
             fi
           fi 
         elif test "`cat /proc/cpuinfo | grep AuthenticAMD`" != ""; then
           made=AuthenticAMD
		   if test "`cat /proc/cpuinfo | grep "Athlon${tm}[[:space:]]*64"`" != ""; then
             CPU=opteron
           else CPU=athlon
           fi
           family="`cat /proc/cpuinfo | grep family | cut -d: -f2 | cut -d' ' -f2 | sed '2,$d'`"
           model="`cat /proc/cpuinfo | grep model | cut -d: -f2 | cut -d' ' -f2 | sed '2,$d'`"
           if test "$family" = "15"; then
             if test "$model" = "5"; then
               CPU=opteron
             fi
           fi
         else
           family=`uname -m`
           if test "$family" = "ppc64"; then
             echo "family = ppc64"
             CPU_info="`cat /proc/cpuinfo | grep cpu | cut -d: -f2 | cut -d' ' -f2 | sed '2,$d'`"
             case "$CPU_info" in
               PPC970*) CPU="PPC970";;
               POWER4*) CPU="POWER4";;
               POWER5*) CPU="POWER5";;
             esac
          elif test "$family" = "ppc"; then
             CPU_info="`cat /proc/cpuinfo | grep cpu | cut -d: -f2 | cut -d' ' -f2 | sed '2,$d'`"
             case "$CPU_info" in
               744*/745*) CPU="PPC32";;
               750) CPU="PPC32";;
             esac
          elif test "$family" = "mips"; then
	       CPU=mips
	  elif test "$family" = "mips64"; then
	       CPU=mips
	  fi
         fi
             
         ;;
  solaris) 
         processor=`uname -p`
           #this determines if its an Ultrasparc I,II,or III
         if test "$processor" = "sparc"; then
           CPU=`/bin/uname -a | egrep sun4u`
           if test "$CPU" = ""; then
             echo "Sorry but for Solaris you need to have an Ultrasparc for PAPI to work"
             exit 1
           else CPU=ultra
           fi
         fi
         ;;
  irix) CPU=`hinv -t cpu | cut -d ' ' -f 2 | tr '[A-Z]' '[a-z]' | uniq`;;
  osf1) CPU=`uname -p`;;
  unicos)
        if test "`uname -a | tr '[A-Z]' '[a-z]' | grep crayx1`" != ""; then
          CPU=x1-msp
        fi
        if test "`uname -a | tr '[A-Z]' '[a-z]' | grep t3e`" != ""; then
          CPU=t3e
        fi
        ;;
esac 

#echo $CPU
#AC_SUBST($CPU)

AC_ARG_WITH(bitmode,
            [  --with-bitmode=32/64       Specify bit mode of library],
            [bitmode="$with_bitmode"],
            [bitmode=32]
            )
#echo $bitmode
case "$bitmode" in
   64)
      BM="-64bit" ;;
   32)
      BM="" ;;
    *)
      echo "The bitmode "$with_bitmode" you specified is not supported"
      exit -1
      ;;
esac

AC_ARG_WITH(debug,
            [  --with-debug=<no,yes,memory>     Build a debugging version of the library ],
            [debug=$withval],
            [debug=no]
            )
case "$debug" in
   yes)
      DEBUGFLAGS="-DDEBUG" ;;
   memory)
      DEBUGFLAGS="" ;;
   no)
      DEBUGFLAGS="-DPAPI_NO_MEMORY_MANAGEMENT" ;;
   *)					     
      echo "The debug option you specified is not supported"
      exit -1	
      ;;
esac

AC_ARG_WITH(perfctr,
            [  --with-perfctr=<path>     Specify path to prebuilt perfctr distribution ],
            [perfctr=$withval],
            [perfctr=""]
            )
AC_ARG_WITH(perfctr_prefix,
            [  --with-perfctr-prefix=<path>     Specify prefix to installed perfctr distribution ],
            [perfctr_prefix=$withval],
            [perfctr_prefix=""]
            )
AC_ARG_WITH(pfm,
           [  --with-pfm=<path>     Specify path to prebuilt pfm distribution ],
           [pfm=$withval],
           [pfm=""]
            )
AC_ARG_WITH(pfm_prefix,
           [  --with-pfm-prefix=<path>     Specify prefix to installed pfm distribution ],
           [pfm_prefix=$withval],
           [pfm_prefix=""]
            )
AC_ARG_WITH(pmapi,
            [  --with-pmapi=<path>     Specify path of pmapi on aix system ],
            [pmapi=$withval],
            [pmapi=default]
            )

case "$OS" in
   aix)
      case "$pmapi" in
         default)
             case "$CPU" in
                power3)
		  if test "${OSVER}" = "5"; then
		     PMAPI="/usr/pmapi"
		  else
		     PMAPI="/usr/lpp/pmtoolkit"
		  fi
		  ;;
                power4) PMAPI="/usr/pmapi" ;;
                 power5) PMAPI="/usr/pmapi" ;;
             esac
	      ;;
          *)
             PMAPI="$pmapi" ;;
      esac
      ;;
   *)
      case "$pmapi" in
         default) ;;
         *)  echo "pmapi is not needed on this platform" 
	     ;;
      esac
      PMAPI=""
      ;;
esac 
#AC_MSG_RESULT($PMAPI)

case "$OS" in
   aix)
      if test "${OSVER}" = "5"; then
         if test "${CPU}" = "power3"; then 
               MAKEVER="$OS""$OSVER"-"$CPU""$BM"
         else
               MAKEVER="$OS"-"$CPU""$BM"
         fi
      else
         if test "${CPU}" = "power3"; then   
            if test "${bitmode}" = "64"; then
              echo "The bitmode "$with_bitmode" you specified is not supported"
              exit -1
            fi
            MAKEVER="$OS"-"$CPU"
         else
               MAKEVER="$OS"-"$CPU""$BM"
         fi
       fi
       ;;
   catamount)
	   MAKEVER="$OS"-perfctr-opteron
	   ;;
	   
   solaris)
       if test "${bitmode}" = "64"; then
          if test "`isainfo -v | grep "64"`" = ""; then
             echo "The bitmode "$with_bitmode" you specified is not supported"
             exit -1
          fi
       fi
       MAKEVER="$OS"-"$CPU""$BM"
       ;;
   linux) 
# Check for perfmon v2 or v1
	AC_CHECK_FILE(/sys/kernel/perfmon/version,[perfmon=2])
	if test "$perfmon" = "no" ; then
	   case "$CPU" in
		itanium|itanium2|montecito)
		AC_CHECK_FILE(/proc/perfmon,[perfmon=1])
		;;
	   esac
	fi	
       case "$CPU" in
            alpha)
                 if test "${bitmode}" = "64"; then
                   echo "The bitmode "$with_bitmode" you specified is not supported"
                   exit -1
                 fi
                 MAKEVER="$OS"-"$CPU" ;;
            itanium|itanium2|montecito)
                 if test "${with_bitmode}" = "32"; then
                   echo "The bitmode "$with_bitmode" you specified is not supported"
                   exit -1
                 fi
		 if test "$perfmon" = 2; then
		    MAKEVER="$OS"-perfmon2
		 else
		    MAKEVER="$OS"-pfm-"$CPU"
		 fi ;;
            opteron|em64t)
                 if test "${with_bitmode}" = "32"; then
                 	MAKEVER="$OS"-perfctr-"$CPU""-32bit" 
                 else
			if test "$perfctr" != "" -o "$perfctr_prefix" != ""; then
			   MAKEVER="$OS"-perfctr-"$CPU" 
		        elif test "$pfm" != "" -o "$pfm_prefix" != "" -o "$perfmon" = 2; then
			   MAKEVER="$OS"-perfmon2
			else
			   MAKEVER="$OS"-perfctr-"$CPU"
			fi
		 fi
		 ;; 
            athlon|p4|p3|p2)
                 if test "${bitmode}" = "64"; then
                   echo "The bitmode "$with_bitmode" you specified is not supported"
                   exit -1
                 fi
		if test "$perfctr" != "" -o "$perfctr_prefix" != ""; then
		   MAKEVER="$OS"-perfctr-"$CPU" 
		elif test "$pfm" != "" -o "$pfm_prefix" != "" -o "$perfmon" = 2; then
		   MAKEVER="$OS"-perfmon2
		else
		   MAKEVER="$OS"-perfctr-"$CPU"
		fi
		;;
            PPC32)
                 if test "${bitmode}" = "64"; then
                   echo "The bitmode "$with_bitmode" you specified is not supported"
                   exit -1
                 fi
                 MAKEVER="$OS"-perfctr-"$CPU" ;;
            POWER4|POWER5|PPC970)
                 MAKEVER="$OS"-perfctr-"$CPU""$BM" ;;
	    mips)
		 MAKEVER="$OS"-perfmon2
       esac
       ;;
  irix)
       MAKEVER="$OS"-"$CPU""$BM"
       ;;
  osf1)
       case "$CPU" in
            alpha)
                 MAKEVER=tru64-"$CPU" ;;
       esac
       ;;
  unicos)
                 MAKEVER="$OS"-"$CPU" ;;
esac
#echo $MAKEVER
case "$MAKEVER" in 
    aix-power3);;
    aix-power4);;
    aix-power4-64bit);;
    aix-power5);;
    aix-power5-64bit);;
    aix5-power3);;
    aix5-power3-64bit);;
    catamount-perfctr-opteron);;
    dadd-alpha);;
    irix-mips);;
    irix-mips-64bit);;
    linux-alpha);;
    linux-perfctr-athlon);;
    linux-perfctr-em64t);;
    linux-perfctr-em64t-32bit);;
    linux-perfctr-opteron);;
    linux-perfctr-opteron-32bit);;
    linux-perfctr-p2);;
    linux-perfctr-p3);;
    linux-perfctr-p4);;
    linux-pfm-itanium);;
    linux-pfm-itanium2);;
    solaris-ultra);;
    solaris-ultra-64bit);;
    tru64-alpha);;
    unicos-t3e);;
    unicos-x1-msp);;
    unicos-x1-ssp);;
    linux-perfctr-POWER4|linux-perfctr-POWER5|linux-perfctr-PPC970|linux-perfctr-PPC32);;
    linux-perfctr-POWER4-64bit|linux-perfctr-POWER5-64bit|linux-perfctr-PPC970-64bit);;
    linux-perfmon2);;
    *)
    echo Platform $MAKEVER is not supported
    exit -1
    ;;
esac

# Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_F77
AC_PROG_CPP
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

# Checks for libraries.
if test "$OS" = "solaris"; then
AC_CHECK_LIB([cpc], [cpc_take_sample], [], [
      echo "Error, libcpc.a is needed on solaris!"
      exit -1
      ])
fi

#AC_CHECK_LIB([dl], [dlopen])

#AC_CHECK_LIB([m], [sqrt])

if test "$perfctr" != "" -o "$perfctr_prefix" != ""; then
AC_CHECK_LIB([perfctr], [vperfctr_open], [], [
      echo "Error, libperfctr.a could not be found, please build the distribution and set LDFLAGS and rerun configure."
      exit -1
      ])
fi

if test "$perfmon" != "no"; then
if test "$pfm" != "" -o "$pfm_prefix" != ""; then
AC_CHECK_LIB(pfm, pfm_initialize, [
	oLIBS=$LIBS
	LIBS="$LIBS -lpfm"
	AC_CHECK_FUNC(pfm_get_event_description, [AC_DEFINE(HAVE_PFM_GET_EVENT_DESCRIPTION,1,[event description function])],[])
	LIBS=$oLIBS], [
      echo "Error, libpfm.a could not be found, please build the distribution and set LDFLAGS and rerun configure."
      exit -1
      ])
fi
AC_CHECK_FILE(/etc/sgi-release,[
	AC_CHECK_FILE(sn/mmtimer.h,[
		AC_TRY_RUN([
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <stdlib.h>
#include <sys/ioctl.h>
#include <sn/mmtimer.h>

int main()
{
  int offset;
  int fd;

     if((fd = open(MMTIMER_FULLNAME, O_RDONLY)) == -1) {
       exit(1);
     }
     if ((offset = ioctl(fd, MMTIMER_GETOFFSET, 0)) < 0) {
       exit(1);
     }
     close(fd);
     exit(0);
}
],[altix="-DALTIX"],[])],[])],[])
fi

if test "$OS" = "aix"; then
PMINIT=""
AC_CHECK_LIB([pmapi], [pm_initialize], [
      PMINIT="-DPM_INITIALIZE"], [
      AC_CHECK_LIB([pmapi], [pm_init], [
      PMINIT="-DPM_INIT"], [
        echo "Error, libpmapi.a is needed on power!"
        exit -1
        ])],
      [])

#AC_CHECK_LIB([pmapi], [pm_init], [], [
#      echo "Error, libpmapi.a is needed on power!"
#      exit -1
#      ])
fi

if test "$prefix" = "NONE"; then
        my_prefix="$ac_default_prefix"
else
        my_prefix="$prefix"
fi
if test "$datadir" = '${prefix}/share'; then
        datadir="$my_prefix/share/papi"
else 
	datadir="$datadir/share/papi"
fi
PAPI_DATADIR=`eval echo "$datadir/"`
AC_DEFINE_UNQUOTED(PAPI_DATADIR, "$PAPI_DATADIR", [package data directory])
AC_CHECK_LIB([pthread], [pthread_self])

if test "$OS" = "osf1"; then
AC_CHECK_LIB([rt], [clock_gettime])
fi

# FIXME: Replace `main' with a function in `-llipr':
AC_CHECK_LIB([lipr], [main])

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([assert.h ctype.h dirent.h dlfcn.h errno.h expat.h fcntl.h inttypes.h libgen.h limits.h malloc.h math.h memory.h signal.h stdarg.h stdio.h stdlib.h string.h stropts.h sys/ioctl.h sys/mman.h sys/processor.h sys/procfs.h sys/resource.h sys/stat.h sys/syscall.h sys/sysinfo.h sys/sysmp.h sys/time.h sys/timers.h sys/times.h sys/types.h ucontext.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_C_VOLATILE
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL
AC_CHECK_DECLS([sys_siglist])

# Checks for library functions.
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_SETVBUF_REVERSED
AC_FUNC_STRCOLL
AC_FUNC_STRERROR_R
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([bzero getcwd gethrtime getpagesize gettimeofday memchr memmove memset munmap realpath select sqrt strcasecmp strchr strcspn strdup strerror strncasecmp strpbrk strrchr strspn strstr strtol strtoul sysinfo uname])

AC_ARG_WITH(tls,
            [  --with-tls=<no>         To disable GCC thread local storage support and use the PAPI implementation ],
            [tls=$withval],
            [tls=yes]
            )
case "$tls" in
   yes)
      #       NOTLS="" ;;
      dnl ***********************************
      dnl *** Checks for working __thread ***
      dnl ***********************************
      with_tls="__thread"
      AC_MSG_CHECKING(for working __thread)
      #echo $with_tls
      OLDLDFLAGS=$LDFLAGS
      OLDCFLAGS=$CFLAGS
      OLDLIBS=$LIBS
      LDFLAGS=""
      CFLAGS="-pthread"
      LIBS=""
      AC_TRY_RUN([
             #include <pthread.h>
             #include <unistd.h>
             extern __thread int i;
             static int res1, res2;

             void thread_main (void *arg)
             {
               i = (int)arg;
               sleep (1);
               if ((int)arg == 1)
		 res1 = (i == (int)arg);
               else
		 res2 = (i == (int)arg);
             }

	     __thread int i;

             int main () 
             {
               pthread_t t1, t2;

               i = 5;

               pthread_create (&t1, NULL, thread_main, (void *)1);
               pthread_create (&t2, NULL, thread_main, (void *)2);

               pthread_join (t1, NULL);
               pthread_join (t2, NULL);

               return !(res1 + res2 == 2);
             }
      ], [
            AC_MSG_RESULT(yes)
      ], [
            AC_MSG_RESULT(no)
            with_tls=pthread
      ])
      LDFLAGS=$OLDLDFLAGS
      CFLAGS=$OLDCFLAGS
      LIBS=$OLDLIBS
     #if test "x$TARGET" = "xAMD64" -o "x$TARGET" = "xX86"; then
     if test "$OS" = "linux"; then
        if test "x$with_tls" = "x__thread"; then
                #
                # On some linux distributions, TLS works in executables, but linking
                # against a shared library containing TLS fails with:
                # undefined reference to `__tls_get_addr'
                #
                rm -f conftest.c conftest.so conftest
                echo "static __thread int foo; void main () { foo = 5; }" > conftest.c
                gcc -fPIC --shared -o conftest.so conftest.c > /dev/null 2>&1
                gcc -o conftest conftest.so > /dev/null 2>&1
                if test ! -f conftest; then
                   AC_MSG_WARN([Disabling usage of __thread.]);
                   with_tls=pthread
                fi
                rm -f conftest.c conftest.so conftest
        fi
     #else
     #   with_tls=pthread
     fi

     if test "x$with_tls" = "x__thread"; then
      # Pass the information to libgc
        #CPPFLAGS="$CPPFLAGS -DUSE_COMPILER_TLS"
        #export CPPFLAGS
        NOTLS="-DUSE_COMPILER_TLS"
     else
        NOTLS="-DNO_TLS"
     fi
     ;;

 no)
             NOTLS="-DNO_TLS" ;;
 esac

if test "$OS" = "linux"; then
OLDLDFLAGS=$LDFLAGS
OLDCFLAGS=$CFLAGS
OLDLIBS=$LIBS
LDFLAGS=""
CFLAGS=""
LIBS=""
AC_MSG_CHECKING(for working CLOCK_REALTIME_HR POSIX 1b timer)
AC_TRY_RUN([
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <syscall.h>

main()
{
  struct timespec t1, t2;
  double seconds;

  if (syscall(__NR_clock_gettime,CLOCK_REALTIME_HR,&t1) == -1) exit(1);
  sleep(1);
  if (syscall(__NR_clock_gettime,CLOCK_REALTIME_HR,&t2) == -1) exit(1);
  seconds = ((double)t2.tv_sec + (double)t2.tv_nsec/1000000000.0) - ((double)t1.tv_sec + (double)t1.tv_nsec/1000000000.0);
  if (seconds > 1.0)
    exit(0);
  else
    exit(1);
}     ], [
	    AC_MSG_RESULT(yes)
	    AC_DEFINE(HAVE_CLOCK_GETTIME_REALTIME, CLOCK_REALTIME_HR, [POSIX 1b realtime HR clock])
      ], [
            AC_MSG_RESULT(no)
AC_MSG_CHECKING(for working CLOCK_REALTIME POSIX 1b timer)
AC_TRY_RUN([
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <syscall.h>

main()
{
  struct timespec t1, t2;
  double seconds;

  if (syscall(__NR_clock_gettime,CLOCK_REALTIME,&t1) == -1) exit(1);
  sleep(1);
  if (syscall(__NR_clock_gettime,CLOCK_REALTIME,&t2) == -1) exit(1);
  seconds = ((double)t2.tv_sec + (double)t2.tv_nsec/1000000000.0) - ((double)t1.tv_sec + (double)t1.tv_nsec/1000000000.0);
  if (seconds > 1.0)
    exit(0);
  else
    exit(1);
}     ], [
	    AC_MSG_RESULT(yes)
	    AC_DEFINE(HAVE_CLOCK_GETTIME_REALTIME, CLOCK_REALTIME, [POSIX 1b realtime clock])
      ], [
            AC_MSG_RESULT(no)
      ])
      ])

      #       NOTLS="" ;;
      dnl ***********************************
      dnl *** Checks for working per thread timer***
      dnl ***********************************
      CFLAGS="-pthread"
      AC_MSG_CHECKING(for working per-thread times() timer)
      AC_TRY_RUN([
        #include <pthread.h>
        #include <sys/signal.h>
        #include <sys/times.h>
        #include <assert.h>
        #include <stdio.h>
        #include <sys/types.h>
        #include <unistd.h>
        #include <sys/unistd.h>
        #include <syscall.h>
        #include <stdlib.h>

        #if ! defined( SYS_gettid )
        #define SYS_gettid 1105
        #endif

        long threadone = 0;
        long threadtwo = 0;
        pthread_t threadOne, threadTwo;
        volatile int done = 0;

        int gettid() {
            return syscall( SYS_gettid );
        }

        int doThreadOne( void * v ) {
            struct tms tm;
            int status;

            while (!done)
	          sleep(1);
        
            status = times( & tm );
            assert( status != -1 );
            threadone = tm.tms_utime;
        
            return 0;
        } 

        int doThreadTwo( void * v ) {
            struct tms tm;
            long i;
	    long j = 0xdeadbeef;
            int status;
        
            for( i = 0; i < 0xFFFFFFF; ++i ) { j = j ^ i; }

            status = times( & tm );
            assert( status != -1 );
        
            threadtwo = tm.tms_utime;
            done = 1;
	        return j;
        } 

        int main( int argc, char ** argv ) {
            int status;

        
            status = pthread_create( & threadOne, NULL, doThreadOne, NULL );
            assert( status == 0 );
            status = pthread_create( & threadTwo, NULL, doThreadTwo, NULL );
            assert( status == 0 );  


            status = pthread_join( threadTwo, NULL );
            assert( status == 0 );
            status = pthread_join( threadOne, NULL );
            assert( status == 0 );
	        return (threadone == threadtwo);
        } 
      ], [
            AC_MSG_RESULT(yes)
	    times="yes"
      ], [
            AC_MSG_RESULT(no)
	    times="no"
      ])

AC_MSG_CHECKING(for working CLOCK_THREAD_CPUTIME_ID POSIX 1b timer)
AC_TRY_RUN([
#include <pthread.h>
#include <sys/signal.h>
#include <sys/times.h>
#include <assert.h>
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/unistd.h>
#include <syscall.h>
#include <stdlib.h>

#if ! defined( SYS_gettid )
#define SYS_gettid 1105
#endif

struct timespec threadone = { 0, 0 };
struct timespec threadtwo = { 0, 0 };
pthread_t threadOne, threadTwo;
volatile int done = 0;

int gettid() {
    return syscall( SYS_gettid );
}

void *doThreadOne( void * v ) {
     while (!done)
	  sleep(1);

  if (syscall(__NR_clock_gettime,CLOCK_THREAD_CPUTIME_ID,&threadone) == -1)
    {
      perror("clock_gettime(CLOCK_THREAD_CPUTIME_ID)");
      exit(1);
    }

    return 0;
} 

void *doThreadTwo( void * v ) {
    long i;
    long j = 0xdeadbeef;

    for( i = 0; i < 0xFFFFFFF; ++i ) { j = j ^ i; }

  if (syscall(__NR_clock_gettime,CLOCK_THREAD_CPUTIME_ID,&threadtwo) == -1)
    {
      perror("clock_gettime(CLOCK_THREAD_CPUTIME_ID)");
      exit(1);
    }

    done = 1;
	return j;
} 

int main( int argc, char ** argv ) {
    int status;


    status = pthread_create( & threadOne, NULL, doThreadOne, NULL );
    assert( status == 0 );
    status = pthread_create( & threadTwo, NULL, doThreadTwo, NULL );
    assert( status == 0 );  


    status = pthread_join( threadTwo, NULL );
    assert( status == 0 );
    status = pthread_join( threadOne, NULL );
    assert( status == 0 );

    if ((threadone.tv_sec != threadtwo.tv_sec) || (threadone.tv_nsec != threadtwo.tv_nsec))
       exit(0);
    else
	{	fprintf(stderr,"T1 %ld %ld T2 %ld %ld\n",threadone.tv_sec,threadone.tv_nsec,threadtwo.tv_sec,threadtwo.tv_nsec);
	exit(1); }
}      ], [
	    AC_MSG_RESULT(yes)
	    clock_gettime="yes"
      ], [
            AC_MSG_RESULT(no)
	    clock_gettime="no"
      ])

#AC_MSG_RESULT($NOTLS)
AC_ARG_WITH(PTtimer,
            [  --with-PTtimer=<any,clock_gettime,times,proc>         To use clock_gettime(),times() or /proc for a per-thread timer ],
            [PTtimer=$withval],
            [PTtimer=any]
            )
case "$PTtimer" in
   times)
   if test "$times" = "no"; then
      echo "times() does not work for per-thread on this platform."
      exit -1
   else
       AC_DEFINE(HAVE_PER_THREAD_TIMES, 1, [Working per thread timer])
   fi
   ;;
   clock_gettime)
   if test "$clock_gettime" = "no"; then
      echo "clock_gettime(CLOCK_THREAD_CPUTIME_ID) does not work on this platform."
      exit -1
   else
      AC_DEFINE(HAVE_CLOCK_GETTIME_THREAD, CLOCK_THREAD_CPUTIME_ID, [POSIX 1b per-thread clock])
   fi
   ;;
   proc)
    AC_DEFINE(USE_PROC_PTTIMER, 1, [Use /proc for per-thread times])
   ;;
   any)
   if test "$clock_gettime" = "yes"; then
       AC_DEFINE(HAVE_CLOCK_GETTIME_THREAD, CLOCK_THREAD_CPUTIME_ID, [POSIX 1b per-thread clock])
   elif test "$times" = "yes"; then
       AC_DEFINE(HAVE_PER_THREAD_TIMES, 1, [Working per thread times])
   else
       AC_DEFINE(USE_PROC_PTTIMER, 1, [Use /proc for per-thread times])
   fi
   ;;
esac
LDFLAGS=$OLDLDFLAGS
CFLAGS=$OLDCFLAGS
LIBS=$OLDLIBS
fi

AC_SUBST(DEBUGFLAGS)
AC_SUBST(MAKEVER)
AC_SUBST(prefix)
AC_SUBST(PMAPI)
AC_SUBST(F77)
AC_SUBST(CPP)
AC_SUBST(CC)
AC_SUBST(PAPI_DATADIR)
AC_SUBST(NOTLS)
AC_SUBST(altix)
AC_SUBST(PMINIT)
AC_SUBST(perfctr_prefix)
AC_SUBST(perfctr)
AC_SUBST(pfm_prefix)
AC_SUBST(pfm)

get_bitmode()
{
 input="bad"
 while [ test "${input}" != "ok" ]
 do
   input="ok"
   echo 
   echo "Do you want to install 64bit mode library?"
   echo 
   echo -n "Choice is required [yes/no]: "
   read num
   case "${num}" in
     yes)
        bitmode=64
        ;;
     no)
        bitmode=""
        ;;
     *)
        echo
        echo Warning: invalid choice \'$num\'. Type again.
        echo
        input="bad"
        ;;
   esac
 done
}

AC_CHECK_FILE(./genpapifdef, 
		[rm -f ./genpapifdef
		 ${CC}  genpapifdef.c -o genpapifdef
		],
		[${CC}  genpapifdef.c -o genpapifdef
		])

AC_CHECK_FILE(./fpapi.h,
	[],
	[./genpapifdef -c > fpapi.h
	])

AC_CHECK_FILE(./f77papi.h,
	[],
	[./genpapifdef -f77 > f77papi.h
	])

AC_CHECK_FILE(./f90papi.h,
	[],
	[./genpapifdef -f90 > f90papi.h
	])


AC_CONFIG_FILES([Makefile])
AC_OUTPUT
