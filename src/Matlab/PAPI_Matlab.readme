Running PAPI's High Level API in the MATLAB Environment

If you have the desire to do this, you most likely already
know why you want to make calls to PAPI inside of a 
MATLAB environment.

If you don't know much about what composes PAPI's high 
level API, you should probably take a look at this:

http://icl.cs.utk.edu/projects/papi/files/documentation/PAPI_USER_GUIDE_23.htm#WHAT_IS_HIGH_LEVEL_API

This section of the PAPI user guide covers C and FORTRAN
calls, but at the moment, you can only make C calls
from the MATLAB environment.

There is one overall function to all from Matlab; from there,
you specify which of the 6 functions you want to call, and then
the arguments to each.  Here are some examples:

PAPI_num_counters - Returns the number of available
  hardware counters on the system.

Ex:  num_counters = PAPI_Matlab('num')


PAPI_flops - Has 3 possibilities:
  Initialize FLOP counting with:
    PAPI_Matlab('flops', 0)
  Record the number of floating point operations since
  initialization:
    ops = PAPI_Matlab('flops')
  Record the number of floating point operations and
  the incremental rate of floating point execution
  since initialization:
    [ops, mflops] = PAPI_Matlab('flops')
  

PAPI_start_counters - Specify the events to count
  (in text form - don't bother to look up the codes; 
  they won't work.)  You cannot specify more events
  than there are hardware counters.

  To begin counting cycles and instructions:
    PAPI_Matlab('start', 'PAPI_TOT_CYC', 'PAPI_TOT_INS');


PAPI_read_counters - Simply specify the variables to read
  the values into.  You cannot specify more variables
  than there are hardware counters.  This will reset the
  counters.

  To read the above events you just started:
    [cycles, instructions] = PAPI_Matlab('read');


PAPI_accum_counters - This function adds the value you
  pass to the readings in the hardware counter.  You
  cannot specify more variables than there are hardware
  counters.  This function will reset the counters.

  To add the values currently in the counters to the
  previously read values:
    [cycles, instructions] = PAPI_Matlab('accum', cycles, instructions);


PAPI_stop_counters - This function reads the value of
  the running hardware counters into the variables
  you specify.  You cannot specify more variables than
  there are hardware counters.

  To stop the running counters you previously started
  and record their values:
    [cycles, instructions] = PAPI_Matlab('stop');


PAPI_Matlab.c, when compiled, functions simply as a
wrapper.  In order to use the calls, you need to know a little
about mex.  mex is simply the compiler you use to make your
code run in the MATLAB environment.  If you don't know
how to use mex, you might want to acquaint yourself a bit.

"mex -setup "might be needed if you encounter problems, but
the simplest explanation might be to substitute "mex" for 
"gcc" and you are on your way.

All the other rules for compiling PAPI are the same.  mex
compilations can de done inside or outside of the Matlab
environment, but in this case, it is recommended that you
compile outside of Matlab.  For some reason, compiling 
inside does not work.

So far, only the Linux environment has been tested, but
_in theory_ this code should work anywhere PAPI and Matlab
both work.

For instance, if I want to compile and run on a linux
machine assuming PAPI_Matlab.c is in your current working
directory (you'll have a different compile string on a 
different architecture):

1. Compile the wrapper
mex -I/usr/local/include PAPI_Matlab.c -L/usr/local/lib/libpapi.a

2.  Start Matlab:
matlab

3.  Run the code:
a.  Find the number of hardware counters on your system:
num_counters = PAPI_Matlab('num')


b.  Play with flops - the first initializes the counting
    the second returns the number of floating point operations
    since the first call and the third line does the same as the
    first and ALSO reports the incremental rate of floating point
    execution since the last call:
PAPI_Matlab('flops', 0)
ops = PAPI_Matlab('flops')
[ops, mflops] = PAPI_Matlab('flops')

c.  Start counting:
PAPI_Matlab('start', 'PAPI_TOT_CYC', 'PAPI_TOT_INS')

d.  Read the counters and reset:
[cycles, instr] = PAPI_Matlab('read')

e.  Add the current value of the counters to a previous read
    and reset:
[cycles, instr] = PAPI_Matlab('accum', cycles, instr)

f.  Read the counters and stop them:
[cycles, instr] = PAPI_Matlab('stop')

You can pass as many events as you like to be counted or
recorded, as long as that number does not exceed the number
of available hardware counters.

Contact jthomas@cs.utk.edu with any questions regarding
PAPI calls in Matlab - either errors or questions.
Also, this has just been implemented, so changes could
be coming..........
