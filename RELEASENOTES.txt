===============================================================================
PAPI 3.5.0 RELEASE NOTES                                            07 Nov 2006
===============================================================================

This file documents changes in recent PAPI releases in inverse chronological
order.

For details on installing PAPI on your machine, consult the INSTALL.txt file
in this directory.

For specific and detailed information on changes made in this release, grep
the ChangeLogP350.txt file for keywords of interest or go directly to the PAPI
cvs tree.


GENERAL NOTES
===============================================================================
This release is a major upgrade to PAPI 3.2.1. It introduces support for  
several new platforms, introduces a few new features, and contains a myriad 
number of bug fixes, consolidations, and enhancements. These changes are
summarized below.

If you are currently using PAPI 3.2.1 or earlier,
it is recommended that you upgrade to this version.

As always, if you identify strange behavior or demonstrable bugs, please
contact the PAPI team or one of the PAPI development lists.

And visit the PAPI website for the latest updates:
http://icl.cs.utk.edu/papi/


CHANGES IN PAPI 3.5.0 SINCE PAPI 3.2.1
===============================================================================
Bug Fixes:
----------
- too numerous to enumerate...

Enhancements:
-------------
- Massive changes to 'configure' to support a wide range of customization.
  ./configure is now *required* for all builds
  See:
    % ./configure --help 
  for details.
- Data Address Range and Instruction Address Range support for Itanium
  (see documentation for PAPI_set_opt).
- PAPI_dmem_info has been resurrected to provide dynamic memory information.
- PAPI_attach and PAPI_detach for monitoring other threads.
- PAPI_get_substrate_info for detailed information on substrate features.
- PAPI_list_threads for enumerating all threads known to PAPI.
- Hypervisor domain support -- see PAPI_set_domain.
- Imported perfctr-2.6.25 to support Intel Core2Duo and Pentium D.
- Imported perfctr-2.7.20.2 to support Linux/PPC substrates on current kernels.

New Platforms:
-------------
- Intel Core2Duo
- Intel Pentium D
- IBM PPC32
- Windows Server 2003 64-bit / Opteron
- IBM Blue Gene -- major update 
- Cray XT3 -- major update; now supports limited event overflows

Major Issues:
-------------
- Floating Point Operations on Opteron varied widely depending on code 
  constructs. This was found to be due to speculative counting in some
  cases, and counting FP loads in other cases. We modified the Opteron
  substrate to support buildtime and runtime redefinition of the FP_OPS.
  event. See the PAPI FAQ for details.

Experimental:
-------------
- Experimental support for Itanium Montecito.
- Experimental support has been added for perfmon2 (requires a kernel patch;
  currently only implemented for Montecito).
- Experimental support for IBM PPC970MP as found in Mare Nostrum.

Known Bugs:
-----------
- Itanium -- earprofile now requires perfmon2 to run. The earprofile
  test will fail on standard perfmon installations.
- Cray XT3 -- seg faults on several overflow and profile tests.
- Cray X1 fails software_overflow test.
- Problems unresolved with OpenMP on Itanium SMP. See:
  http://icl.cs.utk.edu/projects/papi/bugz/show_bug.cgi?id=66
  This bug could not be readily duplicated on machines at UTK.


CHANGES IN PAPI 3.2.1 SINCE PAPI 3.2.0
===============================================================================
Bug Fixes:
----------
- Bumped version number per Rick Kufrin
- rebuilt f*.h files to synchronize with new version number per Maynard Johnson

Enhancements:
-------------
- Imported perfctr-2.7.19 for better support of Linux/PPC substrates


CHANGES IN PAPI 3.2.0 SINCE PAPI 3.1.0
===============================================================================
New Platforms:
-------------
- Introduced support for AIX/POWER5 (i.e. ASCI PURPLE)
- Enhanced support for Cray XT3 Catamount/Opteron

Major Issues:
-------------
- Further hardening and testing of the vectorized substrate interface. 
  This is the harbinger of a  componentized PAPI that will allow
  support for multiple simultaneous substrates.
  	
Bug Fixes:
----------
- Modified Rules.pfm to fix build problem on Itanium/Altix
- Made installation of SHLIB conditional, since it isn't always built
- Fixed compilation problems in papi_memory.c on IRIX, Cray X1
- src/irix-mips.c :
		Fix mis-assignment in vector table that caused real time counts to fail;
		modified Dl_info structure reference per Sameer's suggestion.
- src/Makefile.catamount-perfctr-opteron :
		Force NOTLS = -DNO_TLS for Catamount, since threads aren't 
		supported.
- src/ctests/byte_profile.c, src/ctests/test_utils.c
		Code rearrangement to satisfy Cray X1. Definitions must occur 
		before executable code in functions.
- src/papi_memory.c , src/papi_memory.h, src/papi_preset.c :
		Modified papi_valid_free to return true or false depending on if the pointer was freed;
		Use this value when cleaning up to decide if event info pointers should be set to null.
		This eliminates problem with corrupted strings in multiplex1 reported by Steve Kaufmann @ Cray

Enhancements:
-------------
- libpfm 2.1 support added
- perfctr 2.6.17 support added for Dual Core Pentium D

Experimental:
-------------
- Hardened the vectorized interface between hardware independent and substrate layers
- Reworked and hardened papi_memory interface for better malloc and free control

Known Bugs:
-----------
- Solaris-ultra generates a segfault in _papi_hwd_init_control_state only when using
	the gcc compiler.


CHANGES IN PAPI 3.1.0 SINCE PAPI 3.0.8
===============================================================================
New Platforms:
-------------
- Introduced substrates for Linux/POWER4/POWER5/PPC970
- perfctr 2.7.x added to support above substrates
- Introduced preliminary support for Cray XT3 Catamount/Opteron

Major Issues:
-------------
- Retstructured interface between hardware independent layer and substrates to
  isolate the interface. This is the first step in componentizing PAPI to allow
  support for multiple simultaneous substrates.
  	
Bug Fixes:
----------
- Modifications to make genpapifdef independent of libpapi.
  This should make it easier to implement on platforms like RedStorm and BGL
  where the compute node is different from the compile node.
- Modified Matlab support for Pentium M SSE flops counting
- Added java support for mem_info
- ctests/test_utils.c:
  Modified add_two_events() to do_the_right_thing (TM).
  Submitted by Maynard Johnson of IBM.
- Fixed a bug in AIX 5.2.0.30 pmapi that causes failures in pm_init
  for complex mpi programs. Thanks to Bernd Kallies.
- Fixed various fopen and dlopen problems on aix and solaris
- All strings now use PAPI definitions that match their 
  declarations in papi.h, no more PATH_MAX
- linux.c: New version of update_SHLIB_info that now does the 'right' thing on
  all systems including IA64, PPC/32/64 and x86, x86_64.
- linux.c: BSS is now deprecated!
- various fixes to libpfm 3 for Itanium

Enhancements:
-------------
- perfctr 2.7.x added to support above substrates
- perfctr 2.6.15 support added
- Addition of papi memory calls.  This allows papi to track memory
  and free up all memory in a shutdown call.  All calls should now
  be papi_free, papi_malloc, papi_realloc and papi_calloc
  By default papi tracks memory and frees things up.  If:
  PAPI_DEBUG_MEMORY is defined then in addition it tracks where the
  memory was allocated from and if there is a memory leak at shutdown
  prints out the file and line it came from and how many bytes it was.
  Grep the change log for 'PAPI_DEBUG_MEMORY' for more details.
- Added two new entry points to the API:
		- PAPI_set_event_info() is symmetric with PAPI_get_event_info().
		  It allows a user to add or modify the definition of a preset event for a given platform.
		  The scope of the modification is only for the duration of that invokation of PAPI.
		- PAPI_encode_events() reads a csv (comma separated values) file containing
		  event definition information and loads it into the preset table.
		  In conjunction with a decode utility, this provides the user (or toolmaker) with
		  the ability to support custom event definitions or overrides on specific platforms.
- Two new tests to exercise the new APIs introduced to PAPI.
		encode.c exercises PAPI_set_event_info
		encode2.c exercises PAPI_encode_events
		Both require properly formatted csv files to function.
		See utils/decode to create such files.
			* utils/decode.c 1.1:
- New utility that uses PAPI_get_event_info() to create csv formatted output
		suitable for use by PAPI_encode_events().
		Such output can be viewed and edited in a csv-compatible spreadsheet,
		such as Excel, an can be used as input to the encode and encode2 test programs.


Experimental:
-------------
- Added substrate support for the Linux ACPI interface
- Added substrate support for the Myricom MX network card interface
- Added optional support for XML definition of events on PIII only.
  This feature is off by default and may never make it to a release.

Known Bugs:
-----------


CHANGES IN PAPI 3.0.8 SINCE PAPI 3.0.7
===============================================================================

Major Issues:
-------------	
* src/Rules.perfctr:
  - add configure switch --with-tls=<yes|no>. By default, it is '
    yes' and running the checking code. When it is 'no', -DNO_TLS
    passed to gcc.

* src/linux-ia64.c, src/linux-ia64.h, src/pfmwrap.h:
  - Fixes for SGI Propack 3 on Altix...
    This happens because it's a Perfmon 2 platform + NPTL threads. Got
    rid of those pesky, pesky pids instead of nice little tids.
  - Added code to use the MM timer on the Altix. This provides synchronized
    RTC's across the system.

* src/linux.c:
  - Fixed a bug that showed up on the Nocona. A string was being used
    as HUGE but declared as MAX. This bug also later showed up on other
    linux systems.
  - When PAPI is run as SUID, often links in /proc are inaccessible.
    The fix is simply to tolerate inaccessible /proc information since 
    this doesn't affect library operation at all. In this case, the 
    exe_name and full_name are NULL strings, and the memory map is empty. 
    Debug error messages are still raised.
    The executable name can be empty, as can the memory map.


Bug Fixes:
----------
* src/extras.c, src/p4_events.c, src/papi.c, src/papi_protos.h:
  - Changes to address the thread-unsafe behavior of _papi_hwd_code_to_{name,descr}().
    Rather than change the calling sequence of these routines in every substrate,
    I changed the way the routines are called from extras.c, wrapping them in PAPI_lock/unlock pairs.
    Pentium 4 was the only substrate that posed a thread risk. That hole has now been plugged.

* src/extras.c:
  - Ensure that _papi_hwi_using_signal is always incremented.

* src/multiplex.c:
 - Prevent the PAPI_EINVAL error if MPX_cleanup is called multiple times
   for a given set of MPX events (which happens in ctests/multiplex1).

* src/papi_internal.c:
  - Ensure that all native events that we fail to add during a given call 
    to add_native_events() get cleaned out of the NativeInfoArray. 
    This change makes sure we examine all NativeInfoArray event entries 
    to see if they failed and need to be removed.

* src/x1-presets.h:
  - Deprecated PAPI_TOT_IIS for X1. Previous definition was giving random 
    results from 0 to very large.

* src/linux-ia64.c:
  - Fix for not compiling using libpfm 3.0
  - Fix for software overflowing using PFM 3.0

* src/irix-mips.c:
  - Fix for software overflow on irix

* src/extras.c, src/linux-ia64.c, src/papi.c:
  - Fixes for forced overflow, first we had no default for a sigaction so in some
    cases a sigaction wasn't getting setup, and ia64 didn't have dispatch_timer
    routine implemented at all. Added better debugging messages.

* src/genpapifdef.c:
  - Modifications to work around Cray Fortran bug with maximum negative integer values.

* src/papi_fwrappers.c:
  - Modified fwrappers to support Cray X1 'string length at end' convention.

* src/Rules.pfm:
  - Fixed build for ALTIX. This was building with PFM in our directory,
    but there should be always building with the pfm in /usr.

* src/Makefile.solaris-ultra, src/Makefile.solaris-ultra-64bit:
  - Removed -R argument to shared link, which was putting the wrong path
    in to the run-time loader.
  - Removed the -h flag to the shared link, which was (in the 64 bit case)
    setting the wrong name of the library.
    Neither is required.

* src/Makefile.linux-perfctr-{athlon, p3}, src/papi_internal.c:
  - Created a work-around for a situation found on PIII in which
    DERIVED_SUB events would occasionally generate small negative results.
    Now, for PIII only, small negatives (>= -3) are trapped and 
    forced to zero. This bug was causing occasional failures in ctests/memory.c

* src/ctests/overflow.c, src/ctests/overflow2.c:
  - For cases where software overflow is used on PAPI_TOT_INS, care must be
    taken to ensure that the sampling rate is faster than the overflow rate.
    Since for linux the sampling rate is fixed at 10 msec, the overflow threshold
    is now set to: mythreshold = hw_info->mhz*10000*2 for software overflow 
    when using TOT_INS.

* src/ftests/native.F:
  - Added native events for Cray X1.

* src/ftests/ftests_util.F:
  - Modified ftest_fail to match test_fail.
    Now skips on PAPI_EPERM so that second.F will skip the same as second.c

* src/ctests/overflow_force_software.c:
  - Changed the verification to check overflows and removed the printing of
    the event when hardware overflowing is enabled as reading an event that
    is on hardware overflow doesn't mean anything.
  - Changes to check for derived events, and to get rid of the need for strcmp
    on os names.
  - Fix to check for compound derived events which CAN be used to overflow
    on in hardware (Currently only p4 has them).  This allows P4 to use
    FP_INS instead of TOT_INS


Enhancements:
-------------
* src/utils:
  - Added a utils directory with an initial collection of useful tools.
    These tools are repurposed from the ctests directory, but are generally
    useful enough to warrant their own directory and installation option.
    Man pages and html pages are available for each utility.

* src/perfctr-2.6.13:
  - Added Perfctr-2.6.13 to the repository. Please, don't use perfctr-2.4
    unless perfctr-2.6.x doesn't work for you. There is NO linkage between 
    perfctr versions and linux kernel versions. Perfctr 2.6.x works just fine
    with linux 2.4.

*src/libpfm-3.x:
  - Updated (Itanium) libpfm to 3.1, current as of 2004-12-21.

* src/configure, src/configure.in:
  - Allowed configure to detect the Altix.

* src/linux-ia64.{c,h}:
  - Added MMTIMER support on Altix for good global timing.

* src/power4.c:
  - Add 20 cache and branch events contributed by Brian Wylie.
    This nearly doubles the number of events available on POWER4.

* src/p3_events.c, src/perfctr-p3.c, src/perfctr-p3.h:
  - Modifications to native event tables for Pentium II, III, Athlon and Opteron to
    dynamically generate all combinations of events that support MESI (Intel) or
    MOESI (AMD) bits. Similar to the way that Pentium 4 supports groups and
    modifiers, but MUCH simpler.

* src/p3_events.c:
  - Added / modified a number of events to Opteron per Brian Wylie's suggestions:
	PAPI_L2_TCH, PAPI_L1_ICH, PAPI_L2_DCW, PAPI_L1_LDM, PAPI_L2_LDM
  - Added six new undocumented native events to Opteron event table per Phil's request.
    These measure NUMA HyperTransport memory and IO transfers.
    Run utils/native_avail on Opteron and look at the last six entries.

* src/p4_events.c:
  - Implemented PAPI_L1_ICA and PAPI_L1_ICM per suggestions from Brinkley Sprunt.

* src/Makefile.linux-perfctr-{em64t-32bit, opteron-32bit}:
  - Added 32 bit library support for 64 bit platforms. This has been tested on
    an Opteron. All tests pass. Configure script works also.

* src/any-null.{c,h}:
  - This seems to be working again.

* src/papi_internal.h:
  - If you set PAPI_DEBUG to ALL or THREADS and compile with -DDEBUG,
    now the internal eventset lookup routine will return NULL if you
    lookup another threads eventset. This should help debug possible
    problems on architectures where signals may be delivered to any threads.
    Under normal operation, this is not turned on for performance reasons.

* src/power3.h, src/power4.h:
  - Added pm_data_t to hwd_control_state_t. This contains per thread
    space for the counters!


Known Bugs:
-----------
* src/x1.c:
  - A subtle bug was uncovered in the use of hardware event overflow on the 
    X1 P-chip. It appears that once overflow is turned on, it cannot be turned
    off without exiting the application. This affects the 
    overflow_force_software() test on X1.

* src/linux-ia64.c:
  - On many Redhat IA64 systems, and this includes SGI's Propack 3 and 4,
    there is a bug in the pfmon code (the kernel counter subsystem) that
    causes interrupts to stop being delivered to the user code. This can
    be seen by repeatedly running the profile_pthreads test case. You will
    either get an error message from PFM_RESTART or you will see that the
    PAPI_FP_OPS counter has gone to 0 or a positive value. This does not
    happen on stock 2.4 kernels that have been properly patched with Bjorn's
    IA64 update. 2.6 kernels do not have this issue. If you have a kernel
    that exhibits this problem, please send the name to us.

* src/ctests/profile_pthreads.c:
  - On Athlon only, this test fails to generate any profile data about 40% 
    of the time. We haven't yet been able to figure out why.

* src/ctests/kufrin.c
  - Unexplained failures on some POWER3 machines. Please contact us if you
    experience this.

* src/ctests/multiplex3_pthreads.c
  - Unexplained failures on some POWER4 machines. Please contact us if you
    experience this.

